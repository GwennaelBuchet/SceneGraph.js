{
    "project": {
        "name": "SceneGraph.js",
        "description": "HTML5 canvas Framework",
        "version": "2.2.0",
        "url": "http://gwennaelbuchet.github.io/SceneGraph.js/",
        "logo": "../logo/logoCGSG_256x57.png",
        "themedir": "./Medias/theme_yuidoc/defaulttheme.json"
    },
    "files": {
        "src\\animation\\class.anim.timeline.js": {
            "name": "src\\animation\\class.anim.timeline.js",
            "modules": {},
            "classes": {
                "CGSGTimeline": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\animation\\class.animmanager.js": {
            "name": "src\\animation\\class.animmanager.js",
            "modules": {},
            "classes": {
                "CGSGAnimationMethod": 1,
                "CGSGAnimationManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\animation\\class.keyframe.js": {
            "name": "src\\animation\\class.keyframe.js",
            "modules": {},
            "classes": {
                "CGSGKeyFrame": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\class.collision.manager.js": {
            "name": "src\\collision\\class.collision.manager.js",
            "modules": {
                "Collision": 1
            },
            "classes": {
                "CGSGCollisionManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\class.collision.tester.factory.js": {
            "name": "src\\collision\\class.collision.tester.factory.js",
            "modules": {},
            "classes": {
                "CGSGCollisionTesterFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\class.collision.tester.ghost.ondemand.js": {
            "name": "src\\collision\\class.collision.tester.ghost.ondemand.js",
            "modules": {},
            "classes": {
                "CGSGCollisionGhostOnDemandTester": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\class.collision.tester.region.js": {
            "name": "src\\collision\\class.collision.tester.region.js",
            "modules": {},
            "classes": {
                "CGSGCollisionRegionTester": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\collision\\enum.collision.method.js": {
            "name": "src\\collision\\enum.collision.method.js",
            "modules": {},
            "classes": {
                "CGSGCollisionMethod": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\effects\\class.effect.grayscale.js": {
            "name": "src\\effects\\class.effect.grayscale.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\effects\\class.effect.invertcolors.js": {
            "name": "src\\effects\\class.effect.invertcolors.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\effects\\class.effect.js": {
            "name": "src\\effects\\class.effect.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\event\\class.event.js": {
            "name": "src\\event\\class.event.js",
            "modules": {},
            "classes": {
                "CGSGEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\event\\class.eventmanager.js": {
            "name": "src\\event\\class.eventmanager.js",
            "modules": {},
            "classes": {
                "CGSGBindEntry": 1,
                "CGSGEventManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\ext\\WUICCGSGNodeImageFactory.js": {
            "name": "src\\ext\\WUICCGSGNodeImageFactory.js",
            "modules": {},
            "classes": {
                "WUICCGSGNodeImageFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\interpolator\\class.interpolator.TCB.js": {
            "name": "src\\interpolator\\class.interpolator.TCB.js",
            "modules": {},
            "classes": {
                "CGSGInterpolatorTCB": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\interpolator\\class.interpolator.js": {
            "name": "src\\interpolator\\class.interpolator.js",
            "modules": {},
            "classes": {
                "CGSGInterpolator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\interpolator\\class.interpolator.linear.js": {
            "name": "src\\interpolator\\class.interpolator.linear.js",
            "modules": {
                "Animation": 1
            },
            "classes": {
                "CGSGInterpolatorLinear": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\mask\\class.mask.cache.js": {
            "name": "src\\mask\\class.mask.cache.js",
            "modules": {},
            "classes": {
                "CGSGMaskCache": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\mask\\class.mask.clip.js": {
            "name": "src\\mask\\class.mask.clip.js",
            "modules": {},
            "classes": {
                "CGSGMaskClip": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\mask\\class.mask.js": {
            "name": "src\\mask\\class.mask.js",
            "modules": {},
            "classes": {
                "CGSGMask": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.accordion.js": {
            "name": "src\\node\\class.node.accordion.js",
            "modules": {},
            "classes": {
                "CGSGAccordion": 1,
                "CGSGSection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.animatedSprite.js": {
            "name": "src\\node\\class.node.animatedSprite.js",
            "modules": {},
            "classes": {
                "CGSGNodeSprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.button.js": {
            "name": "src\\node\\class.node.button.js",
            "modules": {},
            "classes": {
                "CGSGButtonMode": 1,
                "CGSGNodeButton": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.circle.js": {
            "name": "src\\node\\class.node.circle.js",
            "modules": {},
            "classes": {
                "CGSGNodeCircle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.colorPicker.js": {
            "name": "src\\node\\class.node.colorPicker.js",
            "modules": {},
            "classes": {
                "CGSGNodeColorPicker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.curveTCB.js": {
            "name": "src\\node\\class.node.curveTCB.js",
            "modules": {},
            "classes": {
                "CGSGNodeCurveTCB": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.dom.js": {
            "name": "src\\node\\class.node.dom.js",
            "modules": {},
            "classes": {
                "CGSGNodeDomElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.ellipse.js": {
            "name": "src\\node\\class.node.ellipse.js",
            "modules": {},
            "classes": {
                "CGSGNodeEllipse": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.image.js": {
            "name": "src\\node\\class.node.image.js",
            "modules": {},
            "classes": {
                "CGSGNodeImage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.js": {
            "name": "src\\node\\class.node.js",
            "modules": {
                "Node": 1
            },
            "classes": {
                "CGSGNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.line.js": {
            "name": "src\\node\\class.node.line.js",
            "modules": {},
            "classes": {
                "CGSGNodeLine": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.logger.js": {
            "name": "src\\node\\class.node.logger.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.slider.js": {
            "name": "src\\node\\class.node.slider.js",
            "modules": {},
            "classes": {
                "CGSGNodeSliderHandle": 1,
                "CGSGNodeSlider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.square.js": {
            "name": "src\\node\\class.node.square.js",
            "modules": {},
            "classes": {
                "CGSGNodeSquare": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.tabMenu.js": {
            "name": "src\\node\\class.node.tabMenu.js",
            "modules": {},
            "classes": {
                "CGSGNodeTabMenu": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.text.js": {
            "name": "src\\node\\class.node.text.js",
            "modules": {},
            "classes": {
                "CGSGWrapMode": 1,
                "CGSGNodeText": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.webview.js": {
            "name": "src\\node\\class.node.webview.js",
            "modules": {},
            "classes": {
                "CGSGWEBVIEWMODE": 1,
                "CGSGNodeWebview": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.particles.js": {
            "name": "src\\node\\class.particles.js",
            "modules": {
                "ParticleSystem": 1
            },
            "classes": {
                "CGSGParticle": 1,
                "CGSGParticleEmitter": 1,
                "CGSGParticleSystem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\theme\\class.CSSManager.js": {
            "name": "src\\theme\\class.CSSManager.js",
            "modules": {},
            "classes": {
                "CGSGCSSManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\math\\class.vector2D.js": {
            "name": "src\\utils\\math\\class.vector2D.js",
            "modules": {},
            "classes": {
                "CGSGVector2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\math\\math.js": {
            "name": "src\\utils\\math\\math.js",
            "modules": {
                "Math": 1
            },
            "classes": {
                "CGSGMath": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\class.handlebox.js": {
            "name": "src\\utils\\class.handlebox.js",
            "modules": {},
            "classes": {
                "CGSGHandleBox": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\class.imgManager.js": {
            "name": "src\\utils\\class.imgManager.js",
            "modules": {},
            "classes": {
                "CGSGImgManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\class.map.js": {
            "name": "src\\utils\\class.map.js",
            "modules": {},
            "classes": {
                "CGSGMap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\class.region.js": {
            "name": "src\\utils\\class.region.js",
            "modules": {},
            "classes": {
                "CGSGPosition": 1,
                "CGSGScale": 1,
                "CGSGRotation": 1,
                "CGSGDimension": 1,
                "CGSGRegion": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\class.traverser.js": {
            "name": "src\\utils\\class.traverser.js",
            "modules": {},
            "classes": {
                "CGSGTraverser": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\util.array.js": {
            "name": "src\\utils\\util.array.js",
            "modules": {},
            "classes": {
                "UTIL_ARRAY": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\util.color.js": {
            "name": "src\\utils\\util.color.js",
            "modules": {},
            "classes": {
                "CGSGColor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\util.global.js": {
            "name": "src\\utils\\util.global.js",
            "modules": {},
            "classes": {
                "GLOBAL_METHODS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\util.string.js": {
            "name": "src\\utils\\util.string.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\class.scenegraph.js": {
            "name": "src\\class.scenegraph.js",
            "modules": {},
            "classes": {
                "CGSGSceneGraph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\class.view.js": {
            "name": "src\\class.view.js",
            "modules": {
                "Scene": 1
            },
            "classes": {
                "CGSGView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\constants.js": {
            "name": "src\\constants.js",
            "modules": {
                "Util": 1
            },
            "classes": {
                "GLOBAL_CONSTANTS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\globals.js": {
            "name": "src\\globals.js",
            "modules": {},
            "classes": {
                "CGSGPickNodeMethod": 1,
                "GLOBAL_PROPERTIES": 1,
                "CGSG": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Animation": {
            "name": "Animation",
            "submodules": {
                "ParticleSystem": 1
            },
            "classes": {
                "CGSGTimeline": 1,
                "CGSGAnimationMethod": 1,
                "CGSGAnimationManager": 1,
                "CGSGKeyFrame": 1,
                "CGSGInterpolatorTCB": 1,
                "CGSGInterpolator": 1,
                "CGSGInterpolatorLinear": 1,
                "CGSGMaskCache": 1,
                "CGSGMaskClip": 1,
                "CGSGMask": 1,
                "CGSGParticle": 1,
                "CGSGParticleEmitter": 1,
                "CGSGParticleSystem": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\node\\class.particles.js",
            "line": 462,
            "description": "Linear intepolation",
            "extends": "{Object}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parentNode",
                    "description": "",
                    "type": "CGSGNode"
                },
                {
                    "name": "attribute",
                    "description": "string representing the attribute to be animated (eg: \"position.x\", \"rotation.angle\", ...)",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "A string representing the interpolation method = \"linear\"",
                    "type": "String"
                }
            ],
            "type": "{CGSGTimeline}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "Collision": {
            "name": "Collision",
            "submodules": {},
            "classes": {
                "CGSGCollisionManager": 1,
                "CGSGCollisionTesterFactory": 1,
                "CGSGCollisionGhostOnDemandTester": 1,
                "CGSGCollisionRegionTester": 1,
                "CGSGCollisionMethod": 1,
                "CGSGEvent": 1,
                "CGSGBindEntry": 1,
                "CGSGEventManager": 1,
                "WUICCGSGNodeImageFactory": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\ext\\WUICCGSGNodeImageFactory.js",
            "line": 1,
            "extends": "{Object}",
            "is_constructor": 1,
            "type": "{CGSGCollisionManager}",
            "author": "Vincent Vanghelle (vincent.vanghelle@capgemini.com)"
        },
        "Node": {
            "name": "Node",
            "submodules": {},
            "classes": {
                "CGSGAccordion": 1,
                "CGSGSection": 1,
                "CGSGNodeSprite": 1,
                "CGSGButtonMode": 1,
                "CGSGNodeButton": 1,
                "CGSGNodeCircle": 1,
                "CGSGNodeColorPicker": 1,
                "CGSGNodeCurveTCB": 1,
                "CGSGNodeDomElement": 1,
                "CGSGNodeEllipse": 1,
                "CGSGNodeImage": 1,
                "CGSGNode": 1,
                "CGSGNodeLine": 1,
                "CGSGNodeSliderHandle": 1,
                "CGSGNodeSlider": 1,
                "CGSGNodeSquare": 1,
                "CGSGNodeTabMenu": 1,
                "CGSGWrapMode": 1,
                "CGSGNodeText": 1,
                "CGSGWEBVIEWMODE": 1,
                "CGSGNodeWebview": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src\\node\\class.node.webview.js",
            "line": 49,
            "description": "Base class for a Node in the Scene Graph.\nEach node encapsulates its position, dimension, scale and rotation, ...",
            "extends": "CGSGObject",
            "itemtype": "main"
        },
        "ParticleSystem": {
            "name": "ParticleSystem",
            "submodules": {},
            "classes": {
                "CGSGParticle": 1,
                "CGSGParticleEmitter": 1,
                "CGSGParticleSystem": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Animation",
            "namespace": "",
            "file": "src\\node\\class.particles.js",
            "line": 462,
            "is_constructor": 1,
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "CGSGNode"
                }
            ],
            "type": "{CGSGParticle}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)",
            "description": "A particle emitter for the cgSceneGraph Particle System"
        },
        "Util": {
            "name": "Util",
            "submodules": {
                "undefined": 1
            },
            "classes": {
                "CGSGImgManager": 1,
                "GLOBAL_CONSTANTS": 1,
                "CGSGCSSManager": 1,
                "CGSGMap": 1,
                "CGSGPosition": 1,
                "CGSGScale": 1,
                "CGSGRotation": 1,
                "CGSGDimension": 1,
                "CGSGRegion": 1,
                "CGSGTraverser": 1,
                "UTIL_ARRAY": 1,
                "CGSGColor": 1,
                "GLOBAL_METHODS": 1,
                "CGSGPickNodeMethod": 1,
                "GLOBAL_PROPERTIES": 1,
                "CGSG": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\globals.js",
            "line": 77,
            "description": "Global constants used by the framework"
        },
        "Math": {
            "name": "Math",
            "submodules": {},
            "classes": {
                "CGSGVector2D": 1,
                "CGSGMath": 1,
                "CGSGHandleBox": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src\\utils\\class.handlebox.js",
            "line": 26,
            "description": "Static class that encapsulates some useful methods.",
            "extends": "{Object}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "type": "{CGSGVector2D}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)",
            "itemtype": "main"
        },
        "Scene": {
            "name": "Scene",
            "submodules": {},
            "classes": {
                "CGSGSceneGraph": 1,
                "CGSGView": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src\\class.view.js",
            "line": 65,
            "description": "Represent the scene of the application.\nIt encapsulates the scene graph itself and several methods to track mouse and touch events, ...",
            "is_constructor": 1,
            "itemtype": "main"
        }
    },
    "classes": {
        "CGSGTimeline": {
            "name": "CGSGTimeline",
            "shortname": "CGSGTimeline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 31
        },
        "CGSGAnimationMethod": {
            "name": "CGSGAnimationMethod",
            "shortname": "CGSGAnimationMethod",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "src\\animation\\class.animmanager.js",
            "line": 29,
            "description": "List the interpolation methods to compute the values between 2 animation keys",
            "type": "{Object}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGAnimationManager": {
            "name": "CGSGAnimationManager",
            "shortname": "CGSGAnimationManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "src\\animation\\class.animmanager.js",
            "line": 49
        },
        "CGSGKeyFrame": {
            "name": "CGSGKeyFrame",
            "shortname": "CGSGKeyFrame",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "src\\animation\\class.keyframe.js",
            "line": 28
        },
        "CGSGCollisionManager": {
            "name": "CGSGCollisionManager",
            "shortname": "CGSGCollisionManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Collision",
            "namespace": "",
            "file": "src\\collision\\class.collision.manager.js",
            "line": 27
        },
        "CGSGCollisionTesterFactory": {
            "name": "CGSGCollisionTesterFactory",
            "shortname": "CGSGCollisionTesterFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Collision",
            "namespace": "",
            "file": "src\\collision\\class.collision.tester.factory.js",
            "line": 26
        },
        "CGSGCollisionGhostOnDemandTester": {
            "name": "CGSGCollisionGhostOnDemandTester",
            "shortname": "CGSGCollisionGhostOnDemandTester",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Collision",
            "namespace": "",
            "file": "src\\collision\\class.collision.tester.ghost.ondemand.js",
            "line": 26
        },
        "CGSGCollisionRegionTester": {
            "name": "CGSGCollisionRegionTester",
            "shortname": "CGSGCollisionRegionTester",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Collision",
            "namespace": "",
            "file": "src\\collision\\class.collision.tester.region.js",
            "line": 26
        },
        "CGSGCollisionMethod": {
            "name": "CGSGCollisionMethod",
            "shortname": "CGSGCollisionMethod",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Collision",
            "namespace": "",
            "file": "src\\collision\\enum.collision.method.js",
            "line": 26,
            "description": "List the methods to check the collision on two nodes"
        },
        "CGSGEvent": {
            "name": "CGSGEvent",
            "shortname": "CGSGEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Collision",
            "namespace": "",
            "file": "src\\event\\class.event.js",
            "line": 26,
            "description": "This class represents an event fired by observable (through event manager) to observers (the handlers) functions.",
            "extends": "CGSGObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "trigger",
                    "description": "the object which has triggered the event (could be different from the observable object)",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "an object of any type",
                    "type": "Object"
                }
            ],
            "author": "Guillaume Drouet (guidrouet@gmail.com)",
            "type": "{CGSGEvent}"
        },
        "CGSGBindEntry": {
            "name": "CGSGBindEntry",
            "shortname": "CGSGBindEntry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Collision",
            "namespace": "",
            "file": "src\\event\\class.eventmanager.js",
            "line": 26,
            "description": "Represents an entry of the internal table of the {CGSGEventManager} which keeps in memory all bound events.",
            "extends": "CGSGObject",
            "author": "Guillaume Drouet (guidrouet@gmail.com)",
            "type": "{CGSGBindEntry}",
            "params": [
                {
                    "name": "observable",
                    "description": "the observable object",
                    "type": "Object"
                },
                {
                    "name": "attributeName",
                    "description": "the observable attribute the handler is bound to",
                    "type": "String"
                },
                {
                    "name": "isAdditional",
                    "description": "flag which indicates if the handler is stored in the additional array",
                    "type": "Boolean"
                }
            ]
        },
        "CGSGEventManager": {
            "name": "CGSGEventManager",
            "shortname": "CGSGEventManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Collision",
            "namespace": "",
            "file": "src\\event\\class.eventmanager.js",
            "line": 48,
            "description": "This class manages the association of handler for a particular event which can occurs on a particular object.\nAfter an handler is bound to an event, it can be fire thanks to this manager too.",
            "extends": "CGSGObject",
            "author": "Guillaume Drouet (guidrouet@gmail.com)",
            "type": "{CGSGEventManager}"
        },
        "WUICCGSGNodeImageFactory": {
            "name": "WUICCGSGNodeImageFactory",
            "shortname": "WUICCGSGNodeImageFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Collision",
            "namespace": "",
            "file": "src\\ext\\WUICCGSGNodeImageFactory.js",
            "line": 1,
            "description": "this class represent an Image Factory for WUIC",
            "extends": "CGSGObject",
            "params": [
                {
                    "name": "groupId",
                    "description": "",
                    "type": "String"
                }
            ],
            "is_constructor": 1,
            "type": "{WUICCGSGNodeImageFactory}"
        },
        "CGSGInterpolatorTCB": {
            "name": "CGSGInterpolatorTCB",
            "shortname": "CGSGInterpolatorTCB",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "src\\interpolator\\class.interpolator.TCB.js",
            "line": 29,
            "extends": "{CGSGInterpolator}",
            "is_constructor": 1,
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGInterpolator": {
            "name": "CGSGInterpolator",
            "shortname": "CGSGInterpolator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "src\\interpolator\\class.interpolator.js",
            "line": 29,
            "extends": "{CGSGObject}",
            "is_constructor": 1,
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGInterpolatorLinear": {
            "name": "CGSGInterpolatorLinear",
            "shortname": "CGSGInterpolatorLinear",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "src\\interpolator\\class.interpolator.linear.js",
            "line": 29,
            "description": "Linear intepolation"
        },
        "CGSGMaskCache": {
            "name": "CGSGMaskCache",
            "shortname": "CGSGMaskCache",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "src\\mask\\class.mask.cache.js",
            "line": 26,
            "description": "ALFA VERSION : to be enhanced, essentially for performance reasons.\n\nThis mask could be applied to a node to cache in memory the rendering of a canvas and its nodes.",
            "extends": "CGSGMask",
            "is_constructor": 1,
            "author": "Guillaume Drouet (guidrouet@gmail.com)",
            "type": "{CGSGMaskCache}"
        },
        "CGSGMaskClip": {
            "name": "CGSGMaskClip",
            "shortname": "CGSGMaskClip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "src\\mask\\class.mask.clip.js",
            "line": 26,
            "description": "This class clips a region of a given node (including its children) according to a specified dimension. Internally,\na fake context is created and then desired data are retrieved from it and drawn to the original context.",
            "extends": "CGSGMask parent class here",
            "is_constructor": 1,
            "params": [
                {
                    "name": "clipRegion",
                    "description": "the region to clip",
                    "type": "CGSGRegion"
                }
            ],
            "author": "Guillaume Drouet (guidrouet@gmail.com)",
            "type": "{CGSGMaskClip}"
        },
        "CGSGMask": {
            "name": "CGSGMask",
            "shortname": "CGSGMask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "src\\mask\\class.mask.js",
            "line": 26,
            "description": "Utility class which represents a mask to apply on several nodes. The class should be sub-classed to define\nparticular rendering. This class actually does not any rendering. However, when its 'apply' method is called,\nit begins to observe the given node and calls rendering methods which should be overridden.\n\nTwo key methods are provided here :\n- prepare which is called before the node and its children is rendered\n- finalize which is called once the rendering of the node has been done",
            "extends": "CGSGObject",
            "is_constructor": 1,
            "author": "Guillaume Drouet (guidrouet@gmail.com)",
            "type": "{CGSGMask}"
        },
        "CGSGAccordion": {
            "name": "CGSGAccordion",
            "shortname": "CGSGAccordion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.accordion.js",
            "line": 1,
            "description": "This class represents an Accordion.",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on Y",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Relative dimension",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Relative Dimension",
                    "type": "Number"
                },
                {
                    "name": "sectionWidth",
                    "description": "Relative Dimension",
                    "type": "Number"
                },
                {
                    "name": "sectionHeight",
                    "description": "Relative Dimension",
                    "type": "Number"
                }
            ],
            "type": "{CGSGAccordion}",
            "author": "$Author$"
        },
        "CGSGSection": {
            "name": "CGSGSection",
            "shortname": "CGSGSection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.accordion.js",
            "line": 141,
            "description": "This class represents a Accordion.",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on Y",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Relative dimension",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Relative Dimension",
                    "type": "Number"
                }
            ],
            "author": "$Author$"
        },
        "CGSGNodeSprite": {
            "name": "CGSGNodeSprite",
            "shortname": "CGSGNodeSprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 26,
            "description": "A CGSGNodeSprite represent an animated sprite, with all animations in the image",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on Y",
                    "type": "Number"
                },
                {
                    "name": "urlImage",
                    "description": "URL of the image. Can be null to be set later",
                    "type": "String"
                }
            ],
            "type": "{CGSGNodeSprite}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGButtonMode": {
            "name": "CGSGButtonMode",
            "shortname": "CGSGButtonMode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.button.js",
            "line": 74,
            "description": "List the modes for a button : NORMAL, OVER, DEACTIVATED, SELECTED.",
            "type": "{Object}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)",
            "example": [
                "\n     myTextNode.setMode(CGSGButtonMode.DEACTIVATED);"
            ]
        },
        "CGSGNodeButton": {
            "name": "CGSGNodeButton",
            "shortname": "CGSGNodeButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.button.js",
            "line": 158,
            "description": "A CGSGNodeButton represent a basic square",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on Y",
                    "type": "Number"
                },
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "type": "{CGSGNodeButton}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGNodeCircle": {
            "name": "CGSGNodeCircle",
            "shortname": "CGSGNodeCircle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.circle.js",
            "line": 26,
            "description": "A CGSGNodeCircle represent a basic circle.\nBy default, the pickNodeMethod used to detect the node under the mice is CGSGPickNodeMethod.GHOST.\nIf you don't need precision on detection on your circles, just change the property to pickNodeMethod.REGION.",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "centerX",
                    "description": "Relative position",
                    "type": "Number"
                },
                {
                    "name": "centerY",
                    "description": "Relative position",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "Radius",
                    "type": "Number"
                }
            ],
            "type": "{CGSGNodeCircle}",
            "author": "xymostech (Emily Eisenberg)"
        },
        "CGSGNodeColorPicker": {
            "name": "CGSGNodeColorPicker",
            "shortname": "CGSGNodeColorPicker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.colorPicker.js",
            "line": 26,
            "description": "A color Picker",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "X Position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y Position",
                    "type": "Number"
                }
            ],
            "type": "{CGSGNodeColorPicker}"
        },
        "CGSGNodeCurveTCB": {
            "name": "CGSGNodeCurveTCB",
            "shortname": "CGSGNodeCurveTCB",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.curveTCB.js",
            "line": 26,
            "description": "A CGSGNodeSquare represent a basic square",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on Y",
                    "type": "Number"
                }
            ],
            "type": "{CGSGNodeCurveTCB}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGNodeDomElement": {
            "name": "CGSGNodeDomElement",
            "shortname": "CGSGNodeDomElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.dom.js",
            "line": 28,
            "description": "Wraps inside a CGSGNode a DOM element to display it in the scene. Note that the element will be on top of canvas\nelement so it will be over any node rendered in this element.",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on Y",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Relative dimension",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Relative Dimension",
                    "type": "Number"
                },
                {
                    "name": "el",
                    "description": "the DOM element do be wrapped",
                    "type": "HTMLElement"
                }
            ],
            "type": "{CGSGNodeWebview}"
        },
        "CGSGNodeEllipse": {
            "name": "CGSGNodeEllipse",
            "shortname": "CGSGNodeEllipse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.ellipse.js",
            "line": 26,
            "description": "A CGSGNodeEllipse represent a basic ellipse.\nBy default, the pickNodeMethod used to detect the node under the mice is CGSGPickNodeMethod.GHOST.\nIf you don't need precision on detection on your ellipses, just change the property to pickNodeMethod.REGION.",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on Y",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Relative dimension",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Relative Dimension",
                    "type": "Number"
                }
            ],
            "type": "{CGSGNodeEllipse}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGNodeImage": {
            "name": "CGSGNodeImage",
            "shortname": "CGSGNodeImage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.image.js",
            "line": 26,
            "description": "A CGSGNodeImage represent an image node",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on Y",
                    "type": "Number"
                },
                {
                    "name": "urlImage",
                    "description": "URL of the src image. Can be null tobe loaded later.",
                    "type": "String"
                }
            ],
            "type": "{CGSGNodeImage}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGNode": {
            "name": "CGSGNode",
            "shortname": "CGSGNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.js",
            "line": 26,
            "description": "Base class for a Node in the Scene Graph.\nEach node encapsulates its position, dimension, scale and rotation, ...",
            "extends": "CGSGObject",
            "mainName": "Node",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on Y",
                    "type": "Number"
                }
            ],
            "type": "{CGSGNode}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGNodeLine": {
            "name": "CGSGNodeLine",
            "shortname": "CGSGNodeLine",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.line.js",
            "line": 1,
            "description": "A CGSGNodeLine represent a basic line",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "points",
                    "description": "of line  as CGSGPosition",
                    "type": "Array"
                }
            ],
            "type": "{CGSGNodeLine}",
            "author": "Paul Todd"
        },
        "CGSGNodeSliderHandle": {
            "name": "CGSGNodeSliderHandle",
            "shortname": "CGSGNodeSliderHandle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.slider.js",
            "line": 1,
            "description": "A CGSGNodeSliderHandle represent a slider handle",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "handleWidth",
                    "description": "width of the handle",
                    "type": "Number"
                }
            ],
            "type": "{CGSGNodeSliderHandle}",
            "author": "Jeremie (jeremie.lussiez@capgemini.com)"
        },
        "CGSGNodeSlider": {
            "name": "CGSGNodeSlider",
            "shortname": "CGSGNodeSlider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.slider.js",
            "line": 110,
            "description": "A CGSGNodeSlider represent a slider",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on Y",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Relative dimension",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Relative Dimension",
                    "type": "Number"
                }
            ],
            "type": "{CGSGNodeSlider}",
            "author": "Jeremie (jeremie.lussiez@capgemini.com)"
        },
        "CGSGNodeSquare": {
            "name": "CGSGNodeSquare",
            "shortname": "CGSGNodeSquare",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.square.js",
            "line": 26,
            "description": "A CGSGNodeSquare represent a basic square",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on Y",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Relative dimension",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Relative Dimension",
                    "type": "Number"
                }
            ],
            "type": "{CGSGNodeSquare}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGNodeTabMenu": {
            "name": "CGSGNodeTabMenu",
            "shortname": "CGSGNodeTabMenu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.tabMenu.js",
            "line": 28,
            "description": "A tab menu",
            "extends": "CGSGNode",
            "params": [
                {
                    "name": "x",
                    "description": "X position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "Width of the tab menu",
                    "type": "Number"
                }
            ],
            "is_constructor": 1,
            "type": "{CGSGNodeTabMenu}"
        },
        "CGSGWrapMode": {
            "name": "CGSGWrapMode",
            "shortname": "CGSGWrapMode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.text.js",
            "line": 26,
            "description": "List the methods to wrap the text. Used by {CGSGNodeText} Node.",
            "type": "{Object}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)",
            "example": [
                "\n     myTextNode.setWrapMode(CGSGWrapMode.WORD, true);"
            ]
        },
        "CGSGNodeText": {
            "name": "CGSGNodeText",
            "shortname": "CGSGNodeText",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.text.js",
            "line": 49,
            "description": "A CGSGNodeText represent a basic circle",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on Y",
                    "type": "Number"
                },
                {
                    "name": "text",
                    "description": "Text to display",
                    "type": "String"
                }
            ],
            "type": "{CGSGNodeText}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGWEBVIEWMODE": {
            "name": "CGSGWEBVIEWMODE",
            "shortname": "CGSGWEBVIEWMODE",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.webview.js",
            "line": 26,
            "description": "The different rendering mode",
            "type": "{Object}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGNodeWebview": {
            "name": "CGSGNodeWebview",
            "shortname": "CGSGNodeWebview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.webview.js",
            "line": 49,
            "extends": "CGSGNodeDomElement",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on Y",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Relative dimension",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Relative Dimension",
                    "type": "Number"
                },
                {
                    "name": "url",
                    "description": "URL of the webpage",
                    "type": "String"
                }
            ],
            "type": "{CGSGNodeWebview}"
        },
        "CGSGParticle": {
            "name": "CGSGParticle",
            "shortname": "CGSGParticle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "submodule": "ParticleSystem",
            "namespace": "",
            "file": "src\\node\\class.particles.js",
            "line": 30
        },
        "CGSGParticleEmitter": {
            "name": "CGSGParticleEmitter",
            "shortname": "CGSGParticleEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "submodule": "ParticleSystem",
            "namespace": "",
            "file": "src\\node\\class.particles.js",
            "line": 156,
            "description": "A particle emitter for the cgSceneGraph Particle System",
            "extends": "{CGSGNode}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "nodeConstructor",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "region",
                    "description": "",
                    "type": "CGSGRegion"
                },
                {
                    "name": "nbParticlesMax",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "velocity",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "speed",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "speedThreshold",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "outflow",
                    "description": "",
                    "type": "Number"
                }
            ],
            "type": "{CGSGParticleEmitter}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGParticleSystem": {
            "name": "CGSGParticleSystem",
            "shortname": "CGSGParticleSystem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "submodule": "ParticleSystem",
            "namespace": "",
            "file": "src\\node\\class.particles.js",
            "line": 462,
            "description": "A particle System object.",
            "extends": "{CGSGNode}",
            "type": "{CGSGParticleSystem}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGCSSManager": {
            "name": "CGSGCSSManager",
            "shortname": "CGSGCSSManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\theme\\class.CSSManager.js",
            "line": 29,
            "description": "A CGSGCSSManager represent a basic circle",
            "extends": "CGSGObject",
            "is_constructor": 1,
            "type": "{CGSGCSSManager}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGVector2D": {
            "name": "CGSGVector2D",
            "shortname": "CGSGVector2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": "",
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 26,
            "description": "A 2D vector object"
        },
        "CGSGMath": {
            "name": "CGSGMath",
            "shortname": "CGSGMath",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": "",
            "file": "src\\utils\\math\\math.js",
            "line": 29,
            "description": "Static class that encapsulates some useful methods.",
            "mainName": "Math",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "static": 1
        },
        "CGSGHandleBox": {
            "name": "CGSGHandleBox",
            "shortname": "CGSGHandleBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": "",
            "file": "src\\utils\\class.handlebox.js",
            "line": 26,
            "description": "A Tiny box on selected square borders",
            "extends": "{Object}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parentNode",
                    "description": "",
                    "type": "CGSGNode"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "fillColor",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "strokeColor",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "lineWidth",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "type": "{CGSGHandleBox}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGImgManager": {
            "name": "CGSGImgManager",
            "shortname": "CGSGImgManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\utils\\class.imgManager.js",
            "line": 29,
            "description": "An Image manager.\nThe target is to load only once an image which is used for several nodes",
            "is_constructor": 1,
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGMap": {
            "name": "CGSGMap",
            "shortname": "CGSGMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\utils\\class.map.js",
            "line": 26,
            "description": "A Hashmap class.",
            "is_constructor": 1,
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGPosition": {
            "name": "CGSGPosition",
            "shortname": "CGSGPosition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\utils\\class.region.js",
            "line": 26,
            "description": "A Position object",
            "extends": "CGSGVector2D",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "X value",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y value",
                    "type": "Number"
                }
            ],
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)",
            "type": "{CGSGPosition}"
        },
        "CGSGScale": {
            "name": "CGSGScale",
            "shortname": "CGSGScale",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\utils\\class.region.js",
            "line": 110,
            "description": "A Scale object",
            "extends": "CGSGPosition",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "X value",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y value",
                    "type": "Number"
                }
            ],
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)",
            "type": "{CGSGScale}"
        },
        "CGSGRotation": {
            "name": "CGSGRotation",
            "shortname": "CGSGRotation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\utils\\class.region.js",
            "line": 128,
            "description": "A Rotation object",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "Angle value",
                    "type": "Number"
                }
            ],
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)",
            "type": "{CGSGRotation}"
        },
        "CGSGDimension": {
            "name": "CGSGDimension",
            "shortname": "CGSGDimension",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\utils\\class.region.js",
            "line": 215,
            "description": "A Dimension object",
            "extends": "CGSGVector2D",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)",
            "type": "{CGSGDimension}"
        },
        "CGSGRegion": {
            "name": "CGSGRegion",
            "shortname": "CGSGRegion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\utils\\class.region.js",
            "line": 310,
            "description": "A Region object encapsulates a CGSGPosition and a CGSGDimension",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Position on Y",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Dimension on Width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Dimension on Height",
                    "type": "Number"
                }
            ],
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)",
            "type": "{CGSGRegion}"
        },
        "CGSGTraverser": {
            "name": "CGSGTraverser",
            "shortname": "CGSGTraverser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\utils\\class.traverser.js",
            "line": 26,
            "description": "A Traverser is an utility class that traverse the scene graph and return a list of node, depending on conditions you fixed",
            "extends": "Object",
            "is_constructor": 1,
            "type": "{CGSGTraverser}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "UTIL_ARRAY": {
            "name": "UTIL_ARRAY",
            "shortname": "UTIL_ARRAY",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\utils\\util.array.js",
            "line": 28,
            "description": "Utils methods extending the Array prototype",
            "static": 1,
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGColor": {
            "name": "CGSGColor",
            "shortname": "CGSGColor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\utils\\util.color.js",
            "line": 26,
            "description": "Some utils methods extending the Array prototype",
            "static": 1,
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "GLOBAL_METHODS": {
            "name": "GLOBAL_METHODS",
            "shortname": "GLOBAL_METHODS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\utils\\util.global.js",
            "line": 26,
            "description": "Global methods",
            "static": 1,
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGSceneGraph": {
            "name": "CGSGSceneGraph",
            "shortname": "CGSGSceneGraph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Scene",
            "namespace": "",
            "file": "src\\class.scenegraph.js",
            "line": 26,
            "description": "Represent the scene graph it self.",
            "is_constructor": 1,
            "extends": "{Object}",
            "params": [
                {
                    "name": "canvas",
                    "description": "a handler to the canvas HTML element",
                    "type": "HTMLElement"
                },
                {
                    "name": "context",
                    "description": "context to render on",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "type": "{CGSGSceneGraph}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGView": {
            "name": "CGSGView",
            "shortname": "CGSGView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Scene",
            "namespace": "",
            "file": "src\\class.view.js",
            "line": 65,
            "description": "Represent the scene of the application.\nIt encapsulates the scene graph itself and several methods to track mouse and touch events, ...",
            "is_constructor": 1,
            "mainName": "Scene",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "extends": "{Object}",
            "params": [
                {
                    "name": "canvas",
                    "description": "a handler to the canvas HTML element",
                    "type": "HTMLElement"
                }
            ],
            "type": "{CGSGView}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "GLOBAL_CONSTANTS": {
            "name": "GLOBAL_CONSTANTS",
            "shortname": "GLOBAL_CONSTANTS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\constants.js",
            "line": 26,
            "description": "Global constants used by the framework",
            "static": 1,
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSGPickNodeMethod": {
            "name": "CGSGPickNodeMethod",
            "shortname": "CGSGPickNodeMethod",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\globals.js",
            "line": 26,
            "description": "List the methods to check the pick on a node",
            "type": "{Object}",
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "GLOBAL_PROPERTIES": {
            "name": "GLOBAL_PROPERTIES",
            "shortname": "GLOBAL_PROPERTIES",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\globals.js",
            "line": 43,
            "description": "Global properties of the framework",
            "static": 1,
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        },
        "CGSG": {
            "name": "CGSG",
            "shortname": "CGSG",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\globals.js",
            "line": 77,
            "description": "Global properties for the current scene",
            "static": 1,
            "author": "Gwennael Buchet (gwennael.buchet@gmail.com)"
        }
    },
    "classitems": [
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 46,
            "description": "The animated nodes",
            "itemtype": "property",
            "name": "parentNode",
            "type": "{CGSGNode}",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 53,
            "description": "A string representing the attribute to be animated (eg: \"position.x\", \"rotation.angle\", \"color.g\", ...)\nThe attribute must be a numeric property",
            "itemtype": "property",
            "name": "attribute",
            "type": "{String}",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 61,
            "itemtype": "property",
            "name": "_method",
            "type": "{CGSGInterpolator}",
            "default": "{CGSGInterpolatorLinear} CGSGAnimationMethod.LINEAR",
            "access": "private",
            "tagname": "",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 69,
            "description": "list of the [frame, value] pairs for the animation\nthe index of the list begins at 0, not at the first key frame",
            "itemtype": "property",
            "name": "listValues",
            "type": "{Array}",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 86,
            "description": "Callback on animation start event",
            "itemtype": "property",
            "name": "onAnimationStart",
            "type": "{Function}",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 92,
            "description": "Callback on animation end event",
            "itemtype": "property",
            "name": "onAnimationEnd",
            "type": "{Function}",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 98,
            "description": "Callback on animation event",
            "itemtype": "property",
            "name": "onAnimate",
            "type": "{Function}",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 106,
            "description": "Add a new animation key frame to the timeline and sort the timeline by frame number",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addKey",
            "params": [
                {
                    "name": "frame.",
                    "description": "Must be an integer value.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 123,
            "description": "Remove the key at the specified frame",
            "itemtype": "method",
            "name": "removeKey",
            "params": [
                {
                    "name": "frame",
                    "description": "Must be an integer value.",
                    "type": "Number"
                }
            ],
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 138,
            "itemtype": "method",
            "name": "removeKeysBetween",
            "params": [
                {
                    "name": "frame1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "frame2",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 181,
            "description": "Remove all keys and values",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeAll",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 193,
            "description": "Compute the number of steps between all keys, 2 by 2",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_computeNumberOfFrameBetweenKeys",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 207,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getNbKeys",
            "return": {
                "description": "the number of keys in this timeline. Must be an integer value.",
                "type": "Number"
            },
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 216,
            "description": "Sort the list of keys by frame number",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "sortByFrame",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 227,
            "description": "Compute all the values (steps) for the animation of this timeline",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "compute",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 243,
            "itemtype": "method",
            "name": "getFirstKey",
            "return": {
                "description": "the first key frame of this timeline",
                "type": "CGSGKeyFrame"
            },
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 255,
            "itemtype": "method",
            "name": "getLastKey",
            "return": {
                "description": "the last key frame of this timeline",
                "type": "CGSGKeyFrame"
            },
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 267,
            "description": "Get the value for the frame number passed in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "frame",
                    "description": "the frame bound with the returned value. Must be an integer value.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Object with 2 properties : frame and value, or undefined\nIf no key is defined, return undefined\nIf there is only one key, returns it's value\nIf the frame is before the first key, returns the first key value\nIf the frame is after the last key, returns the last key value",
                "type": "*"
            },
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 309,
            "description": "Return the precomputed array of values for this timeline",
            "itemtype": "method",
            "name": "exportValues",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 326,
            "description": "Import new precomputed values for this timeline.\nThe number of values must match the number of frame defined by the keys of this timeline",
            "itemtype": "method",
            "name": "importValues",
            "params": [
                {
                    "name": "newValues",
                    "description": "of new values",
                    "type": "Array"
                },
                {
                    "name": "startFrame",
                    "description": "Must be an integer value.",
                    "type": "Number"
                }
            ],
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.animmanager.js",
            "line": 36,
            "itemtype": "property",
            "name": "LINEAR",
            "type": "{CGSGInterpolatorLinear}",
            "class": "CGSGAnimationMethod",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.animmanager.js",
            "line": 42,
            "itemtype": "property",
            "name": "NURBS",
            "type": "{CGSGInterpolatorTCB}",
            "class": "CGSGAnimationMethod",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.animmanager.js",
            "line": 59,
            "description": "List of the timelines for the animations.\nA timeline consists of a list of animation keys for 1 attribute of 1 node",
            "itemtype": "property",
            "name": "listTimelines",
            "type": "{Array}",
            "class": "CGSGAnimationManager",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.animmanager.js",
            "line": 68,
            "description": "Add a key",
            "itemtype": "method",
            "name": "addAnimationKey",
            "params": [
                {
                    "name": "timeline",
                    "description": "handler to the timeline to animate",
                    "type": "CGSGTimeline"
                },
                {
                    "name": "frame",
                    "description": "the date for the key",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "value for the attribute at the frame",
                    "type": "Number"
                }
            ],
            "example": [
                " this.sceneGraph.addAnimation(imgNode, \"position.x\", 2000, 200, \"linear\", true);"
            ],
            "class": "CGSGAnimationManager",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.animmanager.js",
            "line": 82,
            "itemtype": "method",
            "name": "removeAnimationKey",
            "params": [
                {
                    "name": "timeline",
                    "description": "",
                    "type": "CGSGTimeline"
                },
                {
                    "name": "frame",
                    "description": "the date for the key",
                    "type": "Number"
                }
            ],
            "class": "CGSGAnimationManager",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.animmanager.js",
            "line": 92,
            "description": "Animate an attribute of a nodes",
            "itemtype": "method",
            "name": "animate",
            "params": [
                {
                    "name": "node",
                    "description": "Handler to the nodes to animate",
                    "type": "CGSGNode"
                },
                {
                    "name": "attribute",
                    "description": "String representing the attribute to animate (\"position.y\", \"rotation.angle\", \"fill\", ...)",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "Duration of the animation, in frame",
                    "type": "Number"
                },
                {
                    "name": "from",
                    "description": "Start value",
                    "type": "Number"
                },
                {
                    "name": "to",
                    "description": "End value",
                    "type": "Number"
                },
                {
                    "name": "delay",
                    "description": "Delay before start the animation, in frames",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the timeline on which tha the animation was added",
                "type": "CGSGTimeline"
            },
            "example": [
                " CGSG.animationManager.animate(imgNode, \"position.x\", 700, 0, 200, 0, true);"
            ],
            "class": "CGSGAnimationManager",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.animmanager.js",
            "line": 119,
            "itemtype": "method",
            "name": "stillHaveAnimation",
            "return": {
                "description": "true if there is still animation key after the current frame",
                "type": "Boolean"
            },
            "class": "CGSGAnimationManager",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.animmanager.js",
            "line": 139,
            "description": "Return the timeline corresponding with the nodes and attribute. Create it if does not exists yet",
            "itemtype": "method",
            "name": "getTimeline",
            "params": [
                {
                    "name": "node",
                    "description": "Handle to the nodes",
                    "type": "CGSGNode"
                },
                {
                    "name": "attribute",
                    "description": "String. the attribute name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "CGSGTimeline"
            },
            "class": "CGSGAnimationManager",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.animmanager.js",
            "line": 157,
            "description": "Create a new timeline",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "createTimeline",
            "params": [
                {
                    "name": "node",
                    "description": "Handle to the nodes",
                    "type": "CGSGNode"
                },
                {
                    "name": "attribute",
                    "description": "the attribute name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "CGSGTimeline"
            },
            "class": "CGSGAnimationManager",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.keyframe.js",
            "line": 41,
            "itemtype": "property",
            "name": "frame",
            "type": "{Number}",
            "class": "CGSGKeyFrame",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.keyframe.js",
            "line": 46,
            "itemtype": "property",
            "name": "value",
            "type": "{*}",
            "example": [
                " {x:10, y:30}; {x:10}"
            ],
            "class": "CGSGKeyFrame",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.keyframe.js",
            "line": 53,
            "description": "Incoming tangent for this key",
            "itemtype": "property",
            "name": "inTangent",
            "default": "(0, 0)",
            "type": "{CGSGVector2D}",
            "class": "CGSGKeyFrame",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.keyframe.js",
            "line": 61,
            "description": "Outgoing tangent for this key",
            "itemtype": "property",
            "name": "outTangent",
            "default": "(0, 0)",
            "type": "{CGSGVector2D}",
            "class": "CGSGKeyFrame",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.keyframe.js",
            "line": 69,
            "description": "can be fulfilled by the developer to put in whatever he needs",
            "itemtype": "property",
            "name": "userData",
            "default": "null",
            "type": "{*}",
            "class": "CGSGKeyFrame",
            "module": "Animation"
        },
        {
            "file": "src\\collision\\class.collision.manager.js",
            "line": 41,
            "description": "Indicate if two nodes are colliding",
            "itemtype": "method",
            "name": "isColliding",
            "params": [
                {
                    "name": "currentNode",
                    "description": ""
                },
                {
                    "name": "testedNode",
                    "description": ""
                },
                {
                    "name": "threshold",
                    "description": ""
                }
            ],
            "return": {
                "description": "true if nodes are colliding",
                "type": "Boolean"
            },
            "class": "CGSGCollisionManager",
            "module": "Collision"
        },
        {
            "file": "src\\collision\\class.collision.manager.js",
            "line": 58,
            "description": "Defines a node as managed by the collision manager",
            "itemtype": "method",
            "name": "manageNode",
            "params": [
                {
                    "name": "node",
                    "description": ""
                }
            ],
            "class": "CGSGCollisionManager",
            "module": "Collision"
        },
        {
            "file": "src\\collision\\class.collision.manager.js",
            "line": 67,
            "description": "Defines a node as not managed by the collision manager",
            "itemtype": "method",
            "name": "unManageNode",
            "params": [
                {
                    "name": "node",
                    "description": ""
                }
            ],
            "class": "CGSGCollisionManager",
            "module": "Collision"
        },
        {
            "file": "src\\collision\\class.collision.tester.factory.js",
            "line": 47,
            "description": "Return a collision tester depending on the collision method",
            "itemtype": "method",
            "name": "getCollisionTester",
            "params": [
                {
                    "name": "collisionMethod",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "CGSGCollisionTesterFactory",
            "module": "Collision"
        },
        {
            "file": "src\\collision\\class.collision.tester.ghost.ondemand.js",
            "line": 40,
            "description": "Indicate if two nodes are colliding",
            "itemtype": "method",
            "name": "isColliding",
            "params": [
                {
                    "name": "cn",
                    "description": "currentNode",
                    "type": "CGSGNode"
                },
                {
                    "name": "tn",
                    "description": "testedNode",
                    "type": "CGSGNode"
                },
                {
                    "name": "t",
                    "description": "threshold",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if nodes are colliding",
                "type": "Boolean"
            },
            "class": "CGSGCollisionGhostOnDemandTester",
            "module": "Collision"
        },
        {
            "file": "src\\collision\\class.collision.tester.region.js",
            "line": 40,
            "description": "Indicate if two nodes are colliding",
            "itemtype": "method",
            "name": "isColliding",
            "params": [
                {
                    "name": "currentNode",
                    "description": ""
                },
                {
                    "name": "testedNode",
                    "description": ""
                },
                {
                    "name": "threshold",
                    "description": ""
                }
            ],
            "return": {
                "description": "true if nodes are colliding",
                "type": "Boolean"
            },
            "class": "CGSGCollisionRegionTester",
            "module": "Collision"
        },
        {
            "file": "src\\collision\\enum.collision.method.js",
            "line": 36,
            "itemtype": "property",
            "name": "GHOSTONDEMAND",
            "class": "CGSGCollisionMethod",
            "module": "Collision"
        },
        {
            "file": "src\\collision\\enum.collision.method.js",
            "line": 41,
            "itemtype": "property",
            "name": "REGION",
            "class": "CGSGCollisionMethod",
            "module": "Collision"
        },
        {
            "file": "src\\effects\\class.effect.grayscale.js",
            "line": 41,
            "description": "This function must be filled by the inherited classes.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "context",
                    "description": "context containing the image",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "width",
                    "description": "width for the image to be modified",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "height for the image to be modified",
                    "type": "Number"
                }
            ],
            "class": "CGSGEvent",
            "module": "Collision"
        },
        {
            "file": "src\\effects\\class.effect.invertcolors.js",
            "line": 41,
            "description": "This function must be filled by the inherited classes.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "context",
                    "description": "context containing the image",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "width",
                    "description": "width for the image to be modified",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "height for the image to be modified",
                    "type": "Number"
                }
            ],
            "class": "CGSGEvent",
            "module": "Collision"
        },
        {
            "file": "src\\effects\\class.effect.js",
            "line": 40,
            "description": "This function must be filled by the inherited classes.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "context",
                    "description": "context containing the image",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "width",
                    "description": "width for the image to be modified",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "height for the image to be modified",
                    "type": "Number"
                }
            ],
            "class": "CGSGEvent",
            "module": "Collision"
        },
        {
            "file": "src\\event\\class.event.js",
            "line": 43,
            "description": "Object which has created this event",
            "itemtype": "property",
            "name": "trigger",
            "type": "{Object} the trigger",
            "class": "CGSGEvent",
            "module": "Collision"
        },
        {
            "file": "src\\event\\class.event.js",
            "line": 50,
            "description": "Data wrapped in this event",
            "itemtype": "property",
            "name": "data",
            "type": "{Object} the wrapped data",
            "class": "CGSGEvent",
            "module": "Collision"
        },
        {
            "file": "src\\event\\class.event.js",
            "line": 57,
            "description": "Fields that should be filled by object which triggers this event",
            "itemtype": "property",
            "name": "observable",
            "default": "null",
            "type": "{Object} the observable object",
            "class": "CGSGEvent",
            "module": "Collision"
        },
        {
            "file": "src\\event\\class.event.js",
            "line": 65,
            "description": "Fields that should be filled by object which triggers this event",
            "itemtype": "property",
            "name": "type",
            "default": "null",
            "type": "{String} the type of event",
            "class": "CGSGEvent",
            "module": "Collision"
        },
        {
            "file": "src\\event\\class.event.js",
            "line": 73,
            "description": "Flags which indicates if events which are going to be dispatched should be ignored",
            "itemtype": "property",
            "name": "propagate",
            "default": "true",
            "type": "{boolean} true if next events should be dispatched, false otherwise",
            "class": "CGSGEvent",
            "module": "Collision"
        },
        {
            "file": "src\\event\\class.eventmanager.js",
            "line": 65,
            "description": "Replaces the handler associated to the given key by the new specified handler.",
            "itemtype": "method",
            "name": "replaceHandler",
            "params": [
                {
                    "name": "key",
                    "description": "the key",
                    "type": "CGSGBindEntry"
                },
                {
                    "name": "handler",
                    "description": "the new handler",
                    "type": "Function"
                }
            ],
            "class": "CGSGEventManager",
            "module": "Collision"
        },
        {
            "file": "src\\event\\class.eventmanager.js",
            "line": 92,
            "description": "Binds an handler function for an event which can occurs on a given observable object.",
            "itemtype": "method",
            "name": "bindHandler",
            "params": [
                {
                    "name": "observable",
                    "description": "the observable object",
                    "type": "Object"
                },
                {
                    "name": "eventName",
                    "description": "The event's name",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "the handler",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the ID of the binding",
                "type": "CGSGBindEntry"
            },
            "class": "CGSGEventManager",
            "module": "Collision"
        },
        {
            "file": "src\\event\\class.eventmanager.js",
            "line": 128,
            "description": "Notifies an event to all handlers bound to the given event on the given observable object. For performance\nreasons, this method must not be called if no handler is bound to the observable. Consequently, for instance,\nif you have an event 'onClick' that you want to dispatch, wrap the call in an if statement like this\n(otherwise the execution will fail) :\nif (this.onClick) {\n    CGSG.eventManager.dispatch(...);\n}",
            "itemtype": "method",
            "name": "dispatch",
            "params": [
                {
                    "name": "observable",
                    "description": "the observable object",
                    "type": "Object"
                },
                {
                    "name": "eventName",
                    "description": "The event's name",
                    "type": "String"
                },
                {
                    "name": "event",
                    "description": "the event to notify",
                    "type": "CGSGEvent"
                }
            ],
            "class": "CGSGEventManager",
            "module": "Collision"
        },
        {
            "file": "src\\event\\class.eventmanager.js",
            "line": 170,
            "description": "Unbind an handler registered for an event on an object.",
            "itemtype": "method",
            "name": "unbindHandler",
            "params": [
                {
                    "name": "observable",
                    "description": "the observable object",
                    "type": "Object"
                },
                {
                    "name": "eventName",
                    "description": "The event's name",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "the handler",
                    "type": "Function"
                }
            ],
            "class": "CGSGEventManager",
            "module": "Collision"
        },
        {
            "file": "src\\event\\class.eventmanager.js",
            "line": 207,
            "description": "Unbinds all handlers registered for an event on a given object.",
            "itemtype": "method",
            "name": "unbindAll",
            "params": [
                {
                    "name": "observable",
                    "description": "the observable object",
                    "type": "Object"
                },
                {
                    "name": "eventName",
                    "description": "The event's name",
                    "type": "String"
                }
            ],
            "class": "CGSGEventManager",
            "module": "Collision"
        },
        {
            "file": "src\\event\\class.eventmanager.js",
            "line": 230,
            "description": "Returns the name of a property to create on an object to store additional handlers.",
            "itemtype": "method",
            "name": "_getHandlerPropertyName",
            "params": [
                {
                    "name": "eventName",
                    "description": "String the event name"
                }
            ],
            "return": {
                "description": "the attribute name",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "CGSGEventManager",
            "module": "Collision"
        },
        {
            "file": "src\\ext\\WUICCGSGNodeImageFactory.js",
            "line": 22,
            "description": "Create a new image from the sprite",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "name",
                    "description": "represent the name of the new image"
                },
                {
                    "name": "data",
                    "description": "contain the attribute of this image"
                }
            ],
            "return": {
                "description": "",
                "type": "CGSGNodeImage"
            },
            "class": "WUICCGSGNodeImageFactory",
            "module": "Collision"
        },
        {
            "file": "src\\ext\\WUICCGSGNodeImageFactory.js",
            "line": 40,
            "description": "Build the CGSGNodeImage with his position",
            "itemtype": "method",
            "name": "buildNode",
            "params": [
                {
                    "name": "data",
                    "description": "contain the attribute of the node"
                },
                {
                    "name": "url",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "CGSGNodeImage"
            },
            "class": "WUICCGSGNodeImageFactory",
            "module": "Collision"
        },
        {
            "file": "src\\ext\\WUICCGSGNodeImageFactory.js",
            "line": 51,
            "description": "return a map of all the image associated with her sprite's url.",
            "itemtype": "method",
            "name": "getImgMap",
            "return": {
                "description": "",
                "type": "CGSGMap"
            },
            "class": "WUICCGSGNodeImageFactory",
            "module": "Collision"
        },
        {
            "file": "src\\interpolator\\class.interpolator.TCB.js",
            "line": 41,
            "itemtype": "method",
            "name": "compute",
            "params": [
                {
                    "name": "keys",
                    "description": "Array of all the animation keys",
                    "type": "Array"
                },
                {
                    "name": "steps",
                    "description": "Array of steps between 2 keys. steps.length = keys.length - 1.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Array of {x, y} object corresponding to all the points in the curve",
                "type": "Array"
            },
            "class": "CGSGInterpolatorTCB",
            "module": ""
        },
        {
            "file": "src\\interpolator\\class.interpolator.TCB.js",
            "line": 106,
            "itemtype": "method",
            "name": "_interpolate",
            "params": [
                {
                    "name": "p1",
                    "description": ""
                },
                {
                    "name": "p2",
                    "description": ""
                },
                {
                    "name": "p3",
                    "description": ""
                },
                {
                    "name": "p4",
                    "description": ""
                },
                {
                    "name": "t",
                    "description": ""
                },
                {
                    "name": "c",
                    "description": ""
                },
                {
                    "name": "b",
                    "description": ""
                },
                {
                    "name": "steps",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "CGSGInterpolatorTCB",
            "module": ""
        },
        {
            "file": "src\\interpolator\\class.interpolator.js",
            "line": 41,
            "itemtype": "method",
            "name": "computeInterpolations",
            "params": [
                {
                    "name": "keys",
                    "description": "Array of all the animation keys",
                    "type": "Array"
                },
                {
                    "name": "steps",
                    "description": "Array of steps between 2 keys. steps.length = keys.length - 1.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Array of {x, y} object corresponding to all the points in the curve",
                "type": "Array"
            },
            "class": "CGSGInterpolator",
            "module": ""
        },
        {
            "file": "src\\interpolator\\class.interpolator.js",
            "line": 50,
            "description": "return the length between the keys, by peer",
            "itemtype": "method",
            "name": "getLengths",
            "class": "CGSGInterpolator",
            "module": ""
        },
        {
            "file": "src\\interpolator\\class.interpolator.linear.js",
            "line": 42,
            "itemtype": "method",
            "name": "compute",
            "params": [
                {
                    "name": "keys",
                    "description": "Array of all the animation keys",
                    "type": "Array"
                },
                {
                    "name": "steps",
                    "description": "Array of steps between 2 keys. steps.length = keys.length - 1.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Array of {x, y} object corresponding to all the points in the curve",
                "type": "Array"
            },
            "class": "CGSGInterpolatorLinear",
            "module": "Animation"
        },
        {
            "file": "src\\mask\\class.mask.cache.js",
            "line": 45,
            "description": "Asks the mask to refresh the canvas cache for the given node in the next rendering. Automatically called when\na node is scaled, resize or translated.",
            "params": [
                {
                    "name": "node",
                    "description": "the node",
                    "type": "CGSGNode"
                }
            ],
            "itemtype": "method",
            "name": "invalidate",
            "class": "CGSGMaskCache",
            "module": "Animation"
        },
        {
            "file": "src\\mask\\class.mask.cache.js",
            "line": 56,
            "params": [
                {
                    "name": "node",
                    "description": "the npde",
                    "type": "CGSGNode"
                }
            ],
            "itemtype": "method",
            "name": "_internalApply",
            "access": "private",
            "tagname": "",
            "class": "CGSGMaskCache",
            "module": "Animation"
        },
        {
            "file": "src\\mask\\class.mask.cache.js",
            "line": 92,
            "params": [
                {
                    "name": "node",
                    "description": "the npde",
                    "type": "CGSGNode"
                }
            ],
            "itemtype": "method",
            "name": "_internalRemove",
            "access": "private",
            "tagname": "",
            "class": "CGSGMaskCache",
            "module": "Animation"
        },
        {
            "file": "src\\mask\\class.mask.cache.js",
            "line": 101,
            "description": "Prepare the rendering of the node by saving the given context and returning the cache context. However, if\nthe cache is already filled, then the function will return null in order to tell the caller to not render\nthe node.",
            "itemtype": "method",
            "name": "prepare",
            "params": [
                {
                    "name": "node",
                    "description": "the node",
                    "type": "CGSGNode"
                },
                {
                    "name": "context",
                    "description": "the context where the node will be drawn",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "return": {
                "description": "the context to use",
                "type": "CanvasRenderingContext2D"
            },
            "class": "CGSGMaskCache",
            "module": "Animation"
        },
        {
            "file": "src\\mask\\class.mask.cache.js",
            "line": 128,
            "description": "Finalize this mask by drawing the memory canvas to the saved context.",
            "itemtype": "method",
            "name": "finalize",
            "params": [
                {
                    "name": "node",
                    "description": "the node",
                    "type": "CGSGNode"
                },
                {
                    "name": "context",
                    "description": "the context returned by prepare()",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "return": {
                "description": "the context that was used to invoke prepare()",
                "type": "CanvasRenderingContext2D"
            },
            "class": "CGSGMaskCache",
            "module": "Animation"
        },
        {
            "file": "src\\mask\\class.mask.clip.js",
            "line": 54,
            "description": "Prepare the rendering of the node by saving the given context and returning a temporary context where the\nnode and its children should rendered.",
            "itemtype": "method",
            "name": "prepare",
            "params": [
                {
                    "name": "node",
                    "description": "the node",
                    "type": "CGSGNode"
                },
                {
                    "name": "context",
                    "description": "the context where the region will be clipped",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "return": {
                "description": "the context to use",
                "type": "CanvasRenderingContext2D"
            },
            "class": "CGSGMaskClip",
            "module": "Animation"
        },
        {
            "file": "src\\mask\\class.mask.clip.js",
            "line": 144,
            "description": "Finalize this mask by adding to the saved context the image data corresponding to the mask region.",
            "itemtype": "method",
            "name": "finalize",
            "params": [
                {
                    "name": "node",
                    "description": "the node",
                    "type": "CGSGNode"
                },
                {
                    "name": "context",
                    "description": "the context returned by prepare()",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "return": {
                "description": "the context that was used to invoke prepare()",
                "type": "CanvasRenderingContext2D"
            },
            "class": "CGSGMaskClip",
            "module": "Animation"
        },
        {
            "file": "src\\mask\\class.mask.js",
            "line": 51,
            "description": "Apply this mask to the given node.",
            "itemtype": "method",
            "name": "apply",
            "params": [
                {
                    "name": "node",
                    "description": "the node",
                    "type": "CGSGNode"
                }
            ],
            "class": "CGSGMask",
            "module": "Animation"
        },
        {
            "file": "src\\mask\\class.mask.js",
            "line": 67,
            "description": "Override this method to perform custom additional stuff when applying this mask.",
            "itemtype": "method",
            "name": "_internalApply",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "node",
                    "description": "the node",
                    "type": "CGSGNode"
                }
            ],
            "class": "CGSGMask",
            "module": "Animation"
        },
        {
            "file": "src\\mask\\class.mask.js",
            "line": 78,
            "description": "Removes this mask from a node.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "node",
                    "description": "CGSGNode the node"
                }
            ],
            "class": "CGSGMask",
            "module": "Animation"
        },
        {
            "file": "src\\mask\\class.mask.js",
            "line": 95,
            "description": "Override this method to perform custom additional stuff when removing this mask.",
            "itemtype": "method",
            "name": "_internalRemove",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "node",
                    "description": "the node",
                    "type": "CGSGNode"
                }
            ],
            "class": "CGSGMask",
            "module": "Animation"
        },
        {
            "file": "src\\mask\\class.mask.js",
            "line": 106,
            "description": "Observer method which catches key events to apply the mask.",
            "itemtype": "method",
            "name": "_eventAdapter",
            "params": [
                {
                    "name": "event",
                    "description": "the event",
                    "type": "CGSGEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGMask",
            "module": "Animation"
        },
        {
            "file": "src\\mask\\class.mask.js",
            "line": 128,
            "description": "Method to override to prepare the given context to render.",
            "itemtype": "method",
            "name": "prepare",
            "params": [
                {
                    "name": "node",
                    "description": "the observed node",
                    "type": "CGSGNode"
                },
                {
                    "name": "context",
                    "description": "the context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGMask",
            "module": "Animation"
        },
        {
            "file": "src\\mask\\class.mask.js",
            "line": 139,
            "description": "Method to override to finish the mask rendering.",
            "itemtype": "method",
            "name": "finalize",
            "params": [
                {
                    "name": "node",
                    "description": "the observed node",
                    "type": "CGSGNode"
                },
                {
                    "name": "context",
                    "description": "the context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGMask",
            "module": "Animation"
        },
        {
            "file": "src\\node\\class.node.accordion.js",
            "line": 30,
            "description": "Event",
            "itemtype": "property",
            "name": "onSectionChanged",
            "default": "null",
            "type": "{Function}",
            "class": "CGSGAccordion",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.accordion.js",
            "line": 40,
            "description": "Add a new section on the accordion.",
            "itemtype": "method",
            "name": "buildAndAddSection",
            "params": [
                {
                    "name": "title",
                    "description": "",
                    "type": "CGSGNode"
                },
                {
                    "name": "core",
                    "description": "",
                    "type": "CGSGNode"
                }
            ],
            "class": "CGSGAccordion",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.accordion.js",
            "line": 69,
            "description": "remove a section from the accordion.",
            "itemtype": "method",
            "name": "removeSectionAt",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGAccordion",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.accordion.js",
            "line": 87,
            "description": "Display the core of the selected",
            "itemtype": "method",
            "name": "selectSection",
            "params": [
                {
                    "name": "section",
                    "description": "",
                    "type": "CGSGSection"
                }
            ],
            "class": "CGSGAccordion",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.accordion.js",
            "line": 116,
            "description": "deselect all the section.",
            "itemtype": "method",
            "name": "deselectAll",
            "class": "CGSGAccordion",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.accordion.js",
            "line": 168,
            "description": "set the title of the section header",
            "itemtype": "method",
            "name": "setTitle",
            "params": [
                {
                    "name": "title",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CGSGSection",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.accordion.js",
            "line": 185,
            "description": "set the core of the section",
            "itemtype": "method",
            "name": "setCore",
            "params": [
                {
                    "name": "core",
                    "description": "",
                    "type": "CGSGNode"
                }
            ],
            "class": "CGSGSection",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.accordion.js",
            "line": 196,
            "description": "change the background color of the section",
            "itemtype": "method",
            "name": "setBackgroundColor",
            "params": [
                {
                    "name": "color",
                    "description": ""
                }
            ],
            "class": "CGSGSection",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 44,
            "itemtype": "property",
            "name": "classType",
            "type": "{String}",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 50,
            "description": "array of animations",
            "itemtype": "property",
            "name": "listAnimations",
            "type": "{Array}",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 56,
            "itemtype": "property",
            "name": "currentAnimation",
            "default": "null",
            "type": "{Object}",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 62,
            "itemtype": "property",
            "name": "isProportionalResize",
            "default": "true",
            "type": "{Boolean}",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 69,
            "description": "Current animated frame",
            "itemtype": "property",
            "name": "_currentFrame",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 76,
            "description": "Whether the sprite is being animated or not",
            "itemtype": "property",
            "name": "_isPlaying",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "type": "{Boolean}",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 85,
            "description": "Number of loops for the current animation. if -1 then it's an infinite loop.",
            "itemtype": "property",
            "name": "_numberOfLoops",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 92,
            "description": "Current loop number",
            "itemtype": "property",
            "name": "_currentLoop",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 100,
            "description": "URL of the image",
            "itemtype": "property",
            "name": "_urlImage",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 107,
            "description": "The image object itself",
            "itemtype": "property",
            "name": "_img",
            "type": "{Image}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 115,
            "itemtype": "property",
            "name": "_isLoaded",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 122,
            "description": "Handler function fired when the image is loaded",
            "itemtype": "property",
            "name": "onLoadEnd",
            "default": "null",
            "type": "{Function}",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 129,
            "description": "Handler function fired after an animation loop is ended",
            "itemtype": "property",
            "name": "onAnimationEnd",
            "default": "null",
            "type": "{Function}",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 136,
            "description": "Handler function fired before an animation loop start",
            "itemtype": "property",
            "name": "onAnimationStart",
            "default": "null",
            "type": "{Function}",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 152,
            "description": "Used to call delegate method when the image is finally loaded",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_createDelegate",
            "params": [
                {
                    "name": "objectContext",
                    "description": ""
                },
                {
                    "name": "delegateMethod",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 166,
            "description": "fired when the image is loaded.\nCheck the dimension of the image and fired the onLoadEnd event",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_onImageLoaded",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 182,
            "description": "To be overrided when the image failed to load",
            "itemtype": "method",
            "name": "_onImageError",
            "access": "protected",
            "tagname": "",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 191,
            "description": "Check the true dimension of the image and fill the this.dimension property with it,\nonly if dimension is not already defined in the constructor",
            "itemtype": "method",
            "name": "checkDimension",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 204,
            "description": "Set the image for this animated sprite.",
            "example": [
                "\n\nthis.pingoo = new CGSGNodeSprite(60, 60, null, this.context);\nthis.pingoo.isDraggable = true;\n//name, speed, frames, sliceX, sliceY, width, height, framesPerLine\nthis.pingoo.addAnimation(\"front\", 6, 4, 476, 0, 34, 34, 4);\nthis.pingoo.play(\"front\", null);\n\n//now, load the image containing the sprite sheet.\n//The affectation to the sprite will be done in the loaded handler function\nthis.spriteSheet = new Image();\nthis.spriteSheet.onload = this.onImageLoaded();\nthis.spriteSheet.src = \"images/board.png\";\n\nonImageLoaded : function () {\n\t this.pingoo.setImage(this.spriteSheet);\n\t this.numbers.setImage(this.spriteSheet);\n  this.water.setImage(this.spriteSheet);\n}"
            ],
            "itemtype": "method",
            "name": "setImage",
            "params": [
                {
                    "name": "newImage",
                    "description": "new Image object. Must be an already loaded one",
                    "type": "Image"
                }
            ],
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 238,
            "description": "Go to the next frame of the current animation",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "goToNextFrame",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 266,
            "description": "Go to the previous frame of the current animation",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "goToPreviousFrame",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 294,
            "description": "Go to the first frame of the current loop",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "goToFirstFrame",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 304,
            "description": "Go to the last frame of the current loop",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "goToLastFrame",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 314,
            "description": "Must be defined to allow the scene graph to render the image nodes",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "c",
                    "description": "The context to render on",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "itemtype": "method",
            "name": "render",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 359,
            "description": "Return position x and y in the image for the slice of the animation and frame passed in parameter.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getSlice",
            "params": [
                {
                    "name": "frame",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "animation",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 377,
            "description": "Add an animation for this sprite",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addAnimation",
            "params": [
                {
                    "name": "name",
                    "description": "Name for this animation",
                    "type": "String"
                },
                {
                    "name": "speed",
                    "description": "Number of frames between 2 steps",
                    "type": "Number"
                },
                {
                    "name": "frames",
                    "description": "Number of frame for this animation",
                    "type": "Number"
                },
                {
                    "name": "sliceX",
                    "description": "slice position inside the image for this animation",
                    "type": "Number"
                },
                {
                    "name": "sliceY",
                    "description": "slice position inside the image for this animation",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "width of 1 frame",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "height of 1 frame",
                    "type": "Number"
                },
                {
                    "name": "framesPerLine",
                    "description": "Number of frames per line in the image",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 416,
            "description": "Start an animation",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "animationName",
                    "description": "Name of the animation to start",
                    "type": "String"
                },
                {
                    "name": "loop",
                    "description": "number of animation loop. Can be null or negative to set infinite loop",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if the animation exists; false otherwise",
                "type": "Boolean"
            },
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 452,
            "description": "Stop the current animation and stay on the current frame",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stop",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 469,
            "description": "return to the first frame of the first loop of the current animation",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "reset",
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.animatedSprite.js",
            "line": 480,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNodeSprite"
            },
            "class": "CGSGNodeSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 41,
            "itemtype": "property",
            "name": "txtNode",
            "type": "{CGSGNodeText}",
            "class": "CGSGButtonMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 46,
            "description": "Slice in the image for the icon",
            "itemtype": "property",
            "name": "slice",
            "type": "{CGSGRegion}",
            "default": "null",
            "class": "CGSGButtonMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 53,
            "itemtype": "property",
            "name": "icon",
            "type": "{CGSGNodeImage}",
            "default": "null",
            "class": "CGSGButtonMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 59,
            "description": "Computed dimensions of the button in the 3 modes.\nDo not edit manually!",
            "itemtype": "property",
            "name": "_dimensions",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "CGSGButtonMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 83,
            "itemtype": "property",
            "name": "NORMAL",
            "class": "CGSGButtonMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 90,
            "itemtype": "property",
            "name": "OVER",
            "class": "CGSGButtonMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 97,
            "itemtype": "property",
            "name": "DEACTIVATED",
            "class": "CGSGButtonMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 105,
            "itemtype": "property",
            "name": "SELECTED",
            "class": "CGSGButtonMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 115,
            "itemtype": "property",
            "name": "TOP",
            "class": "CGSGButtonMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 126,
            "itemtype": "property",
            "name": "BOTTOM",
            "class": "CGSGButtonMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 136,
            "itemtype": "property",
            "name": "LEFT",
            "class": "CGSGButtonMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 146,
            "itemtype": "property",
            "name": "RIGHT",
            "class": "CGSGButtonMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 174,
            "description": "A properties group for each mode.\nIndex in this array corresponds to the id of the mode",
            "itemtype": "property",
            "name": "_props",
            "type": "{CGSGNodeButtonProps[]}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 192,
            "itemtype": "property",
            "name": "_pictoPosition",
            "default": "CGSGPositionMode.LEFT",
            "type": "{CGSGPositionMode}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 200,
            "description": "Distance between the picto and the text",
            "itemtype": "property",
            "name": "_distancePictoText",
            "default": "10",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 209,
            "description": "Fake canvases to pre-render static display",
            "itemtype": "property",
            "name": "_tmpCanvas",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 220,
            "itemtype": "property",
            "name": "classType",
            "readonly": "",
            "type": "{String}",
            "default": "\"CGSGNodeButton\"",
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 228,
            "description": "Current mode of the button",
            "itemtype": "property",
            "name": "_currentMode",
            "type": "{CGSGButtonMode}",
            "default": "CGSGButtonMode.NORMAL",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 270,
            "description": "Change the position of the picto : CGSGPositionMode.LEFT, CGSGPositionMode.TOP, CGSGPositionMode.RIGHT, CGSGPositionMode.BOTTOM",
            "itemtype": "method",
            "name": "setPictoPosition",
            "params": [
                {
                    "name": "p",
                    "description": "",
                    "type": "CGSGPositionMode"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 280,
            "description": "Because a button got 4 modes it also got 4 CSS management",
            "itemtype": "method",
            "name": "setClassFor",
            "params": [
                {
                    "name": "cls",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "mode",
                    "description": "",
                    "type": "CGSGButtonMode"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 296,
            "description": "Set the same CSS class for all 4 modes",
            "itemtype": "method",
            "name": "setClass",
            "params": [
                {
                    "name": "cls",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 311,
            "itemtype": "method",
            "name": "setClasses",
            "params": [
                {
                    "name": "clss",
                    "description": "Array of CSS class name",
                    "type": "Array"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 331,
            "description": "Add CSS class for this node and for this mode only (not for bounding box, use 'setClassBBox' instead).\nCSS class must define attributes used by this node.",
            "itemtype": "method",
            "name": "addClassFor",
            "params": [
                {
                    "name": "cls",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "mode",
                    "description": "",
                    "type": "CGSGButtonMode"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 347,
            "description": "Add CSS class for this node for all 4 modes (not for bounding box, use 'setClassBBox' instead).\nCSS class must define attributes used by this node.",
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "cls",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 362,
            "description": "Add CSS class for this node for all 4 modes (not for bounding box, use 'setClassBBox' instead).\nCSS class must define attributes used by this node.",
            "itemtype": "method",
            "name": "addClasses",
            "params": [
                {
                    "name": "clss",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 377,
            "description": "remove CSS class for this node and for this mode only (not for bounding box, use 'setClassBBox' instead).",
            "itemtype": "method",
            "name": "removeClassFor",
            "params": [
                {
                    "name": "cls",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "mode",
                    "description": "",
                    "type": "CGSGButtonMode"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 390,
            "description": "remove CSS class for this node for all 4 modes (not for bounding box, use 'setClassBBox' instead).",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "cls",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 404,
            "itemtype": "method",
            "name": "setImageFor",
            "params": [
                {
                    "name": "img",
                    "description": "",
                    "type": "Image"
                },
                {
                    "name": "mode",
                    "description": "",
                    "type": "CGSGButtonMode"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 413,
            "description": "Set the image for the picto",
            "itemtype": "method",
            "name": "setImage",
            "params": [
                {
                    "name": "img",
                    "description": "",
                    "type": "Image"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 429,
            "description": "Set the URL for the icon for all modes",
            "itemtype": "method",
            "name": "setImageURL",
            "params": [
                {
                    "name": "url",
                    "description": ""
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 441,
            "description": "Set the URL for the icon for all modes",
            "itemtype": "method",
            "name": "setImageURL",
            "params": [
                {
                    "name": "url",
                    "description": ""
                },
                {
                    "name": "mode",
                    "description": "",
                    "type": "CGSGButtonMode"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 465,
            "description": "Check if icon object already exist for each mode.\nIf not, create them",
            "itemtype": "method",
            "name": "_checkIcon",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 478,
            "itemtype": "method",
            "name": "_checkIconFor",
            "params": [
                {
                    "name": "mode",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 489,
            "description": "Return the text of the button",
            "itemtype": "method",
            "name": "getText",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 499,
            "description": "Force this node to be fully recomputed during next frame",
            "itemtype": "method",
            "name": "forceRedraw",
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 512,
            "description": "Set the values for text of the button",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "valuess",
                    "description": "",
                    "type": "Array"
                }
            ],
            "example": [
                "\n button.setText([\"normal\", \"over\", \"deactivated\"]);"
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 534,
            "itemtype": "method",
            "name": "setTextClass",
            "params": [
                {
                    "name": "cls",
                    "description": "CSS class name",
                    "type": "String"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 546,
            "itemtype": "method",
            "name": "setTextClasses",
            "params": [
                {
                    "name": "clss",
                    "description": "Array of CSS class name",
                    "type": "Array"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 558,
            "itemtype": "method",
            "name": "setTextClassFor",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "CGSGButtonMode"
                },
                {
                    "name": "cls",
                    "description": "CSS class name",
                    "type": "String"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 568,
            "itemtype": "method",
            "name": "setFixedSize",
            "params": [
                {
                    "name": "dim",
                    "description": "Can be null to remove fixed size",
                    "type": "CGSGDimension"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 582,
            "description": "Set the slices in the image for the 3 modes",
            "itemtype": "method",
            "name": "setSlices",
            "params": [
                {
                    "name": "slices",
                    "description": "array of region for all 4 modes",
                    "type": "Array"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 595,
            "itemtype": "method",
            "name": "setSliceFor",
            "params": [
                {
                    "name": "slice",
                    "description": "",
                    "type": "CGSGRegion"
                },
                {
                    "name": "mode",
                    "description": "",
                    "type": "CGSGButtonMode"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 607,
            "description": "Reload theme (colors, ...) from loaded CSS file",
            "itemtype": "method",
            "name": "invalidateTheme",
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 634,
            "itemtype": "method",
            "name": "_loadAttrs",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "CGSGButtonMode"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 696,
            "description": "Increase/decrease current dimension with adding values",
            "itemtype": "method",
            "name": "resizeWith",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 708,
            "description": "Pre-render the button into a temp canvas to optimize the perfs",
            "itemtype": "method",
            "name": "_initShape",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 721,
            "description": "Pre-render the shape for normal rendering",
            "itemtype": "method",
            "name": "_initShape",
            "params": [
                {
                    "name": "mode",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 863,
            "description": "Switch current mode",
            "itemtype": "method",
            "name": "setMode",
            "params": [
                {
                    "name": "mode",
                    "description": ""
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 875,
            "itemtype": "method",
            "name": "getMode",
            "return": {
                "description": "",
                "type": "CGSGButtonMode"
            },
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 883,
            "description": "Custom rendering",
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.button.js",
            "line": 898,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNodeSquare"
            },
            "class": "CGSGNodeButton",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.circle.js",
            "line": 45,
            "itemtype": "property",
            "name": "classType",
            "readonly": "",
            "type": "{String}",
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.circle.js",
            "line": 52,
            "itemtype": "property",
            "name": "radius",
            "type": "{Number}",
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.circle.js",
            "line": 87,
            "itemtype": "method",
            "name": "_resize",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.circle.js",
            "line": 122,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNodeCircle"
            },
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.colorPicker.js",
            "line": 40,
            "itemtype": "property",
            "name": "_imgData",
            "type": "{ImageData}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeColorPicker",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.colorPicker.js",
            "line": 58,
            "description": "Event fired when the mice cursor move over the color picker. Return a {r, g, b} Object.",
            "itemtype": "property",
            "name": "onOverColor",
            "default": "null",
            "type": "{Function}",
            "class": "CGSGNodeColorPicker",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.colorPicker.js",
            "line": 65,
            "description": "Event fired when the user click on the color picker. Return a {r, g, b} Object.",
            "itemtype": "property",
            "name": "onClickColor",
            "default": "null",
            "type": "{Function}",
            "class": "CGSGNodeColorPicker",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.colorPicker.js",
            "line": 73,
            "itemtype": "property",
            "name": "classType",
            "readonly": "",
            "type": "{String}",
            "default": "\"CGSGNodeButton\"",
            "class": "CGSGNodeColorPicker",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.colorPicker.js",
            "line": 84,
            "itemtype": "method",
            "name": "_onMouseOverHandler",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeColorPicker",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.colorPicker.js",
            "line": 97,
            "itemtype": "method",
            "name": "_onClickHandler",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeColorPicker",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.colorPicker.js",
            "line": 110,
            "itemtype": "method",
            "name": "getColorAt",
            "params": [
                {
                    "name": "absolutePosition",
                    "description": "position of the cursor inside the colorPicker",
                    "type": "CGSGPosition"
                }
            ],
            "return": {
                "description": "Object with {r:x, g:x, b:x} value",
                "type": "Object"
            },
            "class": "CGSGNodeColorPicker",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.colorPicker.js",
            "line": 130,
            "description": "Custom rendering. Must be defined to allow the traverser to render this node",
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeColorPicker",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.curveTCB.js",
            "line": 52,
            "itemtype": "property",
            "name": "classType",
            "readonly": "",
            "type": "{String}",
            "class": "CGSGNodeCurveTCB",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.curveTCB.js",
            "line": 60,
            "itemtype": "method",
            "name": "addKey",
            "params": [
                {
                    "name": "x",
                    "description": ""
                },
                {
                    "name": "y",
                    "description": ""
                },
                {
                    "name": "t",
                    "description": ""
                },
                {
                    "name": "c",
                    "description": ""
                },
                {
                    "name": "b",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "CGSGKeyFrame"
            },
            "class": "CGSGNodeCurveTCB",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.curveTCB.js",
            "line": 100,
            "description": "Custom rendering",
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeCurveTCB",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.curveTCB.js",
            "line": 123,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNodeCurveTCB"
            },
            "class": "CGSGNodeCurveTCB",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.dom.js",
            "line": 50,
            "description": "Size of the area around the element",
            "itemtype": "property",
            "name": "threshold",
            "default": "20",
            "type": "{Number}",
            "class": "CGSGNodeDomElement",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.dom.js",
            "line": 58,
            "itemtype": "property",
            "name": "classType",
            "type": "{String}",
            "class": "CGSGNodeDomElement",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.dom.js",
            "line": 64,
            "description": "A HTML tag that contains the element",
            "itemtype": "property",
            "name": "_htmlElement",
            "type": "{HTMLElement}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeDomElement",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.dom.js",
            "line": 79,
            "description": "Updates the styles of the wrapped DOM element to change its position and size inside the scene.",
            "itemtype": "method",
            "name": "updateCssRegion",
            "class": "CGSGNodeDomElement",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.dom.js",
            "line": 92,
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "render\nCustom rendering",
            "class": "CGSGNodeDomElement",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.dom.js",
            "line": 107,
            "description": "Return the copy of this node",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "CGSGNodeDomElement"
            },
            "class": "CGSGNodeDomElement",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.ellipse.js",
            "line": 55,
            "itemtype": "property",
            "name": "classType",
            "readonly": "",
            "type": "{String}",
            "class": "CGSGNodeEllipse",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.ellipse.js",
            "line": 65,
            "description": "Custom rendering",
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "c",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeEllipse",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.ellipse.js",
            "line": 101,
            "description": "Replace current dimension by these new ones and compute new Points",
            "itemtype": "method",
            "name": "resizeTo",
            "params": [
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeEllipse",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.ellipse.js",
            "line": 113,
            "description": "Multiply current dimension by these new ones",
            "itemtype": "method",
            "name": "resizeTBy",
            "params": [
                {
                    "name": "wf",
                    "description": "width Factor",
                    "type": "Number"
                },
                {
                    "name": "hf",
                    "description": "height Factor",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeEllipse",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.ellipse.js",
            "line": 125,
            "description": "Increase/decrease current dimension with adding values",
            "itemtype": "method",
            "name": "resizeWith",
            "params": [
                {
                    "name": "w",
                    "description": "width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeEllipse",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.ellipse.js",
            "line": 137,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNodeEllipse"
            },
            "class": "CGSGNodeEllipse",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 44,
            "itemtype": "property",
            "name": "classType",
            "type": "{String}",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 50,
            "description": "the selected effect to be applied",
            "itemtype": "property",
            "name": "effect",
            "default": "null",
            "type": "{CGSGEffect}",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 57,
            "description": "URL of the image",
            "itemtype": "property",
            "name": "_urlImage",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 65,
            "itemtype": "property",
            "name": "isProportionalResize",
            "default": "true",
            "type": "{Boolean}",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 71,
            "description": "the image object itself",
            "itemtype": "property",
            "name": "_img",
            "type": "{Image}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 78,
            "description": "the region on the image to render",
            "itemtype": "property",
            "name": "slice",
            "type": "{CGSGRegion}",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 85,
            "itemtype": "property",
            "name": "_isLoaded",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 92,
            "description": "Event Fired when the image is finally loaded",
            "itemtype": "property",
            "name": "onLoadEnd",
            "default": "null",
            "type": "{Function} {node:this}",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 99,
            "description": "Event Fired when the image failed to load",
            "itemtype": "property",
            "name": "onLoadError",
            "default": "null",
            "type": "{Function} {node:this}",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 106,
            "description": "Event Fired when the image loading is aborted",
            "itemtype": "property",
            "name": "onLoadAbort",
            "default": "null",
            "type": "{Function} {node:this}",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 121,
            "description": "used to call delegate method when the image is finally loaded",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_createDelegate",
            "params": [
                {
                    "name": "objectContext",
                    "description": ""
                },
                {
                    "name": "delegateMethod",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 135,
            "description": "fired when the image is loaded.\nCheck the dimension of the image and fired the onLoadEnd event",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onImageLoaded",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 156,
            "description": "To be overrided when the image failed to load",
            "itemtype": "method",
            "name": "_onImageError",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 168,
            "description": "To be overrided when the image loading is aborted",
            "itemtype": "method",
            "name": "_onImageAbort",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 180,
            "description": "Check the true dimension of the image and fill the this.dimension property with it,\nonly if dimension is not already defined in the constructor",
            "itemtype": "method",
            "name": "checkDimension",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 201,
            "description": "Set the slice into the image",
            "itemtype": "method",
            "name": "setSlice",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "updateDimension",
                    "description": "If true, the dimension will be set with the dimension of the slice",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 223,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setImage",
            "params": [
                {
                    "name": "img",
                    "description": "new Image object. Must be already loaded before",
                    "type": "Image"
                }
            ],
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 240,
            "description": "Set a new URL for the image of the node",
            "itemtype": "method",
            "name": "setURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 272,
            "description": "return the Javascript image encapsulated in this node",
            "itemtype": "method",
            "name": "getImage",
            "return": {
                "description": "",
                "type": "Image"
            },
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 281,
            "description": "Must be defined to allow the scene graph to render the image nodes",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "context",
                    "description": "the context to render on",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 304,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setEffect",
            "params": [
                {
                    "name": "effect",
                    "description": "",
                    "type": "CGSGEffect"
                }
            ],
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.image.js",
            "line": 313,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNodeImage"
            },
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 43,
            "description": "The name of this nodes. Should be unique, but no control is done.",
            "itemtype": "property",
            "name": "name",
            "default": "\"\"",
            "type": "{String}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 50,
            "description": "Indicate whether this node is selected or not.\nUse CGSGView::scenegraph.selectNode(nodeToSelect) to select a node",
            "itemtype": "property",
            "name": "isSelected",
            "readonly": "",
            "default": "false",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 59,
            "description": "The type of this class. Must be redefined by inherited classes",
            "itemtype": "property",
            "name": "classType",
            "readonly": "",
            "type": "{String}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 67,
            "description": "The 8 handleboxes that will be the resize handles\nthe resize handles will be in this order:\n 0  1  2\n 3     4\n 5  6  7",
            "itemtype": "property",
            "name": "handles",
            "readonly": "",
            "type": "{Array}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 79,
            "description": "Level of transparency of the node.",
            "default": "1.0",
            "itemtype": "property",
            "name": "globalAlpha",
            "type": "{Number}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 86,
            "description": "Indicate if the node is visible (and so selectable) or not",
            "itemtype": "property",
            "name": "isVisible",
            "default": "true",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 94,
            "description": "If true, the node will be proportionally resized",
            "itemtype": "property",
            "name": "isProportionalResize",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 101,
            "description": "Set to true if the node can't be resized only in height or width",
            "itemtype": "property",
            "name": "isProportionalResizeOnly",
            "default": "false",
            "type": "{boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 109,
            "description": "Define the method the detection (or \"pick\") method will be used for this node.\nPossible values CGSGPickNodeMethod.REGION and CGSGPickNodeMethod.GHOST.\n\n<ul>\n    <li>REGION : the detection returns true if the mouse cursor is inside the bounding box of the node</li>\n    <li>GHOST : the detection will use the \"renderGhost\" method of the node to achieve a more accurate detection</li>\n</ul>",
            "itemtype": "property",
            "name": "pickNodeMethod",
            "default": "CGSGPickNodeMethod.REGION",
            "type": "{CGSGPickNodeMethod}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 124,
            "description": "List of the children (empty if this nodes is a leaf)",
            "itemtype": "property",
            "name": "children",
            "readonly": "",
            "type": "{Array}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 132,
            "description": "The constraint region when moving the node",
            "itemtype": "property",
            "name": "regionConstraint",
            "default": "null",
            "type": "{null}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 140,
            "description": "Node defining constraint region when moving the node",
            "itemtype": "property",
            "name": "nodeConstraint",
            "default": "null",
            "type": "{null}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 147,
            "description": "List of nodes which are constraint to the region of this one",
            "itemtype": "property",
            "name": "_followers",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 155,
            "description": "Pivot point to apply a rotation.\nThe point is a value between [0, 0] and [1, 1].\n[0, 0] is the top left corner of the bounding box and [1, 1] the bottom right corner.",
            "itemtype": "property",
            "name": "rotationCenter",
            "default": "null",
            "type": "{CGSGPosition}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 165,
            "description": "can be fulfilled by the developer to put in whatever he needs",
            "itemtype": "property",
            "name": "userData",
            "default": "{} Empty object",
            "type": "{*}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 173,
            "description": "selection attributes\nIf true, this node is clickable and so will be checked by the pickNode function",
            "itemtype": "property",
            "name": "isClickable",
            "default": "true",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 181,
            "description": "If true, this node can be resized by the user. In that case, the dimension property will be affected, not the scale one.",
            "itemtype": "property",
            "name": "isResizable",
            "default": "false",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 188,
            "description": "If true, the node can be dragged by the user",
            "itemtype": "property",
            "name": "isDraggable",
            "default": "false",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 196,
            "description": "If true, the absolute matrix will be recomputed after each movement (and so in animation).\nSet it to false to gain performance if you don't need to keep trace of absolute position (no need to collision, picknode, ...)",
            "itemtype": "property",
            "name": "needToKeepAbsoluteMatrix",
            "default": "true",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 205,
            "description": "Color for the line around this node when selected",
            "itemtype": "property",
            "name": "selectionLineColor",
            "default": "\"#FF6890\"",
            "type": "{String}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 212,
            "description": "Width for the line around this node when selected",
            "itemtype": "property",
            "name": "selectionLineWidth",
            "default": "2",
            "type": "{Number}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 219,
            "description": "Color for the handle boxes around this node when selected",
            "itemtype": "property",
            "name": "handleSize",
            "type": "{Number}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 225,
            "description": "Color for the handle boxes around this node when selected",
            "itemtype": "property",
            "name": "handleColor",
            "type": "{String}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 232,
            "description": "Updated by the scene itself. Don't update it manually.\nTrue if the mice is over the node, false otherwise",
            "itemtype": "property",
            "name": "isMouseOver",
            "readonly": "",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 240,
            "description": "Updated by the scene itself. Don't update it manually.\nTrue if the node is being moved manually, false otherwise",
            "itemtype": "property",
            "name": "isMoving",
            "readonly": "",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 248,
            "description": "Updated by the scene itself. Don't update it manually.\nTrue if the node is being resized manually, false otherwise",
            "itemtype": "property",
            "name": "isResizing",
            "readonly": "",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 257,
            "description": "ID for the node. Should be filled by the developer. The framework will never use it.",
            "itemtype": "property",
            "name": "_id",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 264,
            "description": "parent of this node",
            "itemtype": "property",
            "name": "_parentNode",
            "type": "{CGSGNode}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 277,
            "itemtype": "property",
            "name": "shadowOffsetX",
            "default": "0",
            "type": "{number}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 283,
            "itemtype": "property",
            "name": "shadowOffsetY",
            "default": "0",
            "type": "{number}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 289,
            "itemtype": "property",
            "name": "shadowBlur",
            "default": "0",
            "type": "{number}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 295,
            "itemtype": "property",
            "name": "shadowColor",
            "default": "\"#333333\"",
            "type": "{string}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 302,
            "description": "Relative position of this nodes on the canvas container, relatively to the position of its parent node.\nNever use it to move the node, use translateBy/translateWith/translateTo instead",
            "readonly": "",
            "itemtype": "property",
            "name": "position",
            "default": "CGSGPosition(0, 0)",
            "type": "{CGSGPosition}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 311,
            "description": "Absolute position of this nodes on the canvas container. Generated value. Don't modify it manually\nNever use it to move the node, use translateBy/translateWith/translateTo instead",
            "readonly": "",
            "itemtype": "property",
            "name": "_absPos",
            "access": "private",
            "tagname": "",
            "type": "{CGSGPosition}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 320,
            "description": "Dimension of this nodes on the canvas container\nNever use it to resize the node, use resizeBy/resizeWith/resizeTo instead",
            "readonly": "",
            "itemtype": "property",
            "name": "dimension",
            "default": "CGSGDimension(0, 0)",
            "type": "{CGSGDimension}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 329,
            "description": "Relative scale of this nodes on the canvas container, relatively to the scale of its parent node.\nNever use it to scale or resize the node, use scaleBy/scaleWith/scaleTo instead",
            "readonly": "",
            "itemtype": "property",
            "name": "scale",
            "default": "CGSGScale(1, 1)",
            "type": "{CGSGScale}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 338,
            "description": "Absolute scale of this nodes on the canvas container. Generated value. Don't modify it manually\nNever use it to scale the node, use scaleBy/scaleWith/scaleTo instead",
            "readonly": "",
            "itemtype": "property",
            "name": "_absSca",
            "access": "private",
            "tagname": "",
            "type": "{CGSGScale}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 347,
            "description": "Relative rotation of this nodes on the canvas container, relatively to the rotation of its parent node.\nNever use it to rotate or resize the node, use rotateBy/rotateWith/rotateTo instead",
            "readonly": "",
            "itemtype": "property",
            "name": "rotation",
            "default": "CGSGRotation(0)",
            "type": "{CGSGRotation}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 356,
            "description": "Absolute rotation of this nodes on the canvas container. Generated value. Don't modify it manually\nNever use it to rotate or resize the node, use rotateBy/rotateWith/rotateTo instead",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_absRot",
            "type": "{CGSGRotation}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 366,
            "itemtype": "property",
            "name": "_isDrag",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 373,
            "description": "true if this node is traversable (recursively) (ie : by the picknode, a traverser, ...)",
            "itemtype": "property",
            "name": "isTraversable",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 380,
            "description": "Indicate if this node is managed by the collision manager",
            "itemtype": "property",
            "name": "isCollisionManaged",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 387,
            "description": "Callback on mouse over the node",
            "itemtype": "property",
            "name": "onMouseOver",
            "default": "null",
            "type": "{function}",
            "example": [
                "\n this.onMouseOver = function (event) {\n     event.data.node; //CGSGNode\n     event.data.position; //Array of CGSGPosition\n     event.data.nativeEvent; //Event\n }"
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 401,
            "description": "Callback on mouse enter on the node",
            "itemtype": "property",
            "name": "onMouseEnter",
            "default": "null",
            "type": "{function}",
            "example": [
                "\n this.onMouseEnter = function (event) {\n     event.data.node; //CGSGNode\n     event.data.position; //Array of CGSGPosition\n     event.data.nativeEvent; //Event\n }"
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 415,
            "description": "Callback on mouse out",
            "itemtype": "property",
            "name": "onMouseOut",
            "default": "null",
            "type": "{function}",
            "example": [
                "\n this.onMouseOut = function (event) {\n     event.data.node; //CGSGNode\n     event.data.position; //Array of CGSGPosition\n     event.data.nativeEvent; //Event\n }"
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 429,
            "description": "Callback on mouse up",
            "itemtype": "property",
            "name": "onMouseUp",
            "default": "null",
            "type": "{function}",
            "example": [
                "\n this.onMouseUp = function (event) {\n     event.data.node; //CGSGNode\n     event.data.position; //Array of CGSGPosition\n     event.data.nativeEvent; //Event\n }"
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 443,
            "description": "Callback on mouse or touch click",
            "itemtype": "property",
            "name": "onClick",
            "default": "null",
            "type": "{function}",
            "example": [
                "\n this.onClick = function (event) {\n     event.data.node; //CGSGNode\n     event.data.position; //Array of CGSGPosition\n     event.data.nativeEvent; //Event\n }"
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 457,
            "description": "Callback on mouse or touch double click",
            "itemtype": "property",
            "name": "onDblClick",
            "default": "null",
            "type": "{function}",
            "example": [
                "\n this.onDblClick = function (event) {\n     event.data.node; //CGSGNode\n     event.data.position; //Array of CGSGPosition\n     event.data.nativeEvent; //Event\n }"
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 471,
            "description": "Callback on drag this node",
            "itemtype": "property",
            "name": "onDrag",
            "default": "null",
            "type": "{function}",
            "example": [
                "\n this.onDrag = function (event) {\n     event.data.node; //CGSGNode\n     event.data.position; //Array of CGSGPosition\n     event.data.nativeEvent; //Event\n }"
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 485,
            "description": "Callback on end of drag this node",
            "itemtype": "property",
            "name": "onDragEnd",
            "default": "null",
            "type": "{function}",
            "example": [
                "\n this.onDragEnd = function (event) {\n     event.data.node; //CGSGNode\n     event.data.position; //Array of CGSGPosition\n     event.data.nativeEvent; //Event\n }"
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 499,
            "description": "Callback on resize this node",
            "itemtype": "property",
            "name": "onResize",
            "default": "null",
            "type": "{function}",
            "example": [
                "\n this.onResize = function (event) {\n     event.data.node; //CGSGNode\n     event.data.position; //Array of CGSGPosition\n     event.data.nativeEvent; //Event\n }"
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 513,
            "description": "Callback on end resize this node",
            "itemtype": "property",
            "name": "onResizeEnd",
            "default": "null",
            "type": "{function}",
            "example": [
                "\n this.onResizeEnd = function (event) {\n     event.data.node; //CGSGNode\n     event.data.position; //Array of CGSGPosition\n     event.data.nativeEvent; //Event\n }"
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 527,
            "description": "Callback on select this node",
            "itemtype": "property",
            "name": "onSelect",
            "default": "null",
            "type": "{function}",
            "example": [
                "\n this.onSelect = function (event) {\n     event.data.node; //CGSGNode\n     event.data.position; //Array of CGSGPosition\n     event.data.nativeEvent; //Event\n }"
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 542,
            "description": "Callback on deselect this node",
            "itemtype": "property",
            "name": "onDeselect",
            "default": "null",
            "type": "{function}",
            "example": [
                "\n this.onDeselect = function (event) {\n     event.data.node; //CGSGNode\n     event.data.position; //Array of CGSGPosition\n     event.data.nativeEvent; //Event\n }"
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 557,
            "description": "Callback on when a child is removed",
            "itemtype": "property",
            "name": "onChildRemove",
            "default": "null",
            "type": "{function}",
            "example": [
                "\n this.onDeselect = function (event) {\n     event.data.node; //CGSGNode\n     event.data.position; //Array of CGSGPosition\n     event.data.nativeEvent; //Event\n }"
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 572,
            "description": "Callback before the node is rendered, children included",
            "itemtype": "property",
            "name": "onBeforeRender",
            "default": "null",
            "type": "{function}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 579,
            "description": "Callback after the scene is rendered",
            "itemtype": "property",
            "name": "onAfterRender",
            "default": "null",
            "type": "{function}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 586,
            "itemtype": "property",
            "name": "onAfterRenderStart",
            "default": "null",
            "type": "{function}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 592,
            "description": "Callback fired while translating",
            "itemtype": "property",
            "name": "onTranslate",
            "default": "null",
            "type": "{function}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 600,
            "description": "Threshold applied when detecting selection. Defalt value is picked from CGSG.globalDetectSelectionThreshold.\nValue could be changed after.",
            "itemtype": "property",
            "name": "detectSelectionThreshold",
            "type": "{Number}",
            "example": [
                "\nvar n = new CGSGNode(10, 10);\nn.detectSelectionThreshold = 10; // node will be picked in an area [0, 0, 30, 30] (x, y, w, h)"
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 612,
            "description": "Array of colors to fill the background of the node. Will be overrided with CSS content.\nCGSGNode extensions should (but not mandatory) use this attribute\n\nCSS managed.",
            "itemtype": "property",
            "name": "bkgcolors",
            "type": "{Array}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 622,
            "description": "Color to stroke the node. Will be overrided with CSS content\nCGSGNode extensions should (but not mandatory) use this attribute as the stroke color for their node\n\nCSS managed.",
            "itemtype": "property",
            "name": "lineColor",
            "type": "{String}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 631,
            "description": "Width of the line that stroke the node. Will be overrided with CSS content.\nCGSGNode extensions should (but not mandatory) use this attribute as the strokeWidth for their node\nLet 0 if you don't want to stroke the node.\n\nCSS managed.",
            "itemtype": "property",
            "name": "lineWidth",
            "default": "0",
            "type": "{Number}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 643,
            "description": "Corner radius. Used by only few official nodes and maybe by some community's nodes.\n\nCSS managed.",
            "itemtype": "property",
            "name": "borderRadius",
            "type": "{number}",
            "default": "0",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 664,
            "description": "Set to true if dimension of the node is not the original one anymore",
            "itemtype": "property",
            "name": "_isDimensionChanged",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 682,
            "itemtype": "method",
            "name": "moveLocalZIndex",
            "params": [
                {
                    "name": "s",
                    "description": "step",
                    "type": "Number"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 694,
            "itemtype": "method",
            "name": "setLocalZIndex",
            "params": [
                {
                    "name": "i",
                    "description": "index",
                    "type": "Number"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 724,
            "description": "return the relative region of this node",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getRegion",
            "return": {
                "description": "",
                "type": "CGSGRegion"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 734,
            "description": "return the absolute region of this node",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAbsoluteRegion",
            "return": {
                "description": "",
                "type": "CGSGRegion"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 747,
            "description": "Wipes the canvas context",
            "itemtype": "method",
            "name": "_clearContext",
            "params": [
                {
                    "name": "c",
                    "description": "context",
                    "type": "?"
                },
                {
                    "name": "w",
                    "description": "canvasWidth",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "canvasHeight",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 759,
            "description": "Use this method to make the node precomputed or not.\nIf it's precomputed, it won't be redraw every frame, but only when the \"invalidate\" method is called.",
            "itemtype": "method",
            "name": "setPrecomputed",
            "params": [
                {
                    "name": "p",
                    "description": "isPrecomputed",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 770,
            "description": "Force the redraw of the node if it's precomputed",
            "itemtype": "method",
            "name": "invalidate",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 780,
            "description": "Reload theme (colors, ...) from loaded CSS file\nTo be overrided",
            "itemtype": "method",
            "name": "invalidateTheme",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 852,
            "description": "Set CSS class for this node (not for bounding box, use 'setClassBBox' instead).\nCSS class must define attributes used by this node.",
            "itemtype": "method",
            "name": "setClass",
            "params": [
                {
                    "name": "cls",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 866,
            "description": "Add CSS class for this node (not for bounding box, use 'setClassBBox' instead).\nCSS class must define attributes used by this node.",
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "cls",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 877,
            "description": "remove CSS class for this node (not for bounding box, use 'setClassBBox' instead).",
            "itemtype": "method",
            "name": "removeClass",
            "params": [
                {
                    "name": "cls",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 887,
            "description": "Set CSS class for the bounding box of this node (not for node itself, use 'setClass' instead).\nCSS class must define attributes used by BBox.",
            "itemtype": "method",
            "name": "setClassBBox",
            "params": [
                {
                    "name": "cls",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 898,
            "itemtype": "method",
            "name": "_applyShadow",
            "params": [
                {
                    "name": "c",
                    "description": "",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 912,
            "itemtype": "method",
            "name": "_preCompute",
            "access": "private",
            "tagname": "",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 929,
            "description": "internal method of the framework that encapsulate all the work aroud the rendering method",
            "itemtype": "method",
            "name": "doRender",
            "params": [
                {
                    "name": "c",
                    "description": "context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "t",
                    "description": "isThemeInvalidated",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1016,
            "description": "Empty rendering function. Must be overrided by the inherited classes",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1024,
            "description": "internal method of the framework that encapsulate all the work around the ghost rendering method",
            "itemtype": "method",
            "name": "doRenderGhost",
            "params": [
                {
                    "name": "c",
                    "description": "ghost Context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1054,
            "description": "Empty ghost rendering function.\nRender here your custom nodes with a single color (CGSG.ghostColor).\nThis will be used by the SceneGraph to know if the mouse cursor is over this nodes.",
            "itemtype": "method",
            "name": "renderGhost",
            "params": [
                {
                    "name": "ghostCtx",
                    "description": "The context for the ghost rendering",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1066,
            "description": "Render the selection box and handle boxes around the bounding box of this node when selected",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "renderBoundingBox",
            "params": [
                {
                    "name": "c",
                    "description": "context the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1147,
            "description": "Must be called before to start the rendering of the nodes",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "beforeRender",
            "params": [
                {
                    "name": "c",
                    "description": "context the context into render the nodes",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1179,
            "description": "Must be called after a render",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "afterRender",
            "params": [
                {
                    "name": "c",
                    "description": "The context into render the nodes",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "t",
                    "description": "isThemeInvalidated true if you need to reload theme for children of this node",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1207,
            "description": "Must be called before begin to render the nodes in GHOST mode",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "beforeRenderGhost",
            "params": [
                {
                    "name": "c",
                    "description": "context the context into render the nodes",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1222,
            "description": "Must be called before begin to render",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "afterRenderGhost",
            "params": [
                {
                    "name": "c",
                    "description": "context the context into render the nodes",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1233,
            "description": "Mark this nodes as selected",
            "itemtype": "method",
            "name": "setSelected",
            "params": [
                {
                    "name": "s",
                    "description": "is Selected",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1252,
            "description": "Returns a region which represents the total surface covered by this node and its children too.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "getCompleteRegion",
            "return": {
                "description": "",
                "type": "CGSGRegion"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1263,
            "description": "Returns a position which represents the lowest position covered between this node and its children too.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "getCompletePosition",
            "return": {
                "description": "",
                "type": "CGSGPosition"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1273,
            "description": "Returns a position which represents the highest dimension covered between this node and its children too.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "getCompleteDimension",
            "return": {
                "description": "",
                "type": "CGSGDimension"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1283,
            "description": "return this if this nodes is under the mice cursor\nCan be overrided by inherited klass to optimize this perform.\nThis default function used the ghost rendering method",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "detectSelection",
            "params": [
                {
                    "name": "pos",
                    "description": "mousePosition A CGSGPosition object",
                    "type": "CGSGPosition"
                },
                {
                    "name": "c",
                    "description": "ghost Context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "s",
                    "description": "absoluteScale",
                    "type": "CGSGScale"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1323,
            "description": "return this if this nodes is under the region\nCan be overrided by inherited klass to optimize this perform.\nThis default function used the ghost rendering method",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "detectSelectionInRegion",
            "params": [
                {
                    "name": "rg",
                    "description": "region The region to check",
                    "type": "CGSGRegion"
                },
                {
                    "name": "c",
                    "description": "ghostContext",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1370,
            "description": "Check if this nodes is under the cursor position.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "pickNode",
            "params": [
                {
                    "name": "pos",
                    "description": "mousePosition position of the mouse on the canvas",
                    "type": "CGSGPosition"
                },
                {
                    "name": "absSca",
                    "description": "absoluteScale a CGSGScale absolute relativeScale of all parents",
                    "type": "CGSGScale"
                },
                {
                    "name": "c",
                    "description": "ghostContext a copy of the canvas context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "recursively",
                    "description": "if false, don't traverse the children of this nodes",
                    "type": "Boolean"
                },
                {
                    "name": "condition",
                    "description": "Condition to be picked\nie: \"color=='yellow'\" or \"classType=='CGSGNodeImage' && this.globalAlpha>0.5\"",
                    "type": "Function"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1430,
            "description": "Return all nodes (Array) in the given region",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "pickNodes",
            "params": [
                {
                    "name": "region",
                    "description": "of the canvas to check",
                    "type": "CGSGRegion"
                },
                {
                    "name": "absoluteScale",
                    "description": "a CGSGScale absolute relativeScale of all parents",
                    "type": "CGSGScale"
                },
                {
                    "name": "ghostContext",
                    "description": "a copy of the canvas context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "recursively",
                    "description": "if false, don't traverse the children of this nodes",
                    "type": "Boolean"
                },
                {
                    "name": "condition",
                    "description": "Condition to be picked\nie: \"color=='yellow'\" or \"classType=='CGSGNodeImage' && this.globalAlpha>0.5\"",
                    "type": "Function"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1485,
            "description": "Return true if this nodes has no child",
            "itemtype": "method",
            "name": "isALeaf",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1533,
            "description": "Replace current relative position by this new one",
            "itemtype": "method",
            "name": "translateTo",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbsoluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1552,
            "description": "Add new coordinate to the current relative one",
            "itemtype": "method",
            "name": "translateWith",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbsoluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1571,
            "description": "Add new coordinate to the current relative one",
            "itemtype": "method",
            "name": "translateBy",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbsoluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1590,
            "description": "Replace current dimension by these new ones",
            "itemtype": "method",
            "name": "resizeTo",
            "params": [
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1602,
            "description": "Multiply current dimension by these new ones",
            "itemtype": "method",
            "name": "resizeTBy",
            "params": [
                {
                    "name": "wf",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "hf",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1614,
            "description": "Increase/decrease current dimension with adding values",
            "itemtype": "method",
            "name": "resizeWith",
            "params": [
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1634,
            "description": "Replace current relative relativeScale by this new one",
            "itemtype": "method",
            "name": "scaleTo",
            "params": [
                {
                    "name": "sx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "sy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbsoluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1655,
            "description": "Multiply this relativeScale factor by the current relative relativeScale",
            "itemtype": "method",
            "name": "scaleBy",
            "params": [
                {
                    "name": "sfx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "sfy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbsoluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1675,
            "description": "Add to the current relative Scale",
            "itemtype": "method",
            "name": "scaleWith",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbsoluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1695,
            "description": "Replace current relative relativeRotation by this new oneScale",
            "itemtype": "method",
            "name": "rotateTo",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbsoluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1714,
            "description": "Multiply this relativeScale factor by the current relative relativeScale",
            "itemtype": "method",
            "name": "rotateBy",
            "params": [
                {
                    "name": "af",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbsoluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1732,
            "description": "Add this angle to the current relative relativeRotation",
            "itemtype": "method",
            "name": "rotateWith",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbsoluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1752,
            "description": "Add a new nodes into this one, at the end of the list",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "newNode",
                    "description": "the nodes to add as a child",
                    "type": "CGSGNode"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1762,
            "description": "Add a new nodes at a particular index in the list of children.\nIf the index is too large, the nodes will be inserted at the end of the list",
            "itemtype": "method",
            "name": "addChildAt",
            "params": [
                {
                    "name": "newNode",
                    "description": "the nodes to insert as a child",
                    "type": "CGSGNode"
                },
                {
                    "name": "index",
                    "description": "index the position of the new child in the list",
                    "type": "Number"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1786,
            "description": "Remove the child passed in parameter and delete it",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "node",
                    "description": "the nodes to remove",
                    "type": "CGSGNode"
                },
                {
                    "name": "searchRecursively",
                    "description": "if true, search the nodes on all the tree from this nodes",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "true if the child was correctly removed or false if the nodes was not found.",
                "type": "Boolean"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1820,
            "description": "remove all children, delete them and reset the current parameters",
            "itemtype": "method",
            "name": "removeAll",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1834,
            "description": "Detach the nodes in index 'index' without delete it. So it's not a child anymore",
            "itemtype": "method",
            "name": "detachChildAt",
            "params": [
                {
                    "name": "i",
                    "description": "index",
                    "type": "Number"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1845,
            "description": "Detach the nodes without delete it. So it's not a child anymore",
            "itemtype": "method",
            "name": "detachChild",
            "params": [
                {
                    "name": "childNode",
                    "description": "",
                    "type": "CGSGNode"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1858,
            "description": "Execute/Eval the script passed in parameter in \"this\" scope.\nUsed to set new value to an attribute of a node",
            "itemtype": "method",
            "name": "evalSet",
            "params": [
                {
                    "name": "a",
                    "description": "attribute The attribute to be changed",
                    "type": "String"
                },
                {
                    "name": "v",
                    "description": "value The new value for the attribute",
                    "type": "*"
                }
            ],
            "example": [
                " node.evalSet(\"position.y\", 12);"
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1951,
            "description": "Set the region inside which one this node ca be placed an can move",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setRegionConstraint",
            "params": [
                {
                    "name": "region",
                    "description": "a CGSGRegion relatively to this parent region. Can be null.",
                    "type": "CGSGRegion"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1962,
            "description": "Set the region inside which one this node ca be placed an can move",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setNodeRegionConstraint",
            "params": [
                {
                    "name": "node",
                    "description": "a CGSGNode relatively to this parent region. Can be null.",
                    "type": "CGSGNode"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1982,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAbsPosition",
            "params": [
                {
                    "name": "recursive",
                    "description": "flag indicating if computation should be recusive or not",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "the absolute positions of this node",
                "type": "CGSGPosition"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2011,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAbsScale",
            "params": [
                {
                    "name": "recursive",
                    "description": "flag indicating if computation should be recusive or not",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "the absolute scale of this node",
                "type": "CGSGScale"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2035,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAbsRotation",
            "params": [
                {
                    "name": "recursive",
                    "description": "flag indicating if computation should be recusive or not",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "the absolute rotation of this node",
                "type": "CGSGRotation"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2060,
            "description": "Compute the absolute position, rotation and scale in the canvas container",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "computeAbsoluteMatrix",
            "params": [
                {
                    "name": "recursive",
                    "description": "if !== false, compute recursively",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2082,
            "description": "Returns the x position with the lowest value between this node and its children.",
            "itemtype": "method",
            "name": "getMinAbsoluteLeft",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2102,
            "description": "Returns the right border's position with the highest value between this node and its children.",
            "itemtype": "method",
            "name": "getMostAbsoluteRight",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2123,
            "description": "Returns the y position with the lowest value between this node and its children.",
            "itemtype": "method",
            "name": "getMinAbsoluteTop",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2143,
            "description": "Returns the bottom border's position with the highest value between this node and its children.",
            "itemtype": "method",
            "name": "getAbsBottom",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2163,
            "itemtype": "method",
            "name": "getAbsLeft",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2172,
            "itemtype": "method",
            "name": "getAbsRight",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2180,
            "itemtype": "method",
            "name": "getAbsTop",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2188,
            "itemtype": "method",
            "name": "getAbsBottom",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2196,
            "itemtype": "method",
            "name": "getAbsWidth",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2204,
            "itemtype": "method",
            "name": "getAbsHeight",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2212,
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2220,
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2228,
            "description": "Return center of the node, based on its position and dimension",
            "itemtype": "method",
            "name": "getCenter",
            "return": {
                "description": "",
                "type": "CGSGPosition"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2240,
            "description": "Test if this node is colliding the node in parameter. Don't forget to add nodes to CGSGCollisionManager.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isColliding",
            "return": {
                "description": "true if the 2 nodes are colliding. They are colliding if the distance between them is minus than the threshold parameter",
                "type": "Boolean"
            },
            "params": [
                {
                    "name": "node",
                    "description": "a CGSGNode",
                    "type": "CGSGNode"
                },
                {
                    "name": "threshold",
                    "description": "space between the 2 nodes before considering they are colliding",
                    "type": "Number"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2253,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getListOfCollidingBrothers",
            "return": {
                "description": "a Array of nodes this one is colliding with (can be empty)",
                "type": "Array"
            },
            "params": [
                {
                    "name": "threshold",
                    "description": "space between the 2 nodes before considering they are colliding",
                    "type": "Number"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2273,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isCollidingABrother",
            "params": [
                {
                    "name": "threshold",
                    "description": "space between the 2 nodes before considering they are colliding",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if this node is colliding one of the other children of its parent node",
                "type": "Boolean"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2326,
            "description": "Must be overrided by inherited classes",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "CGSGNode"
                }
            ],
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNode"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 2397,
            "description": "free memory taken by this object and it's children.\nThe 'userData' property won't be freed",
            "itemtype": "method",
            "name": "free",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.line.js",
            "line": 31,
            "itemtype": "property",
            "name": "classType",
            "readonly": "",
            "type": "{String}",
            "class": "CGSGNodeLine",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.line.js",
            "line": 39,
            "description": "Custom rendering",
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "c",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeLine",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.line.js",
            "line": 62,
            "description": "Replace current dimension by these new ones and compute new Points",
            "itemtype": "method",
            "name": "resizeTo",
            "params": [
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeLine",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.line.js",
            "line": 74,
            "description": "Multiply current dimension by these new ones",
            "itemtype": "method",
            "name": "resizeTBy",
            "params": [
                {
                    "name": "wf",
                    "description": "width Factor",
                    "type": "Number"
                },
                {
                    "name": "hf",
                    "description": "height Factor",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeLine",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.line.js",
            "line": 86,
            "description": "Increase/decrease current dimension with adding values",
            "itemtype": "method",
            "name": "resizeWith",
            "params": [
                {
                    "name": "w",
                    "description": "width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeLine",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.line.js",
            "line": 98,
            "itemtype": "method",
            "name": "_computeResizedPoints",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeLine",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.line.js",
            "line": 116,
            "description": "Find the center of the Line",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getCenter",
            "class": "CGSGNodeLine",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.line.js",
            "line": 125,
            "description": "Get the Largest x of the Line",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMaxX",
            "class": "CGSGNodeLine",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.line.js",
            "line": 143,
            "description": "Get the smallest x of the Line",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMinX",
            "class": "CGSGNodeLine",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.line.js",
            "line": 162,
            "description": "Get the Largets y of the Line",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMaxY",
            "class": "CGSGNodeLine",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.line.js",
            "line": 181,
            "description": "Get the smallest y of the Line",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMinY",
            "class": "CGSGNodeLine",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.line.js",
            "line": 200,
            "description": "Update the min and max x/y values",
            "itemtype": "method",
            "name": "updateMinMax",
            "class": "CGSGNodeLine",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.line.js",
            "line": 211,
            "description": "Set the points of the Line",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setPoints",
            "class": "CGSGNodeLine",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.line.js",
            "line": 232,
            "description": "Get the points of the Line",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getPoints",
            "class": "CGSGNodeLine",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.line.js",
            "line": 241,
            "description": "Get a point of the Line at index",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getPoint",
            "params": [
                {
                    "name": "i",
                    "description": "index",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeLine",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.line.js",
            "line": 254,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNodeLine"
            },
            "class": "CGSGNodeLine",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.logger.js",
            "line": 52,
            "description": "Radius of the corners of the panel",
            "itemtype": "property",
            "name": "cornerRadius",
            "default": "5",
            "type": "{Number}",
            "class": "CGSGNodeSliderHandle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.logger.js",
            "line": 59,
            "description": "Color of the line around the panel",
            "itemtype": "property",
            "name": "lineColor",
            "default": "\"#222222\"",
            "type": "{String}",
            "class": "CGSGNodeSliderHandle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.logger.js",
            "line": 66,
            "description": "Width of the line around the panel",
            "itemtype": "property",
            "name": "lineWidth",
            "default": "2",
            "type": "{Number}",
            "class": "CGSGNodeSliderHandle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.logger.js",
            "line": 73,
            "description": "Transparency level of the panel (between 0 and 1)",
            "itemtype": "property",
            "name": "globalAlpha",
            "default": "0.6",
            "type": "{Number}",
            "class": "CGSGNodeSliderHandle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.logger.js",
            "line": 80,
            "description": "Size of the typo",
            "itemtype": "property",
            "name": "textSize",
            "default": "12",
            "type": "{Number}",
            "class": "CGSGNodeSliderHandle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.logger.js",
            "line": 87,
            "description": "Color for the text",
            "itemtype": "property",
            "name": "textColor",
            "default": "\"white\"",
            "type": "{String}",
            "class": "CGSGNodeSliderHandle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.logger.js",
            "line": 95,
            "description": "List of attributes displayed in the panel",
            "itemtype": "property",
            "name": "_attributes",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeSliderHandle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.logger.js",
            "line": 103,
            "itemtype": "property",
            "name": "classType",
            "type": "{String}",
            "class": "CGSGNodeSliderHandle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.logger.js",
            "line": 113,
            "description": "Create the panel graph that drw the attributes",
            "itemtype": "method",
            "name": "_createPanel",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeSliderHandle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.logger.js",
            "line": 122,
            "description": "Set a new couple name/value to render onto the logger.\nIf an attribute already exists with that name, just update the value",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CGSGNodeSliderHandle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.logger.js",
            "line": 155,
            "description": "Custom rendering",
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeSliderHandle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.logger.js",
            "line": 182,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNodeLogger"
            },
            "class": "CGSGNodeSliderHandle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.slider.js",
            "line": 26,
            "description": "Get parent slider",
            "itemtype": "method",
            "name": "getParentSlider",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "parent slider",
                "type": "CGSGNodeSlider"
            },
            "class": "CGSGNodeSliderHandle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.slider.js",
            "line": 37,
            "description": "Restrain movement to x axis",
            "itemtype": "method",
            "name": "onSlide",
            "access": "protected",
            "tagname": "",
            "class": "CGSGNodeSliderHandle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.slider.js",
            "line": 62,
            "description": "Default handle rendering (A rounded square with some \"volume\" effect)",
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "c",
                    "description": "context the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeSliderHandle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.slider.js",
            "line": 142,
            "description": "Custom rendering",
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "c",
                    "description": "context the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeSlider",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.slider.js",
            "line": 157,
            "description": "Shape context to allow easy inner shadow and value rendering.",
            "itemtype": "method",
            "name": "outlineShape",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "c",
                    "description": "context the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeSlider",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.slider.js",
            "line": 178,
            "description": "Render slider background.",
            "itemtype": "method",
            "name": "renderBackground",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "c",
                    "description": "context the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeSlider",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.slider.js",
            "line": 219,
            "description": "Render slider value (Fills background with color).",
            "itemtype": "method",
            "name": "renderBackground",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "c",
                    "description": "context the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeSlider",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.slider.js",
            "line": 245,
            "description": "Render slider value (Fills background with color).",
            "itemtype": "method",
            "name": "updateSliderHandle",
            "access": "protected",
            "tagname": "",
            "class": "CGSGNodeSlider",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.slider.js",
            "line": 259,
            "description": "Set default or custom handle for this slider",
            "itemtype": "method",
            "name": "setHandle",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "handle",
                    "description": "slider's handle",
                    "type": "CGSGNode",
                    "optional": true
                }
            ],
            "class": "CGSGNodeSlider",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.slider.js",
            "line": 280,
            "description": "Get this slider's handle",
            "itemtype": "method",
            "name": "getHandle",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "[handle] slider's handle",
                "type": "CGSGNodeSliderHandle"
            },
            "class": "CGSGNodeSlider",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.slider.js",
            "line": 291,
            "description": "Set lower bound of this slider and recompute handle position",
            "itemtype": "method",
            "name": "addHandle",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "min",
                    "description": "lower bound of this slider",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeSlider",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.slider.js",
            "line": 305,
            "description": "Set upper bound of this slider and recompute handle position",
            "itemtype": "method",
            "name": "setMax",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "max",
                    "description": "upper bound of this slider",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeSlider",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.slider.js",
            "line": 319,
            "description": "Set value of this slider and recompute handle position",
            "itemtype": "method",
            "name": "setValue",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "of this slider",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeSlider",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.slider.js",
            "line": 333,
            "description": "Get value of this slider handle position in [0-1] range",
            "itemtype": "method",
            "name": "getValueAsRangeRatio",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "handle position in [0-1] range",
                "type": "Number"
            },
            "class": "CGSGNodeSlider",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.square.js",
            "line": 47,
            "itemtype": "property",
            "name": "classType",
            "readonly": "",
            "type": "{String}",
            "class": "CGSGNodeSquare",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.square.js",
            "line": 55,
            "description": "Custom rendering",
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "c",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeSquare",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.square.js",
            "line": 111,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNodeSquare"
            },
            "class": "CGSGNodeSquare",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.tabMenu.js",
            "line": 45,
            "description": "Define the class type.\nNot mandatory but very useful, as Javascript does not have a mechanism to manage the type of class",
            "itemtype": "property",
            "name": "classType",
            "type": "{String}",
            "class": "CGSGNodeTabMenu",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.tabMenu.js",
            "line": 79,
            "description": "Array of the buttons in the menu",
            "itemtype": "property",
            "name": "buttons",
            "type": "{Array} array of CGSGNodeButtons",
            "class": "CGSGNodeTabMenu",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.tabMenu.js",
            "line": 86,
            "description": "Event",
            "itemtype": "property",
            "name": "onTabChanged",
            "default": "null",
            "type": "{Function}",
            "class": "CGSGNodeTabMenu",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.tabMenu.js",
            "line": 97,
            "itemtype": "method",
            "name": "addButton",
            "params": [
                {
                    "name": "text",
                    "description": "the text on the tab",
                    "type": "String"
                },
                {
                    "name": "view",
                    "description": "the root node for the view to show when is that is activated",
                    "type": "CGSGNode"
                }
            ],
            "return": {
                "description": "The new created tab",
                "type": "Object"
            },
            "class": "CGSGNodeTabMenu",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.tabMenu.js",
            "line": 139,
            "description": "Select the tab passed in parameter",
            "itemtype": "method",
            "name": "selectTab",
            "params": [
                {
                    "name": "tab",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the selected tab",
                "type": "Object"
            },
            "class": "CGSGNodeTabMenu",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.tabMenu.js",
            "line": 177,
            "itemtype": "method",
            "name": "selectTabByIndex",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the selected tab",
                "type": "Object"
            },
            "class": "CGSGNodeTabMenu",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.tabMenu.js",
            "line": 186,
            "description": "Recompute width for all buttons",
            "itemtype": "method",
            "name": "_recomputeButtonsWidth",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeTabMenu",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 35,
            "itemtype": "property",
            "name": "WORD",
            "class": "CGSGWrapMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 39,
            "itemtype": "property",
            "name": "LETTER",
            "class": "CGSGWrapMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 43,
            "itemtype": "property",
            "name": "SENTENCE",
            "class": "CGSGWrapMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 68,
            "itemtype": "property",
            "name": "_text",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 74,
            "description": "Size of the text, in pt",
            "itemtype": "property",
            "name": "_size",
            "default": "18",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 82,
            "description": "Possible values : \"left\", \"right\", \"center\"",
            "itemtype": "property",
            "name": "_align",
            "default": "\"left\"",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 90,
            "description": "Possible values : \"top\", \"hanging\", \"middle\", \"alphabetic\", \"ideographic\", \"bottom\"",
            "itemtype": "property",
            "name": "_textBaseline",
            "default": "\"top\"",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 98,
            "itemtype": "property",
            "name": "_strokeColor",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 105,
            "itemtype": "property",
            "name": "crossed",
            "default": "false",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 113,
            "itemtype": "property",
            "name": "_style",
            "default": "\"\"",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 120,
            "itemtype": "property",
            "name": "_typo",
            "default": "\"Arial\"",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 133,
            "description": "Max width for the text. If -1, so no max will be used",
            "itemtype": "property",
            "name": "_maxWidth",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 140,
            "description": "Line height when wrap the text.\nA line height is the size between 2 tops of line",
            "itemtype": "property",
            "name": "_lineHeight",
            "default": "this._size",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 150,
            "itemtype": "property",
            "name": "_wrapMode",
            "default": "CGSGWrapMode.LETTER",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 158,
            "description": "List of sections in the text. a section is delimited by a Carriage Return",
            "itemtype": "property",
            "name": "_sections",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 166,
            "description": "The string to replace the tabulation characters",
            "itemtype": "property",
            "name": "_tabulation",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 174,
            "description": "Method to select the text",
            "itemtype": "property",
            "name": "pickNodeMethod",
            "type": "{Object}",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 181,
            "description": "Metrics of the text.\nComputed each frame it is rendered. Contains only width.\nUse getWidth() and getHeight() methods to get correct values",
            "readonly": "",
            "itemtype": "property",
            "name": "metrics",
            "type": "{Object}",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 191,
            "description": "number of lines in the text",
            "itemtype": "property",
            "name": "_nbLines",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 199,
            "itemtype": "property",
            "name": "classType",
            "type": "{String}",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 211,
            "description": "Reload theme (colors, ...) from loaded CSS file",
            "itemtype": "method",
            "name": "invalidateTheme",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 297,
            "description": "Set the wrap mode for the text if maxWidth > 0",
            "itemtype": "method",
            "name": "setWrapMode",
            "params": [
                {
                    "name": "mode",
                    "description": "a CGSGWrapMode (CGSGWrapMode.WORD, CGSGWrapMode.LETTER)",
                    "type": "Object"
                },
                {
                    "name": "mustRecomputeDimension",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n     myTextNode.setWrapMode(CGSGWrapMode.WORD, true);"
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 313,
            "description": "Set the string to replace the tabulation characters",
            "itemtype": "method",
            "name": "setTabulationString",
            "params": [
                {
                    "name": "tab",
                    "description": "TExt to replace tabulation (ie: 4 spaces, ...)",
                    "type": "String"
                },
                {
                    "name": "mustRecomputeDimension",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 328,
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "t",
                    "description": "the new text",
                    "type": "String"
                },
                {
                    "name": "mustRecomputeDimension",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 353,
            "itemtype": "method",
            "name": "setTextBaseline",
            "params": [
                {
                    "name": "b",
                    "description": "A String (Possible values : \"top\", \"hanging\", \"middle\", \"alphabetic\", \"ideographic\", \"bottom\")",
                    "type": "String"
                },
                {
                    "name": "mustRecomputeDimension",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 366,
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "s",
                    "description": "\"\" by default",
                    "type": "String"
                },
                {
                    "name": "mustRecomputeDimension",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 380,
            "description": "Line height when wrap the text.\nA line height is the size between 2 tops of line",
            "itemtype": "method",
            "name": "setLineHeight",
            "params": [
                {
                    "name": "l",
                    "description": "height of a line",
                    "type": "Number"
                },
                {
                    "name": "mustRecomputeDimension",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 395,
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "s",
                    "description": "the new size (an integer)",
                    "type": "Number"
                },
                {
                    "name": "mustRecomputeDimension",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 409,
            "itemtype": "method",
            "name": "setTypo",
            "params": [
                {
                    "name": "t",
                    "description": "\"Arial\" by default",
                    "type": "String"
                },
                {
                    "name": "mustRecomputeDimension",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 423,
            "itemtype": "method",
            "name": "setWeight",
            "params": [
                {
                    "name": "w",
                    "description": ""
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 433,
            "itemtype": "method",
            "name": "setVariant",
            "params": [
                {
                    "name": "v",
                    "description": ""
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 443,
            "itemtype": "method",
            "name": "setTextAlign",
            "params": [
                {
                    "name": "a",
                    "description": "A String (Possible values : \"left\", \"right\", \"center\")",
                    "type": "String"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 452,
            "description": "compute the real dimension of the text",
            "itemtype": "method",
            "name": "computeRealDimension",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 468,
            "itemtype": "method",
            "name": "_setMaxW",
            "params": [
                {
                    "name": "m",
                    "description": "Max Width for the text",
                    "type": "Number"
                },
                {
                    "name": "invalidDim",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 484,
            "itemtype": "method",
            "name": "setMaxWidth",
            "params": [
                {
                    "name": "m",
                    "description": "Max Width for the text",
                    "type": "Number"
                },
                {
                    "name": "invalidDim",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 494,
            "description": "Increase/decrease current dimension with adding values",
            "itemtype": "method",
            "name": "resizeWith",
            "params": [
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 520,
            "description": "Custom rendering",
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 532,
            "description": "Do the effective render",
            "itemtype": "method",
            "name": "_doRender",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "isGhostmode.",
                    "description": "If true a square will be rendered instead of the text.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 625,
            "itemtype": "method",
            "name": "_drawText",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "isGhostmode",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 671,
            "itemtype": "method",
            "name": "_drawSquare",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 683,
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 695,
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 703,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_computeDecalX",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 723,
            "description": "Browsers don't render the text in the exact same way.\nIt can be few pixels of difference in Y position",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_computeDecalY",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 748,
            "description": "Override ghost \"do rendering\" function.",
            "itemtype": "method",
            "name": "doRenderGhost",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "ghostContext",
                    "description": "The context for the ghost rendering",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 770,
            "description": "Render the resize handler",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "renderBoundingBox",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.text.js",
            "line": 851,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNodeText"
            },
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 33,
            "itemtype": "property",
            "name": "LIVE",
            "class": "CGSGWEBVIEWMODE",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 37,
            "itemtype": "property",
            "name": "PREVIEW",
            "class": "CGSGWEBVIEWMODE",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 68,
            "description": "Size of the area around the webview in LIVE mode",
            "itemtype": "property",
            "name": "threshold",
            "default": "20",
            "type": "{Number}",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 76,
            "itemtype": "property",
            "name": "classType",
            "type": "{String}",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 82,
            "description": "A CGSGNodeImage rendering the preview of the webpage",
            "itemtype": "property",
            "name": "_previewContainer",
            "type": "{CGSGNodeImage}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 90,
            "description": "URL of the web page",
            "itemtype": "property",
            "name": "_url",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 98,
            "description": "URL for the preview mode",
            "itemtype": "property",
            "name": "_previewURL",
            "access": "private",
            "tagname": "",
            "type": "{String}",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 112,
            "description": "Initialize and add the live container to the HTML body",
            "itemtype": "method",
            "name": "_initLiveContainer",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 125,
            "description": "Initialize and add the CGSGNodeImage",
            "itemtype": "method",
            "name": "_initPreviewContainer",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 141,
            "description": "Create an IFRAME tag in the _liveContainer property",
            "itemtype": "method",
            "name": "_createLiveContainer",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 156,
            "description": "Create the CGSGNodeImage to contain the preview",
            "itemtype": "method",
            "name": "_createPreviewContainer",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 177,
            "itemtype": "method",
            "name": "setURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 189,
            "description": "Get a String representing the URL",
            "itemtype": "method",
            "name": "getURL",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 198,
            "description": "Set the URL of the image for the preview mode (CGSGWEBVIEWMODE.PREVIEW)",
            "itemtype": "method",
            "name": "setPreviewURL",
            "params": [
                {
                    "name": "imageURL",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 208,
            "description": "Switch between rendering mode",
            "itemtype": "method",
            "name": "switchMode",
            "params": [
                {
                    "name": "mode",
                    "description": "a CGSGWEBVIEWMODE enum : LIVE or PREVIEW",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 229,
            "itemtype": "method",
            "name": "getCurrentMode",
            "return": {
                "description": "the current mode",
                "type": "CGSGWEBVIEWMODE"
            },
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 237,
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "render\nCustom rendering",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 275,
            "description": "Free the memory taken by this node",
            "itemtype": "method",
            "name": "free",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.webview.js",
            "line": 288,
            "description": "Return the copy of this node",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "CGSGNodeWebview"
            },
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 42,
            "itemtype": "property",
            "name": "node",
            "type": "{CGSGNode}",
            "class": "CGSGParticle",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 52,
            "description": "A void* property to let the developer store whatever he needs (new properties, ...)",
            "itemtype": "property",
            "name": "userData",
            "type": "{*}",
            "default": "null",
            "class": "CGSGParticle",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 63,
            "description": "Initialize attributes of this particle",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "init",
            "class": "CGSGParticle",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 84,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initPosition",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGParticle",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 96,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initVelocity",
            "params": [
                {
                    "name": "velocity",
                    "description": "",
                    "type": "CGSGVector2D"
                }
            ],
            "class": "CGSGParticle",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 106,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initSpeedThreshold",
            "params": [
                {
                    "name": "st",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGParticle",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 115,
            "description": "update the particle position with an Euler integration\nTODO : externalize the process to choose between RK4 and Euler integration",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "updatePosition",
            "params": [
                {
                    "name": "deltaTime",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "acceleration",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CGSGParticle",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 180,
            "itemtype": "property",
            "name": "classType",
            "type": "{String}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 187,
            "description": "the region from where the particles are emitted",
            "itemtype": "property",
            "name": "region",
            "type": "{CGSGRegion}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 193,
            "description": "number max of particles out of the emitter on 1 frame",
            "itemtype": "property",
            "name": "nbParticlesMax",
            "type": "{Number}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 199,
            "itemtype": "property",
            "name": "velocity",
            "type": "{CGSGVector2D}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 207,
            "description": "angle range of emission. a particle is emitted in the this.direction vector + or - this.angle/2 angle.",
            "itemtype": "property",
            "name": "angle",
            "type": "{Number}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 217,
            "description": "speed of a particle",
            "itemtype": "property",
            "name": "speed",
            "type": "{Number}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 226,
            "description": "threshold to randomize and add to the speed of a particle",
            "itemtype": "property",
            "name": "speedThreshold",
            "type": "{Number}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 236,
            "itemtype": "property",
            "name": "outflow",
            "type": "{Number}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 253,
            "description": "Gravity Force added by default with the addForce method",
            "itemtype": "property",
            "name": "gravity",
            "type": "{Object}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 260,
            "description": "Callback on end of update for 1 particle",
            "itemtype": "property",
            "name": "onUpdateParticleEnd",
            "default": "null",
            "type": "{function}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 267,
            "description": "Callback when reinit for 1 particle",
            "itemtype": "property",
            "name": "onInitParticle",
            "default": "null",
            "type": "{function}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 274,
            "description": "Callback when reinit all particles is done",
            "itemtype": "property",
            "name": "onInitParticlesEnd",
            "default": "null",
            "type": "{function}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 283,
            "description": "start the animation",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "start",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 292,
            "description": "stop the animation",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stop",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 301,
            "description": "reset the animation",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "reset",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 317,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 365,
            "description": "create a new particle, and add it to the emitter",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_createParticle",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 379,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initParticle",
            "params": [
                {
                    "name": "particle",
                    "description": "",
                    "type": "CGSGParticle"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 407,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "updateParticle",
            "params": [
                {
                    "name": "particle",
                    "description": "",
                    "type": "CGSGParticle"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 430,
            "description": "Add a force to the emitter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addForce",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                },
                {
                    "name": "ttl",
                    "description": "time to live of the force",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 444,
            "description": "Remove a previously added force",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeForce",
            "params": [
                {
                    "name": "force",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 476,
            "itemtype": "property",
            "name": "classType",
            "type": "{String}",
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 482,
            "description": "list of emitters",
            "itemtype": "property",
            "name": "emitters",
            "type": "{Array}",
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 488,
            "description": "list of attractors",
            "itemtype": "property",
            "name": "attractors",
            "type": "{Array}",
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 494,
            "description": "list of repulsors",
            "itemtype": "property",
            "name": "repulsors",
            "type": "{Array}",
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 511,
            "description": "Add a force to all emitters",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addForce",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                }
            ],
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 529,
            "description": "Create a new emitter and return it",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addEmitter",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "CGSGNode"
                },
                {
                    "name": "region",
                    "description": "",
                    "type": "CGSGRegion"
                },
                {
                    "name": "nbParticlesMax",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "velocity",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "speed",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "speedThreshold",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "outflow",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "CGSGParticleEmitter"
            },
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 551,
            "description": "Remove the emitter passed in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeEmitter",
            "params": [
                {
                    "name": "emitter",
                    "description": "",
                    "type": "CGSGParticleEmitter"
                }
            ],
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 562,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addAttractor",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "CGSGPosition"
                },
                {
                    "name": "strength",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "distance",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 580,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeAttractor",
            "params": [
                {
                    "name": "attractor",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 589,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addRepulsor",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "CGSGPosition"
                },
                {
                    "name": "strength",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "distance",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 607,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeRepulsor",
            "params": [
                {
                    "name": "repulsor",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 616,
            "description": "override the CGSGNode 'pickNode' method to return null due to performance",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "pickNode",
            "params": [
                {
                    "name": "mousePosition",
                    "description": ""
                },
                {
                    "name": "absoluteScale",
                    "description": ""
                },
                {
                    "name": "ghostContext",
                    "description": ""
                },
                {
                    "name": "recursively",
                    "description": ""
                },
                {
                    "name": "condition",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\node\\class.particles.js",
            "line": 631,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "copy",
            "todo": [
                ": fill the method"
            ],
            "return": {
                "description": "",
                "type": "CGSGParticleSystem"
            },
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 42,
            "itemtype": "property",
            "name": "_isLoaded",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 49,
            "description": "Event Fired when the css file is finally loaded",
            "itemtype": "property",
            "name": "onLoadEnd",
            "default": "null",
            "type": "{Function} {node:this}",
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 56,
            "description": "Event Fired when the css file failed to load",
            "itemtype": "property",
            "name": "onLoadError",
            "default": "null",
            "type": "{Function} {node:this}",
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 63,
            "description": "Event Fired when the css file loading is aborted",
            "itemtype": "property",
            "name": "onLoadAbort",
            "default": "null",
            "type": "{Function} {node:this}",
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 71,
            "description": "All css classes loaded for the current HTML document.\n[selectorText {String}, style {CSSStyleDeclaration}]",
            "itemtype": "property",
            "name": "_classes",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 80,
            "description": "List of CSS files to be ignored",
            "itemtype": "property",
            "name": "_blacklist",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 90,
            "description": "Return the value for the attribute of the class passed as parameters",
            "itemtype": "method",
            "name": "getAttr",
            "params": [
                {
                    "name": "cls",
                    "description": "Name of the CSS class",
                    "type": "String"
                },
                {
                    "name": "attr",
                    "description": "Name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 111,
            "description": "Return the value for the latest attribute of the classes passed as parameters",
            "itemtype": "method",
            "name": "getAttrInArray",
            "params": [
                {
                    "name": "clss",
                    "description": "list of CSS classes",
                    "type": "Array"
                },
                {
                    "name": "attr",
                    "description": "name of the CSS attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value for the CSS attribute",
                "type": "String"
            },
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 132,
            "itemtype": "method",
            "name": "getCls",
            "params": [
                {
                    "name": "cls",
                    "description": "Name of the CSS class",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of attributes",
                "type": "Array"
            },
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 142,
            "description": "Extract the number from an attribute's value.\nFor example getNumber(\"8px\"); will return 8.",
            "itemtype": "method",
            "name": "getNumber",
            "params": [
                {
                    "name": "attr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 163,
            "description": "Extract the number from an attribute's value.\nFor example getNumber(\"8px\"); will return 8.",
            "itemtype": "method",
            "name": "getNumber",
            "params": [
                {
                    "name": "attr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 180,
            "description": "Extract the number from an attribute's value.\nFor example getFloat(\"0.6px\"); will return 0.6.",
            "itemtype": "method",
            "name": "getFloat",
            "params": [
                {
                    "name": "attr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 208,
            "description": "Read content of all CSS files loaded and update its cache",
            "itemtype": "method",
            "name": "invalidateCache",
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 235,
            "description": "Store CSS attributes form the file in memory",
            "itemtype": "method",
            "name": "loadCSSFile",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 258,
            "description": "Unload CSS file from current HTML page.\nCache need to be invalidated after by calling {invalidateCache} method",
            "itemtype": "method",
            "name": "unloadCSSFile",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 276,
            "description": "Blacklist this file.\nCache need to be invalidated after by calling {invalidateCache} method",
            "itemtype": "method",
            "name": "ignoreCSSFile",
            "params": [
                {
                    "name": "href",
                    "description": "Must be full href path and filename",
                    "type": "String"
                }
            ],
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 286,
            "description": "used to call delegate method when the css file is finally loaded",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_createDelegate",
            "params": [
                {
                    "name": "objectContext",
                    "description": ""
                },
                {
                    "name": "delegateMethod",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 300,
            "description": "fired when the css file is loaded.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onFileLoaded",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 315,
            "description": "To be overrided when the css file failed to load",
            "itemtype": "method",
            "name": "_onFileError",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\theme\\class.CSSManager.js",
            "line": 326,
            "description": "To be overrided when the css file loading is aborted",
            "itemtype": "method",
            "name": "_onFileAbort",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "CGSGCSSManager",
            "module": "Util"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 40,
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 45,
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 52,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a new CGSGVector2D, clone of this one",
                "type": "CGSGVector2D"
            },
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 61,
            "description": "returns a new vector added to the value passed in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 71,
            "description": "add to this vector, the value passed in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addEquals",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 82,
            "description": "returns a new vector subtracted from the value passed in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 92,
            "description": "subtract to this vector, the value passed in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "subtractEquals",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 103,
            "description": "returns a new vector multiplied to the value passed in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 113,
            "description": "multiply to this vector, the value passed in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "multiplyEquals",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 124,
            "description": "return a new vector divided by the value passed in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "divide",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 134,
            "description": "divide to this vector, the value passed in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "divideEquals",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 145,
            "description": "Multiply x and y by f",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "multiplyByFloat",
            "params": [
                {
                    "name": "f",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 155,
            "description": "Multiply x and y by f",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "multiplyByFloatEquals",
            "params": [
                {
                    "name": "f",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 166,
            "description": "Divide x and y by f",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "divideByFloat",
            "params": [
                {
                    "name": "f",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 176,
            "description": "Divide x and y by f",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "divideByFloatEquals",
            "params": [
                {
                    "name": "f",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 187,
            "description": "Compute the euclidian distance between this vector and the one passe in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getDistance",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 201,
            "description": "rotate this vector around its origin",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 214,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLength",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 223,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getSquaredLength",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 232,
            "description": "Normalize this vector",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "normalize",
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 251,
            "description": "Determines if a given vector is to the right or left of this vector.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "sign",
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 262,
            "description": "Get dot product of this vector and another vector",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "dot",
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 271,
            "description": "Get cross product of this vector and another vector",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "cross",
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 280,
            "description": "Get unit vector of this vector and another vector",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "unit",
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 289,
            "description": "Get approximation of unit vector of this vector and another vector",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "unitFast",
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 306,
            "description": "Get unit vector of this vector and another vector",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "unitEquals",
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 315,
            "description": "Get a perpendicular vector of this vector",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "perp",
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 324,
            "description": "Get a vector perpendicular to this vector and another vector",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "perpendicular",
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 333,
            "description": "Get a projected vector of this vector and another vector",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "project",
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 344,
            "description": "Get a string representing this vector",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "toString",
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\math.js",
            "line": 38,
            "description": "PI x 2",
            "static": 1,
            "itemtype": "property",
            "name": "PI2",
            "class": "CGSGMath",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\math.js",
            "line": 45,
            "description": "Convert degree to radian",
            "itemtype": "method",
            "name": "deg2rad",
            "static": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The radian value",
                "type": "Number"
            },
            "class": "CGSGMath",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\math.js",
            "line": 56,
            "description": "Convert radian to degree",
            "itemtype": "method",
            "name": "rad2deg",
            "static": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The degree value",
                "type": "Number"
            },
            "class": "CGSGMath",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\math.js",
            "line": 67,
            "description": "Compute the rounded integer of n",
            "itemtype": "method",
            "name": "fixedPoint",
            "static": 1,
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The integer value",
                "type": "Number"
            },
            "class": "CGSGMath",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\math.js",
            "line": 80,
            "description": "Linear interpolation between 'from' and 'to'",
            "itemtype": "method",
            "name": "lerp",
            "static": 1,
            "params": [
                {
                    "name": "from",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "to",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "weight",
                    "description": "Percentage to apply to the first value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The interpolated value",
                "type": "Number"
            },
            "class": "CGSGMath",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.handlebox.js",
            "line": 44,
            "itemtype": "property",
            "name": "fillColor",
            "type": "{String}",
            "class": "CGSGHandleBox",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.handlebox.js",
            "line": 50,
            "itemtype": "property",
            "name": "strokeColor",
            "type": "{String}",
            "class": "CGSGHandleBox",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.handlebox.js",
            "line": 56,
            "itemtype": "property",
            "name": "lineWidth",
            "type": "{Number}",
            "class": "CGSGHandleBox",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.handlebox.js",
            "line": 62,
            "itemtype": "property",
            "name": "size",
            "type": "{Number}",
            "class": "CGSGHandleBox",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.handlebox.js",
            "line": 68,
            "itemtype": "property",
            "name": "isVisible",
            "type": "{boolean}",
            "class": "CGSGHandleBox",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.handlebox.js",
            "line": 74,
            "itemtype": "property",
            "name": "_parentNode",
            "type": "{CGSGNode}",
            "access": "private",
            "tagname": "",
            "class": "CGSGHandleBox",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.handlebox.js",
            "line": 80,
            "itemtype": "property",
            "name": "_position",
            "type": "{CGSGPosition}",
            "access": "private",
            "tagname": "",
            "class": "CGSGHandleBox",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.handlebox.js",
            "line": 88,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the handle box",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGHandleBox",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.handlebox.js",
            "line": 111,
            "description": "Return true if this handleBox is under the coordinate of the mouse.",
            "itemtype": "method",
            "name": "checkIfSelected",
            "params": [
                {
                    "name": "mousePosition",
                    "description": "",
                    "type": "CGSGPosition"
                },
                {
                    "name": "threshold",
                    "description": "Threshold of detection around the box",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CGSGHandleBox",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.handlebox.js",
            "line": 133,
            "itemtype": "method",
            "name": "translateTo",
            "params": [
                {
                    "name": "newRelativeX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "newRelativeY",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGHandleBox",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.imgManager.js",
            "line": 41,
            "itemtype": "property",
            "name": "_mapURL",
            "type": "{CGSGMap} [URL; Image]",
            "class": "CGSGImgManager",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.imgManager.js",
            "line": 48,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "or null if doesn't exist yet",
                "type": "Image"
            },
            "class": "CGSGImgManager",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.imgManager.js",
            "line": 57,
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "img",
                    "description": "",
                    "type": "Image"
                }
            ],
            "class": "CGSGImgManager",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.map.js",
            "line": 44,
            "itemtype": "method",
            "name": "getAt",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "{key, value}",
                "type": "Object"
            },
            "class": "CGSGMap",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.map.js",
            "line": 53,
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the corresponding value or null if the key does not exist",
                "type": "Object"
            },
            "class": "CGSGMap",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.map.js",
            "line": 67,
            "itemtype": "method",
            "name": "getValues",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "CGSGMap",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.map.js",
            "line": 75,
            "description": "Add or replace the key in the map with the value.",
            "itemtype": "method",
            "name": "addOrReplace",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the index of the key in the map"
            },
            "class": "CGSGMap",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.map.js",
            "line": 97,
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "CGSGMap",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.map.js",
            "line": 109,
            "description": "Remove all keys in the map",
            "itemtype": "method",
            "name": "removeAll",
            "class": "CGSGMap",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.map.js",
            "line": 118,
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "CGSGMap"
            },
            "class": "CGSGMap",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.map.js",
            "line": 130,
            "description": "Return true if the key already exists in the map",
            "itemtype": "method",
            "name": "containsKey",
            "params": [
                {
                    "name": "key",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CGSGMap",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.map.js",
            "line": 140,
            "description": "Return the number of keys in the map",
            "itemtype": "method",
            "name": "getLength",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGMap",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.map.js",
            "line": 149,
            "itemtype": "method",
            "name": "getKeyIndex",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The key index or -1 if not exists",
                "type": "Number"
            },
            "class": "CGSGMap",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 43,
            "description": "Indicates if this position meaningfully equals to the given position.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "equalsTo",
            "params": [
                {
                    "name": "position",
                    "description": "the position to compare to this position",
                    "type": "CGSGPosition"
                }
            ],
            "return": {
                "description": "true if given position exists and has same coordinates as this position, false otherwise",
                "type": "Boolean"
            },
            "class": "CGSGPosition",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 54,
            "description": "return a new object with these attributes",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "CGSGPosition"
            },
            "class": "CGSGPosition",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 64,
            "description": "Replace current relative position by this new one",
            "itemtype": "method",
            "name": "translateTo",
            "params": [
                {
                    "name": "newX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "newY",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGPosition",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 75,
            "description": "Add new coordinate to the current relative one",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "translateWith",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGPosition",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 87,
            "description": "Add new coordinate to the current relative one",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "translateBy",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGPosition",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 99,
            "description": "Return true if x<0 || y<0",
            "itemtype": "method",
            "name": "isNegative",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CGSGPosition",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 143,
            "description": "return a new object with these attributes",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "CGSGRotation"
            },
            "class": "CGSGRotation",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 153,
            "description": "Replace current angle by this new one",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "rotateTo",
            "params": [
                {
                    "name": "newAngle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGRotation",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 163,
            "description": "Multiply this angle by this factor",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "rotateBy",
            "params": [
                {
                    "name": "rotateFactor",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGRotation",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 173,
            "description": "Add this angle to the current one",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "rotateWith",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGRotation",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 183,
            "description": "Add this angle to the current one",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGRotation",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 193,
            "description": "Subtract this angle to the current one",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "substract",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGRotation",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 203,
            "description": "Multiply this angle to the current one",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGRotation",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 231,
            "description": "Alias to the x attribute",
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "CGSGDimension",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 237,
            "description": "Alias to the y attribute",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "CGSGDimension",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 245,
            "description": "Return a new object with these attributes",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "CGSGDimension"
            },
            "class": "CGSGDimension",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 254,
            "description": "Replace current dimension by these new ones",
            "itemtype": "method",
            "name": "resizeTo",
            "params": [
                {
                    "name": "newWidth",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "newHeight",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGDimension",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 269,
            "description": "Multiply current dimension by these new ones",
            "itemtype": "method",
            "name": "resizeBy",
            "params": [
                {
                    "name": "widthFactor",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "heightFactor",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGDimension",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 284,
            "description": "Increase/decrease current dimension with adding values",
            "itemtype": "method",
            "name": "resizeWith",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGDimension",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 299,
            "description": "Return true if no pixels are inside the dimension",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CGSGDimension",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 325,
            "itemtype": "property",
            "name": "position",
            "type": "{CGSGPosition}",
            "class": "CGSGRegion",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 330,
            "itemtype": "property",
            "name": "dimension",
            "type": "{CGSGDimension}",
            "class": "CGSGRegion",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 337,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "CGSGRegion"
            },
            "class": "CGSGRegion",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 345,
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "region",
                    "description": "",
                    "type": "CGSGRegion"
                }
            ],
            "class": "CGSGRegion",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 354,
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "region",
                    "description": "",
                    "type": "CGSGRegion"
                }
            ],
            "class": "CGSGRegion",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 363,
            "description": "Return true if no pixels are inside the region",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CGSGRegion",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 372,
            "description": "Return true if dimension is Empty or position is negative",
            "itemtype": "method",
            "name": "isNegative",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CGSGRegion",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.traverser.js",
            "line": 37,
            "description": "Last results provided by the last check",
            "itemtype": "property",
            "name": "lastResults",
            "type": "{Array}",
            "class": "CGSGTraverser",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.traverser.js",
            "line": 45,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "traverse",
            "params": [
                {
                    "name": "rootNode",
                    "description": "",
                    "type": "CGSGNode"
                },
                {
                    "name": "condition.",
                    "description": "can be null",
                    "type": "Function"
                },
                {
                    "name": "excludedNodes",
                    "description": "Array of CGSGNode",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the list of nodes recursively under 'rootNode', accepting the 'condition' and not in 'excludedNodes'",
                "type": "Array"
            },
            "example": [
                "\n var condition = function(node) {\n\t\t\t\t\treturn node.color == \"yellow\";\n\t\t\t\t};\n\n        var traverser = new CGSGTraverser();\n        var listSquares = traverser.traverse(this.rootNode, condition, null);\n        for (var s = 0; s < listSquares.length; s++) {\n\t\t\t\t\t...\n\t\t\t\t}"
            ],
            "class": "CGSGTraverser",
            "module": "Util"
        },
        {
            "file": "src\\utils\\class.traverser.js",
            "line": 75,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_check",
            "params": [
                {
                    "name": "rootNode",
                    "description": "",
                    "type": "CGSGNode"
                },
                {
                    "name": "condition",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "excludedNodes",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "CGSGTraverser",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.array.js",
            "line": 37,
            "itemtype": "method",
            "name": "cgsgIsArray",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "UTIL_ARRAY",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.array.js",
            "line": 46,
            "description": "Remove all the occurrences of the item from the array",
            "itemtype": "method",
            "name": "Array.prototype.without",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "class": "UTIL_ARRAY",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.array.js",
            "line": 60,
            "description": "Remove the item at the end of this array",
            "itemtype": "method",
            "name": "Array.prototype.pop",
            "class": "UTIL_ARRAY",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.array.js",
            "line": 68,
            "description": "Empty the array",
            "itemtype": "method",
            "name": "Array.prototype.clear",
            "class": "UTIL_ARRAY",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.array.js",
            "line": 76,
            "description": "Check if the array is empty",
            "itemtype": "method",
            "name": "Array.prototype.isEmpty",
            "return": {
                "description": "true if the array is empty",
                "type": "Boolean"
            },
            "class": "UTIL_ARRAY",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.array.js",
            "line": 85,
            "description": "Return a clone of this array.\nAll references will be passed as is. So a change on an object of the cloned array will also visible on this one.",
            "itemtype": "method",
            "name": "Array.prototype.clone",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "UTIL_ARRAY",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.array.js",
            "line": 95,
            "description": "Return a copy of the array.\nIf an item on this object encapsulates the \"copy\" method, this one will be called to avoid references issues",
            "itemtype": "method",
            "name": "Array.prototype.copy",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "UTIL_ARRAY",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.array.js",
            "line": 115,
            "description": "Checks whether the specified elements exists in the array or not",
            "itemtype": "method",
            "name": "Array.prototype.contains",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "UTIL_ARRAY",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.array.js",
            "line": 130,
            "description": "Removes doubles elements from the array",
            "itemtype": "method",
            "name": "Array.prototype.unique",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "UTIL_ARRAY",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.array.js",
            "line": 147,
            "description": "Compute and return the sum of all elements in this array",
            "itemtype": "method",
            "name": "Array.prototype.sum",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "UTIL_ARRAY",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.array.js",
            "line": 161,
            "description": "Compute and return the average of all the elements in this array",
            "itemtype": "method",
            "name": "Array.prototype.average",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "UTIL_ARRAY",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.color.js",
            "line": 35,
            "description": "Convert R, G and B value to an hexadecimal code",
            "itemtype": "method",
            "name": "rgb2hex",
            "static": 1,
            "params": [
                {
                    "name": "r",
                    "description": "red value. from 0 to 255.",
                    "type": "String"
                },
                {
                    "name": "g",
                    "description": "green value. from 0 to 255.",
                    "type": "String"
                },
                {
                    "name": "b",
                    "description": "blue value. from 0 to 255.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "an hexadecimal value for the color, starting with a sharp (#)",
                "type": "String"
            },
            "class": "CGSGColor",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.color.js",
            "line": 48,
            "description": "Convert an hexadecimal code for color to R, G and B",
            "itemtype": "method",
            "name": "hex2rgb",
            "static": 1,
            "params": [
                {
                    "name": "hex",
                    "description": "an hexadecimal code, with or without the starting sharp (#)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "an object encapsulating r, g and b values (from 0 to 255)",
                "type": "Object"
            },
            "class": "CGSGColor",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.color.js",
            "line": 67,
            "itemtype": "method",
            "name": "_toHex",
            "params": [
                {
                    "name": "n",
                    "description": "String or Number representation of a number between 0 and 255",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Example \"A6\"",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "CGSGColor",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.color.js",
            "line": 82,
            "description": "Convert a String to an {r,g, b} object.",
            "itemtype": "method",
            "name": "fromString",
            "params": [
                {
                    "name": "rgb",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "example": [
                "\n   CGSGColor.fromString(\"rgb(121, 333, 444)\"); returns {r:121, b:333, c:444};"
            ],
            "class": "CGSGColor",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.color.js",
            "line": 103,
            "description": "Linear interpolation between 2 colors",
            "itemtype": "method",
            "name": "lerp",
            "static": 1,
            "params": [
                {
                    "name": "colorFrom",
                    "description": "a hex color",
                    "type": "String"
                },
                {
                    "name": "colorTo",
                    "description": "a hex color",
                    "type": "String"
                },
                {
                    "name": "weight",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a heh value for the interpolated color",
                "type": "String"
            },
            "class": "CGSGColor",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.color.js",
            "line": 124,
            "itemtype": "method",
            "name": "darkenHex",
            "params": [
                {
                    "name": "hex",
                    "description": "Hexadecimal value of a color (with or without the started '#'",
                    "type": "String"
                },
                {
                    "name": "factor",
                    "description": "If >0 : lighten. If <0 : darken",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "CGSGColor",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.color.js",
            "line": 141,
            "itemtype": "method",
            "name": "darkenRGB",
            "params": [
                {
                    "name": "r",
                    "description": "Red value between 0 and 255",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "Green value between 0 and 255",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "Blue value between 0 and 255",
                    "type": "Number"
                },
                {
                    "name": "factor",
                    "description": "If >0 : lighten. If <0 : darken",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An {r, g, b} object",
                "type": "Object"
            },
            "class": "CGSGColor",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.color.js",
            "line": 166,
            "itemtype": "method",
            "name": "multiplyComponent",
            "params": [
                {
                    "name": "c",
                    "description": "color component between 0 and 25(",
                    "type": "Number"
                },
                {
                    "name": "factor",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The multiplied value, between 0 and 255",
                "type": "Number"
            },
            "class": "CGSGColor",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.color.js",
            "line": 176,
            "description": "RGB to HSV converter.\nAdapted from http://en.wikipedia.org/wiki/HSV_color_space",
            "itemtype": "method",
            "name": "rgb2hsv",
            "params": [
                {
                    "name": "r",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An {h, s, v} object",
                "type": "Object"
            },
            "class": "CGSGColor",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.color.js",
            "line": 212,
            "description": "RGB to HSL converter.\nAdapted from http://en.wikipedia.org/wiki/HSL_color_space",
            "itemtype": "method",
            "name": "rgb2hsl",
            "params": [
                {
                    "name": "r",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "CGSGColor",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.color.js",
            "line": 249,
            "description": "HSL to RGB converter.\nAdapted from http://en.wikipedia.org/wiki/HSL_color_space",
            "itemtype": "method",
            "name": "hsl2rgb",
            "params": [
                {
                    "name": "h",
                    "description": "The hue",
                    "type": "Number"
                },
                {
                    "name": "s",
                    "description": "The saturation",
                    "type": "Number"
                },
                {
                    "name": "l",
                    "description": "the lightness",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A {r, g, b} object",
                "type": "Object"
            },
            "class": "CGSGColor",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.color.js",
            "line": 276,
            "itemtype": "method",
            "name": "hue2rgb",
            "params": [
                {
                    "name": "p",
                    "description": ""
                },
                {
                    "name": "q",
                    "description": ""
                },
                {
                    "name": "t",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CGSGColor",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.color.js",
            "line": 302,
            "description": "HSV to RGB converter.\nAdapted from http://en.wikipedia.org/wiki/HSV_color_space",
            "itemtype": "method",
            "name": "hsv2rgb",
            "params": [
                {
                    "name": "h",
                    "description": "The hue",
                    "type": "Number"
                },
                {
                    "name": "s",
                    "description": "The saturation",
                    "type": "Number"
                },
                {
                    "name": "v",
                    "description": "the value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A {r, g, b} object",
                "type": "Object"
            },
            "class": "CGSGColor",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 35,
            "itemtype": "method",
            "name": "cgsgExist",
            "params": [
                {
                    "name": "o",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the parameter !== null && !== undefined && (!isNaN(o) && isFinite(o))",
                "type": "Boolean"
            },
            "class": "GLOBAL_METHODS",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 48,
            "itemtype": "method",
            "name": "cgsgDetectCurrentExplorer",
            "class": "GLOBAL_METHODS",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 117,
            "itemtype": "method",
            "name": "cgsgGetRealViewportDimension",
            "return": {
                "description": "a CGSGDimension as the real viewport dimension",
                "type": "CGSGDimension"
            },
            "class": "GLOBAL_METHODS",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 130,
            "itemtype": "method",
            "name": "cgsgGetDisplayedViewportDimension",
            "return": {
                "description": "a CGSGDimension as the viewport region",
                "type": "CGSGDimension"
            },
            "class": "GLOBAL_METHODS",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 140,
            "itemtype": "method",
            "name": "cgsgPointIsInRegion",
            "return": {
                "description": "true if the point is inside the region or around this one in a distance of threshold",
                "type": "Boolean"
            },
            "params": [
                {
                    "name": "point",
                    "description": "a CGSGPosition"
                },
                {
                    "name": "targetRegion",
                    "description": "a CGSGRegion"
                },
                {
                    "name": "threshold",
                    "description": "an integer"
                }
            ],
            "class": "GLOBAL_METHODS",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 154,
            "itemtype": "method",
            "name": "cgsgRegionIsInRegion",
            "return": {
                "description": "true if the point is inside the region or around this one in a distance of threshold",
                "type": "Boolean"
            },
            "params": [
                {
                    "name": "region",
                    "description": "a CGSGRegion"
                },
                {
                    "name": "targetRegion",
                    "description": "a CGSGRegion"
                },
                {
                    "name": "threshold",
                    "description": "an integer"
                }
            ],
            "class": "GLOBAL_METHODS",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 170,
            "description": "Return the mouse or touch positions relative to the canvas",
            "itemtype": "method",
            "name": "cgsgGetCursorPositions",
            "params": [
                {
                    "name": "event",
                    "description": "a touch or mouse Event",
                    "type": "Event"
                },
                {
                    "name": "canvas",
                    "description": "a handler to the Canvas element",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "Array of CGSGPosition object",
                "type": "Array"
            },
            "class": "GLOBAL_METHODS",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 213,
            "description": "Wipes the canvas context",
            "itemtype": "method",
            "name": "cgsgClearContext",
            "params": [
                {
                    "name": "context",
                    "description": "context to render on",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "GLOBAL_METHODS",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 225,
            "description": "Iterates the given array and, at each iteration, calls the given callback function. The loop stops if the callback\nfunction returns false.\n\nOptimized loop is used here and should be prefer to other approaches, especially on old browser versions and IE.",
            "itemtype": "method",
            "name": "cgsgIterate",
            "params": [
                {
                    "name": "array",
                    "description": "the array",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "the callback",
                    "type": "Function"
                }
            ],
            "class": "GLOBAL_METHODS",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 245,
            "description": "Iterates the given array from the end to the beginning of the array. The loop stops if the callback function returns\nfalse.\n\nPrefer to use this method for the same reasons than cgsgIterate.",
            "itemtype": "method",
            "name": "cgsgIterateReverse",
            "params": [
                {
                    "name": "array",
                    "description": "the array",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "the callback",
                    "type": "Function"
                }
            ],
            "class": "GLOBAL_METHODS",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 264,
            "description": "Free the given object and notify listeners with appropriate event.",
            "itemtype": "method",
            "name": "cgsgFree",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "GLOBAL_METHODS",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.string.js",
            "line": 26,
            "description": "Return same String without string in parameter",
            "itemtype": "method",
            "name": "String.prototype.without",
            "params": [
                {
                    "name": "t",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "CGSGSceneGraph",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.string.js",
            "line": 36,
            "description": "Return same String by replacing space, dot and minus by the following letter uppercased",
            "itemtype": "method",
            "name": "String.prototype.collapse",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "CGSGSceneGraph",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.string.js",
            "line": 51,
            "description": "Add a dot ('.') as first character if it's not already a dot",
            "itemtype": "method",
            "name": "String.prototype.addFirstDot",
            "return": {
                "description": "A String with the first '.'",
                "type": "String"
            },
            "class": "CGSGSceneGraph",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.string.js",
            "line": 64,
            "description": "Capitalize first letter of the String",
            "itemtype": "method",
            "name": "String.prototype.capitalize",
            "params": [
                {
                    "name": "lower",
                    "description": "if true, all other letters will be lowercased",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "CGSGSceneGraph",
            "module": "Util"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 42,
            "description": "Root node of the graph",
            "itemtype": "property",
            "name": "root",
            "type": "{CGSGNode}",
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 49,
            "itemtype": "property",
            "name": "context",
            "type": "{CanvasRenderingContext2D}",
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 55,
            "itemtype": "property",
            "name": "_nextNodeID",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 65,
            "description": "Initialize a ghost canvas used to determine which nodes are selected by the user",
            "itemtype": "property",
            "name": "ghostCanvas",
            "type": "{HTMLElement}",
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 79,
            "description": "Initialize the ghost rendering, used by the PickNode function",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "initializeGhost",
            "params": [
                {
                    "name": "w",
                    "description": "width The width for the canvas. Must be the same as the rendering canvas",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height The height for the canvas. Must be the same as the rendering canvas",
                    "type": "Number"
                }
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 93,
            "description": "Used to enforce theme invalidation for each node during next rendering loop",
            "itemtype": "method",
            "name": "invalidateTheme",
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 101,
            "itemtype": "method",
            "name": "_invalidateThemeRecursive",
            "params": [
                {
                    "name": "n",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 116,
            "description": "Render the SceneGraph",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 217,
            "description": "Change the dimension of the canvas.\nDoes not really change the dimension of the rendering canvas container,\n but is used for different computations",
            "itemtype": "method",
            "name": "setCanvasDimension",
            "params": [
                {
                    "name": "newDimension",
                    "description": "",
                    "type": "CGSGDimension"
                }
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 228,
            "description": "Mark the nodes as selected so the select marker (also called selectedHandlers)\n will be shown and the SceneGraph will manage the moving and resizing of the selected objects.",
            "itemtype": "method",
            "name": "selectNode",
            "params": [
                {
                    "name": "nodeToSelect",
                    "description": "The CGSGNode to be selected"
                }
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 242,
            "description": "Mark the nodes as not selected",
            "itemtype": "method",
            "name": "deselectNode",
            "params": [
                {
                    "name": "nodeToDeselect",
                    "description": "",
                    "type": "CGSGNode"
                }
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 253,
            "description": "Mark all nodes as not selected",
            "itemtype": "method",
            "name": "deselectAll",
            "params": [
                {
                    "name": "excludedArray",
                    "description": "CGSGNodes to not deselect",
                    "type": "Array"
                }
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 271,
            "description": "Recursively traverse the nodes and return the one who is under the mouse coordinates",
            "itemtype": "method",
            "name": "pickNode",
            "params": [
                {
                    "name": "mousePosition",
                    "description": "",
                    "type": "CGSGPosition"
                },
                {
                    "name": "condition",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "CGSGNode"
            },
            "example": [
                "\n this.scenegraph.picknode(mousePosition, 'position.x > 100'); <br/>\n this.scenegraph.picknode(mousePosition, 'position.x > 100 && this.position.y > 100');"
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 301,
            "description": "Recursively traverse the nodes and return the ones who are under the mouse coordinates",
            "itemtype": "method",
            "name": "pickNodes",
            "params": [
                {
                    "name": "region",
                    "description": "",
                    "type": "CGSGRegion"
                },
                {
                    "name": "condition",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "example": [
                "\n this.scenegraph.picknodes(region, 'position.x > 100'); <br/>\n this.scenegraph.picknodes(region, 'position.x > 100 && this.position.y > 100');"
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 331,
            "description": "Remove the child nodes passed in parameter, from the root nodes",
            "itemtype": "method",
            "name": "removeNode",
            "params": [
                {
                    "name": "node",
                    "description": "the nodes to remove",
                    "type": "CGSGNode"
                }
            ],
            "return": {
                "description": "true if the nodes was found and removed",
                "type": "Boolean"
            },
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 347,
            "description": "Add a node on the scene.\nIf the root does not already exist, this node will be used as root",
            "itemtype": "method",
            "name": "addNode",
            "params": [
                {
                    "name": "node",
                    "description": "the node to add",
                    "type": "CGSGNode"
                },
                {
                    "name": "parent",
                    "description": "the parent node of the new one. If it's null, the node will be the root.",
                    "type": "CGSGNode"
                }
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 28,
            "description": "Provides requestAnimationFrame in a cross browser way.",
            "itemtype": "property",
            "name": "cgsgGlobalRenderingTimer",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 95,
            "description": "Multiselection boolean.",
            "itemtype": "property",
            "name": "allowMultiSelect",
            "default": "true",
            "type": "{Boolean}",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 103,
            "description": "Fill color for the drag selection selection rectangle",
            "itemtype": "property",
            "name": "dragSelectFillColor",
            "type": "{String}",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 110,
            "description": "Stroke color for the drag selection selection rectangle",
            "itemtype": "property",
            "name": "dragSelectStrokeColor",
            "type": "{String}",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 117,
            "description": "Stroke width for the drag selection selection rectangle",
            "itemtype": "property",
            "name": "dragSelectStrokeWidth",
            "type": "{String}",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 124,
            "description": "Alpha value for the drag selection rectangle",
            "itemtype": "property",
            "name": "dragSelectAlpha",
            "default": "0.6",
            "type": "{Number}",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 151,
            "itemtype": "property",
            "name": "_isRunning",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 162,
            "itemtype": "property",
            "name": "_frameContainer Handler to the HTML Element displaying the FPS",
            "type": "{HTMLElement}",
            "access": "private",
            "tagname": "",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 169,
            "description": "True if the [CTRL} key is being pressed",
            "itemtype": "property",
            "name": "_keyDownedCtrl",
            "default": "false",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 178,
            "itemtype": "property",
            "name": "_timerDblTouch",
            "default": "null",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 186,
            "description": "The delay between 2 touches to be considered as a dbl touch event.\nTo remove the double touch, just set it to 0",
            "itemtype": "property",
            "name": "dblTouchDelay",
            "default": "CGSG_DEFAULT_DBLTOUCH_DELAY",
            "type": "{Number}",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 195,
            "description": "Current positions of the mouse or touch (Array of CGSGPosition)",
            "itemtype": "property",
            "name": "_mousePos",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 215,
            "itemtype": "property",
            "name": "_listCursors List of the names for the cursor when overring a handlebox",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 225,
            "itemtype": "property",
            "name": "_selectedNode The current last selected node",
            "type": "{null}",
            "access": "private",
            "tagname": "",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 286,
            "description": "Callback on click down on scene event.",
            "itemtype": "property",
            "name": "onSceneClickStart",
            "default": "null",
            "type": "{Function}",
            "example": [
                "\n this.onSceneClickStart = function (event) {\n     event.position; //Array of CGSGPosition\n     event.event; //Event\n }"
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 298,
            "description": "Callback on click up on scene event",
            "itemtype": "property",
            "name": "onSceneClickEnd",
            "default": "null",
            "type": "{Function}",
            "example": [
                "\n this.onSceneClickEnd = function (event) {\n     event.position; //Array of CGSGPosition\n     event.event; //Event\n }"
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 310,
            "description": "Callback on double click start on scene event",
            "itemtype": "property",
            "name": "onSceneDblClickStart",
            "default": "null",
            "type": "{Function}",
            "example": [
                "\n this.onSceneDblClickStart = function (event) {\n     event.position; //Array of CGSGPosition\n     event.event; //Event\n }"
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 322,
            "description": "Callback on double click up on scene event",
            "itemtype": "property",
            "name": "onSceneDblClickEnd",
            "default": "null",
            "type": "{Function}",
            "example": [
                "\n this.onSceneDblClickEnd = function (event) {\n     event.position; //Array of CGSGPosition\n     event.event; //Event\n }"
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 334,
            "description": "Callback on start rendering event",
            "itemtype": "property",
            "name": "onRenderStart",
            "default": "null",
            "type": "{Function}",
            "example": [
                "\n this.onSceneClickStart = function () {\n     //...\n }"
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 345,
            "description": "Callback on end rendering event",
            "itemtype": "property",
            "name": "onRenderEnd",
            "default": "null",
            "type": "{Function}",
            "example": [
                "\n this.onRenderEnd = function () {\n     //...\n }"
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 356,
            "description": "Callback on frame average changed event.",
            "itemtype": "property",
            "name": "onSceneAverageFtpChanged",
            "default": "null",
            "type": "{Function}",
            "example": [
                "\n this.onSceneAverageFtsChanged = function (event) {\n     event.fps; // The average FPS  }"
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 380,
            "itemtype": "method",
            "name": "_updateDblBuffer",
            "access": "private",
            "tagname": "",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 394,
            "description": "Change the dimension of the canvas.\nDoes not really change the dimension of the rendering canvas container,\n but is used by the different computations",
            "itemtype": "method",
            "name": "setCanvasDimension",
            "params": [
                {
                    "name": "d",
                    "description": "newDimension",
                    "type": "CGSGDimension"
                }
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 413,
            "description": "Remove the nodes selected in the scene graph",
            "itemtype": "method",
            "name": "deleteSelected",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 427,
            "description": "Deselect all nodes",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "deselectAll",
            "params": [
                {
                    "name": "excludedArray",
                    "description": "CGSGNodes not to deselect",
                    "type": "Array"
                }
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 442,
            "description": "the main rendering loop",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 498,
            "description": "Call this to start the update of the scene",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "startPlaying",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 513,
            "description": "Call this to stop the rendering (and so animation) update",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stopPlaying",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 523,
            "description": "Inform the SceneGraph that a new render is needed",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "invalidateTransformation",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 532,
            "description": "Inform the SceneGraph that all nodes must be updated with the current theme",
            "itemtype": "method",
            "name": "invalidateTheme",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 548,
            "description": "Update the current framerate",
            "itemtype": "method",
            "name": "_updateFramerate",
            "access": "private",
            "tagname": "",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 589,
            "description": "Update the innerHTML of the HTMLElement passed as parameter of the \"showFPS\" function",
            "itemtype": "method",
            "name": "_updateFramerateContainer",
            "access": "private",
            "tagname": "",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 600,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "showFPS",
            "params": [
                {
                    "name": "elt",
                    "description": "an HTML element to receive the FPS. Can be null if you want to remove the framerate",
                    "type": "HTMLElement"
                }
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 609,
            "description": "Set the new value for the display ratio.\nThe display ratio is used to resize all the elements on the graph to be adapted to the screen,\ndepending on the reference screen size.\nYou can compute the ratio like this: x = canvas.width/reference.width ; y = canvas.height/reference.height",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setDisplayRatio",
            "params": [
                {
                    "name": "ratio",
                    "description": "a CGSGScale value",
                    "type": "CGSGScale"
                }
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 625,
            "description": "Detects when the mouse leaves the canvas.",
            "itemtype": "method",
            "name": "onMouseOutHandler",
            "params": [
                {
                    "name": "e",
                    "description": "the event",
                    "type": "MouseEvent"
                }
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 634,
            "description": "click mouse Event handler function",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "e",
                    "description": "event",
                    "type": "MouseEvent"
                }
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 644,
            "description": "touch down Event handler function",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "onTouchStart",
            "params": [
                {
                    "name": "e",
                    "description": "event",
                    "type": "Event"
                }
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 671,
            "description": "Updates the current selection according to the given event.",
            "itemtype": "method",
            "name": "_updateSelection",
            "params": [
                {
                    "name": "e",
                    "description": "the event",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 734,
            "description": "This method indicates if, according to the current state of the scene, a drag selection could starts. Called\nwhen a touchStart event triggered. Could be overridden to specify different behaviour.",
            "itemtype": "method",
            "name": "_canStartDragSelection",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "the event",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "true if drag selection could starts, false otherwise",
                "type": "Boolean"
            },
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 747,
            "description": "Dispatch a 'click' event and for any selected node which is clickable and and only if 'this._isDblClick' == false.",
            "itemtype": "method",
            "name": "_dispatchClick",
            "params": [
                {
                    "name": "e",
                    "description": "the event to dispatch",
                    "type": "CGSGEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 770,
            "description": "Click on the scene",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_clickOnScene",
            "params": [
                {
                    "name": "e",
                    "description": "wrapper of MouseEvent or TouchEvent",
                    "type": "CGSGEvent"
                },
                {
                    "name": "pickNode",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 807,
            "description": "mouse move Event handler function",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "e",
                    "description": "event",
                    "type": "MouseEvent"
                }
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 817,
            "description": "touch move Event handler function",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "onTouchMove",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 832,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_moveOnScene",
            "params": [
                {
                    "name": "e",
                    "description": "MouseEvent or TouchEvent",
                    "type": "Event"
                }
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 1118,
            "description": "Detects if the mouse if over the handle box of a selected node.",
            "itemtype": "method",
            "name": "_detectResizeMode",
            "params": [
                {
                    "name": "pos",
                    "description": "the cursor position",
                    "type": "CGSGPosition"
                }
            ],
            "return": {
                "description": "true if we resize, false otherwise",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 1162,
            "itemtype": "method",
            "name": "_getDeltaOnMove",
            "params": [
                {
                    "name": "delta",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "offX",
                    "description": "nodeOffsetX",
                    "type": "Number"
                },
                {
                    "name": "offY",
                    "description": "nodeOffsetY",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "signeX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "signeY",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 1191,
            "description": "mouse up Event handler function",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "onMouseUp",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 1201,
            "description": "touch up Event handler function",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "onTouchEnd",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 1238,
            "description": "Creates the custom event by calling _upOnScene and then call _clickOnScene.",
            "itemtype": "method",
            "name": "_upAndClick",
            "params": [
                {
                    "name": "e",
                    "description": "the event",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 1252,
            "description": "Creates the custom event by calling _upOnScene and then call _dblClickOnScene.",
            "itemtype": "method",
            "name": "_upAndDblClick",
            "params": [
                {
                    "name": "e",
                    "description": "the event",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 1266,
            "itemtype": "method",
            "name": "_upOnScene",
            "params": [
                {
                    "name": "e",
                    "description": "MouseEvent or TouchEvent",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "a structure indicating is the node has been moved or resize",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 1356,
            "description": "Select the nodes under the drag select rectangle",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_doDragSelect",
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 1388,
            "description": "mouse double click Event handler function",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "onMouseDblClick",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 1400,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_dblClickOnScene",
            "params": [
                {
                    "name": "e",
                    "description": "wrapping the native event",
                    "type": "CGSGEvent"
                },
                {
                    "name": "mustPickNode",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "the node that was double-clicked",
                "type": "CGSGNode"
            },
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 1436,
            "itemtype": "method",
            "name": "onKeyDownHandler",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "KeyboardEvent"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\class.view.js",
            "line": 1454,
            "itemtype": "method",
            "name": "onKeyUpHandler",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "ee",
                    "description": "",
                    "type": "KeyboardEvent"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGView",
            "module": "Scene"
        },
        {
            "file": "src\\constants.js",
            "line": 43,
            "description": "Default ratio value for the display",
            "itemtype": "property",
            "name": "CGSG_DEFAULT_DISPLAYRATIO",
            "default": "CGSGScale(1.0, 1.0)",
            "type": "{CGSGScale}",
            "class": "GLOBAL_CONSTANTS",
            "module": "Util"
        },
        {
            "file": "src\\constants.js",
            "line": 51,
            "description": "Default fill color for the drag selection selection rectangle",
            "itemtype": "property",
            "name": "CGSG_DEFAULT_SELECTED_STROKE_COLOR",
            "default": "\"#C0C0C0\"",
            "type": "{String}",
            "class": "GLOBAL_CONSTANTS",
            "module": "Util"
        },
        {
            "file": "src\\constants.js",
            "line": 59,
            "description": "Default stroke color for the drag selection rectangle",
            "itemtype": "property",
            "name": "CGSG_DEFAULT_DRAG_SELECT_STROKE_COLOR",
            "default": "\"#808080\"",
            "type": "{String}",
            "class": "GLOBAL_CONSTANTS",
            "module": "Util"
        },
        {
            "file": "src\\constants.js",
            "line": 67,
            "description": "Default alpha value for the drag selection rectangle",
            "itemtype": "property",
            "name": "CGSG_DEFAULT_DRAG_SELECT_ALPHA",
            "default": "0.6",
            "type": "{Number}",
            "class": "GLOBAL_CONSTANTS",
            "module": "Util"
        },
        {
            "file": "src\\constants.js",
            "line": 75,
            "description": "Default threshold to detect the handle boxes on a resizable node",
            "itemtype": "property",
            "name": "CGSG_DEFAULT_SELECTED_RESIZEHANDLE_THRESHOLD",
            "default": "3",
            "type": "{Number}",
            "class": "GLOBAL_CONSTANTS",
            "module": "Util"
        },
        {
            "file": "src\\constants.js",
            "line": 83,
            "description": "Default number of frames to average the FPS.\nThe current FPS will be the average of the \"CGSG_DEFAULT_FRAMERATE_DELAY\" frames.",
            "itemtype": "property",
            "name": "CGSG_DEFAULT_FRAMERATE_DELAY",
            "default": "20 (ie: each 20 frames)",
            "type": "{Number}",
            "class": "GLOBAL_CONSTANTS",
            "module": "Util"
        },
        {
            "file": "src\\constants.js",
            "line": 92,
            "description": "Default maximum number of frames per second.",
            "itemtype": "property",
            "name": "CGSG_DEFAULT_MAX_FRAMERATE",
            "default": "NaN",
            "type": "{Number}",
            "class": "GLOBAL_CONSTANTS",
            "module": "Util"
        },
        {
            "file": "src\\constants.js",
            "line": 100,
            "description": "Default value for the double touch detection.\nThis property is the delay between 2 touches to be considered as a dbl touch event.",
            "itemtype": "property",
            "name": "CGSG_DEFAULT_DBLTOUCH_DELAY",
            "default": "250",
            "type": "{Number}",
            "class": "GLOBAL_CONSTANTS",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 33,
            "itemtype": "property",
            "name": "GHOST",
            "class": "CGSGPickNodeMethod",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 37,
            "itemtype": "property",
            "name": "REGION",
            "class": "CGSGPickNodeMethod",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 52,
            "description": "List of the parameters of different browsers",
            "itemtype": "property",
            "name": "cgsgExplorerParams",
            "type": "{Object}",
            "class": "GLOBAL_PROPERTIES",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 68,
            "description": "Current version of the browser. The framework check the browser at the start and fill this property.",
            "itemtype": "property",
            "name": "cgsgCurrentExplorer",
            "readonly": "",
            "default": "cgsgExplorerParams.UNKNOWN",
            "type": "{Object}",
            "class": "GLOBAL_PROPERTIES",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 87,
            "description": "Current version of the framework",
            "itemtype": "property",
            "name": "version",
            "static": 1,
            "type": "{String}",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 95,
            "description": "The scene graph itself",
            "itemtype": "property",
            "name": "sceneGraph",
            "default": "null",
            "type": "{CGSGSceneGraph}",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 103,
            "description": "Current display ratio",
            "itemtype": "property",
            "name": "displayRatio",
            "static": 1,
            "type": "{CGSGScale}",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 111,
            "description": "Default threshold to detect the handle boxes on a resizable node",
            "itemtype": "property",
            "name": "resizeHandleThreshold",
            "static": 1,
            "type": "{Number}",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 119,
            "description": "The current frame in hte global timeline",
            "itemtype": "property",
            "name": "currentFrame",
            "readonly": "",
            "type": "{Number}",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 127,
            "description": "The canvas container for this scene",
            "itemtype": "property",
            "name": "canvas",
            "readonly": "",
            "type": "{HTMLElement}",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 135,
            "description": "The main rendering 2D context for this scene",
            "itemtype": "property",
            "name": "context",
            "type": "{CanvasRenderingContext2D}",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 142,
            "description": "The global ghost context for fake rendering",
            "itemtype": "property",
            "name": "ghostContext",
            "readonly": "",
            "type": "{CanvasRenderingContext2D}",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 150,
            "description": "the color used for the ghost mode rendering",
            "itemtype": "property",
            "name": "ghostColor",
            "type": "{String}",
            "access": "public",
            "tagname": "",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 158,
            "description": "List of the current selected nodes in the scenegraph.",
            "itemtype": "property",
            "name": "selectedNodes",
            "type": "{Array}",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 165,
            "description": "List of the timelines for the animations.\nA timeline consists of a list of animation keys for 1 attribute of 1 node",
            "itemtype": "property",
            "name": "listTimelines",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 174,
            "description": "Number of frames to average the FPS.\nReduce this number to get more accurate FPS",
            "itemtype": "property",
            "name": "framerateDelay",
            "default": "CGSG_DEFAULT_FRAMERATE_DELAY",
            "type": "{Number}",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 183,
            "description": "Maximum number of frames per second. Set it if you want your application to slow down.",
            "itemtype": "property",
            "name": "maxFramerate",
            "default": "CGSG_DEFAULT_MAX_FRAMERATE",
            "type": "{Number}",
            "example": [
                "\n    //limit the fps of the application to 30\n    CGSG.maxFramerate : 30,"
            ],
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 194,
            "description": "Current framerate of the application",
            "itemtype": "property",
            "name": "fps",
            "type": "{Number}",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 201,
            "description": "If set to true, the bounding boxes for selected nodes will be rendered on top of the scene\nIf set to false, the bounding boxes for selected nodes will be rendered on top of the node",
            "itemtype": "property",
            "name": "isBoundingBoxOnTop",
            "default": "true",
            "type": "{Boolean}",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 210,
            "description": "Instance of CollisionTesterFactory",
            "itemtype": "property",
            "name": "collisionTestFactory",
            "type": "{CGSGCollisionTesterFactory}",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 219,
            "description": "Object that defines the performance keys.\nChange values to adapt your project.\n\nCGSG.performanceKeys._collisionMethod :\n               Key to specify collision detection mod\n               Use setCollisionMethod to modify value,\n               Default : CGSGCollisionMethod.REGION\n\nCGSG.performanceKeys.collisionTester :\n               Collision tester depending on _collisionMethod,\n               Default : CGSGCollisionRegionTester",
            "itemtype": "property",
            "name": "performanceKeys",
            "type": "{Object}",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 242,
            "description": "Redefines the collision method",
            "itemtype": "method",
            "name": "setCollisionMethod",
            "params": [
                {
                    "name": "method",
                    "description": ""
                }
            ],
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 253,
            "description": "Animation manager",
            "itemtype": "property",
            "name": "animationManager",
            "type": "{CGSGAnimationManager}",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 260,
            "description": "Event manager to use to bind events to objects.",
            "itemtype": "property",
            "name": "eventManager",
            "type": "{CGSGEventManager}",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 268,
            "description": "Default threshold apply to all new nodes when detecting selection.",
            "itemtype": "property",
            "name": "globalDetectSelectionThreshold",
            "type": "{Number}",
            "class": "CGSG",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 277,
            "description": "All kinds of events defined by the CGSceneGraph framework.",
            "itemtype": "property",
            "name": "cgsgEventTypes",
            "type": "{Object}",
            "class": "CGSG",
            "module": "Util"
        }
    ],
    "warnings": []
}