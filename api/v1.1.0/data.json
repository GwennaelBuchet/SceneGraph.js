{
    "project": {
        "name": "cgSceneGraph",
        "description": "HTML5 Scene Graph Framework",
        "version": "1.1.0",
        "url": "http://gwennaelbuchet.github.com/cgSceneGraph/"
    },
    "files": {
        "src\\animation\\class.anim.key.js": {
            "name": "src\\animation\\class.anim.key.js",
            "modules": {
                "Animation": 1
            },
            "classes": {
                "CGSGAnimationKey": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\animation\\class.anim.timeline.js": {
            "name": "src\\animation\\class.anim.timeline.js",
            "modules": {},
            "classes": {
                "CGSGTimeline": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\animation\\class.particles.js": {
            "name": "src\\animation\\class.particles.js",
            "modules": {
                "ParticleSystem": 1
            },
            "classes": {
                "CGSGParticle": 1,
                "CGSGParticleEmitter": 1,
                "CGSGParticleSystem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\effects\\class.effect.grayscale.js": {
            "name": "src\\effects\\class.effect.grayscale.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\effects\\class.effect.invertcolors.js": {
            "name": "src\\effects\\class.effect.invertcolors.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\effects\\class.effect.js": {
            "name": "src\\effects\\class.effect.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.animatedSprite.js": {
            "name": "src\\node\\class.animatedSprite.js",
            "modules": {},
            "classes": {
                "CGSGNodeAnimatedSprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.image.js": {
            "name": "src\\node\\class.image.js",
            "modules": {},
            "classes": {
                "CGSGNodeImage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.logger.js": {
            "name": "src\\node\\class.logger.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.node.js": {
            "name": "src\\node\\class.node.js",
            "modules": {
                "Node": 1
            },
            "classes": {
                "CGSGPickNodeMethod": 1,
                "CGSGNode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.shape.circle.js": {
            "name": "src\\node\\class.shape.circle.js",
            "modules": {},
            "classes": {
                "CGSGNodeCircle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.shape.ellipse.js": {
            "name": "src\\node\\class.shape.ellipse.js",
            "modules": {},
            "classes": {
                "CGSGNodeEllipse": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.shape.square.js": {
            "name": "src\\node\\class.shape.square.js",
            "modules": {},
            "classes": {
                "CGSGNodeSquare": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.text.js": {
            "name": "src\\node\\class.text.js",
            "modules": {},
            "classes": {
                "CGSGWrapMode": 1,
                "CGSGNodeText": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\node\\class.webview.js": {
            "name": "src\\node\\class.webview.js",
            "modules": {},
            "classes": {
                "CGSGWEBVIEWMODE": 1,
                "CGSGNodeWebview": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\math\\class.vector2D.js": {
            "name": "src\\utils\\math\\class.vector2D.js",
            "modules": {},
            "classes": {
                "CGSGVector2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\math\\math.js": {
            "name": "src\\utils\\math\\math.js",
            "modules": {
                "Math": 1
            },
            "classes": {
                "CGSGMath": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\class.handlebox.js": {
            "name": "src\\utils\\class.handlebox.js",
            "modules": {},
            "classes": {
                "CGSGHandleBox": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\class.region.js": {
            "name": "src\\utils\\class.region.js",
            "modules": {},
            "classes": {
                "CGSGPosition": 1,
                "CGSGScale": 1,
                "CGSGRotation": 1,
                "CGSGDimension": 1,
                "CGSGRegion": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\class.traverser.js": {
            "name": "src\\utils\\class.traverser.js",
            "modules": {},
            "classes": {
                "CGSGTraverser": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\util.array.js": {
            "name": "src\\utils\\util.array.js",
            "modules": {},
            "classes": {
                "__UTIL_ARRAY__": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\util.color.js": {
            "name": "src\\utils\\util.color.js",
            "modules": {},
            "classes": {
                "CGSGColor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\util.global.js": {
            "name": "src\\utils\\util.global.js",
            "modules": {},
            "classes": {
                "__GLOBAL_METHODS__": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\class.scene.js": {
            "name": "src\\class.scene.js",
            "modules": {
                "Scene": 1
            },
            "classes": {
                "CGSGScene": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\class.scenegraph.js": {
            "name": "src\\class.scenegraph.js",
            "modules": {},
            "classes": {
                "CGSGSceneGraph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\constants.js": {
            "name": "src\\constants.js",
            "modules": {
                "Util": 1
            },
            "classes": {
                "__GLOBAL_CONSTANTS__": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\globals.js": {
            "name": "src\\globals.js",
            "modules": {},
            "classes": {
                "__GLOBAL_PROPERTIES__": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Animation": {
            "name": "Animation",
            "submodules": {
                "ParticleSystem": 1
            },
            "classes": {
                "CGSGAnimationKey": 1,
                "CGSGTimeline": 1,
                "CGSGParticle": 1,
                "CGSGParticleEmitter": 1,
                "CGSGParticleSystem": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\animation\\class.particles.js",
            "line": 450,
            "extends": "{Object}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "frame",
                    "description": "number for this key. Must be an integer value.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "for this key. Can be a Float value",
                    "type": "Number"
                }
            ],
            "type": "{CGSGAnimationKey}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "ParticleSystem": {
            "name": "ParticleSystem",
            "submodules": {},
            "classes": {
                "CGSGParticle": 1,
                "CGSGParticleEmitter": 1,
                "CGSGParticleSystem": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Animation",
            "namespace": "",
            "file": "src\\animation\\class.particles.js",
            "line": 450,
            "is_constructor": 1,
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "CGSGNode"
                }
            ],
            "type": "{CGSGParticle}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)",
            "description": "A particle emitter for the cgSceneGraph Particle System"
        },
        "Node": {
            "name": "Node",
            "submodules": {},
            "classes": {
                "CGSGNodeAnimatedSprite": 1,
                "CGSGNodeImage": 1,
                "CGSGPickNodeMethod": 1,
                "CGSGNode": 1,
                "CGSGNodeCircle": 1,
                "CGSGNodeEllipse": 1,
                "CGSGNodeSquare": 1,
                "CGSGWrapMode": 1,
                "CGSGNodeText": 1,
                "CGSGWEBVIEWMODE": 1,
                "CGSGNodeWebview": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src\\node\\class.webview.js",
            "line": 50,
            "description": "Base class for a Node in the Scene Graph.\nEach node encapsulates its position, dimension, scale and rotation, ...",
            "extends": "Object",
            "itemtype": "main"
        },
        "Math": {
            "name": "Math",
            "submodules": {},
            "classes": {
                "CGSGVector2D": 1,
                "CGSGMath": 1,
                "CGSGHandleBox": 1,
                "CGSGPosition": 1,
                "CGSGScale": 1,
                "CGSGRotation": 1,
                "CGSGDimension": 1,
                "CGSGRegion": 1,
                "CGSGTraverser": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src\\utils\\class.traverser.js",
            "line": 26,
            "description": "Static class that encapsulates some useful methods.",
            "extends": "{Object}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "type": "{CGSGVector2D}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)",
            "itemtype": "main"
        },
        "Util": {
            "name": "Util",
            "submodules": {
                "undefined": 1
            },
            "classes": {
                "__GLOBAL_CONSTANTS__": 1,
                "__UTIL_ARRAY__": 1,
                "CGSGColor": 1,
                "__GLOBAL_METHODS__": 1,
                "__GLOBAL_PROPERTIES__": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\globals.js",
            "line": 26,
            "description": "Global constants used by the framework"
        },
        "Scene": {
            "name": "Scene",
            "submodules": {},
            "classes": {
                "CGSGScene": 1,
                "CGSGSceneGraph": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src\\class.scenegraph.js",
            "line": 26,
            "description": "Represent the scene of the application.\nIt encapsulates the scene graph itself and several methods to track mouse and touch events, ...",
            "is_constructor": 1,
            "itemtype": "main"
        }
    },
    "classes": {
        "CGSGAnimationKey": {
            "name": "CGSGAnimationKey",
            "shortname": "CGSGAnimationKey",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "src\\animation\\class.anim.key.js",
            "line": 26
        },
        "CGSGTimeline": {
            "name": "CGSGTimeline",
            "shortname": "CGSGTimeline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "namespace": "",
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 26
        },
        "CGSGParticle": {
            "name": "CGSGParticle",
            "shortname": "CGSGParticle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "submodule": "ParticleSystem",
            "namespace": "",
            "file": "src\\animation\\class.particles.js",
            "line": 26
        },
        "CGSGParticleEmitter": {
            "name": "CGSGParticleEmitter",
            "shortname": "CGSGParticleEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "submodule": "ParticleSystem",
            "namespace": "",
            "file": "src\\animation\\class.particles.js",
            "line": 152,
            "description": "A particle emitter for the cgSceneGraph Particle System",
            "extends": "{CGSGNode}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "CGSGNode"
                },
                {
                    "name": "region",
                    "description": "",
                    "type": "CGSGRegion"
                },
                {
                    "name": "nbParticlesMax",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "velocity",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "speed",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "speedThreshold",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "outflow",
                    "description": "",
                    "type": "Number"
                }
            ],
            "type": "{CGSGParticleEmitter}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "CGSGParticleSystem": {
            "name": "CGSGParticleSystem",
            "shortname": "CGSGParticleSystem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Animation",
            "submodule": "ParticleSystem",
            "namespace": "",
            "file": "src\\animation\\class.particles.js",
            "line": 450,
            "description": "A particle System object.",
            "extends": "{CGSGNode}",
            "type": "{CGSGParticleSystem}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "CGSGNodeAnimatedSprite": {
            "name": "CGSGNodeAnimatedSprite",
            "shortname": "CGSGNodeAnimatedSprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.animatedSprite.js",
            "line": 26,
            "description": "A CGSGAnimatedSprite represent an animated sprite, with all animations in the image\n\nUsage:\n  var player = new CGSGAnimatedSprite(0, 0, \"http://server.com/monimage.fr\", this.context);\nor\n  var player = new CGSGAnimatedSprite(0, 0, null, this.context);\n  player.setImage(mySharedImage); //to load 1 image with all sprites inside\n\n  //addAnimation(name, speed, number of frames, posX of first frame, posY of first frame,\n                 width of a sprite, height of a sprite, number of frame on one line in the image)\n  player.addAnimation( { name:\"walk\", speed:0.2, frames:6, sliceX:0, sliceY:0, width:32, height:32, framesPerLine } );\n\n  player.play(\"walk\"); //(\"name of the animation\"); if no 2nd parameter, will be played infinitely\n  player.play(\"walk\", null); //(\"name of the animation\", number of loops;null for infinite);\n  player.play(\"walk\", -1); //(\"name of the animation\", number of loops;-1 for infinite);\n  player.play(\"jump\", 1); //(\"name of the animation\", number of loops;-1 for infinite);",
            "extends": "{CGSGNode}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on Y",
                    "type": "Number"
                },
                {
                    "name": "urlImage",
                    "description": "URL of the image. Can be null to be set later",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "context to render on",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "type": "{CGSGNodeAnimatedSprite}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "CGSGNodeImage": {
            "name": "CGSGNodeImage",
            "shortname": "CGSGNodeImage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.image.js",
            "line": 26,
            "description": "A CGSGNodeImage represent an image node",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Relative dimension",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Relative Dimension",
                    "type": "Number"
                },
                {
                    "name": "sliceX",
                    "description": "Position of the content of this node on the src image",
                    "type": "Number"
                },
                {
                    "name": "sliceY",
                    "description": "Position of the content of this node on the src image",
                    "type": "Number"
                },
                {
                    "name": "sliceWidth",
                    "description": "Dimension of the content of this node on the src image",
                    "type": "Number"
                },
                {
                    "name": "sliceHeight",
                    "description": "Dimension of the content of this node on the src image",
                    "type": "Number"
                },
                {
                    "name": "urlImage",
                    "description": "URL of the src image. Can be null tobe loaded later.",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "context to render on",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "type": "{CGSGNodeImage}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "CGSGPickNodeMethod": {
            "name": "CGSGPickNodeMethod",
            "shortname": "CGSGPickNodeMethod",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.js",
            "line": 26,
            "description": "List the methods to check the pick on a node",
            "type": "{Object}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "CGSGNode": {
            "name": "CGSGNode",
            "shortname": "CGSGNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.node.js",
            "line": 44,
            "description": "Base class for a Node in the Scene Graph.\nEach node encapsulates its position, dimension, scale and rotation, ...",
            "extends": "Object",
            "mainName": "Node",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on Y",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Relative dimension",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Relative Dimension",
                    "type": "Number"
                }
            ],
            "type": "{CGSGNode}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "CGSGNodeCircle": {
            "name": "CGSGNodeCircle",
            "shortname": "CGSGNodeCircle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.shape.circle.js",
            "line": 26,
            "description": "A CGSGNodeCircle represent a basic circle.\nBy default, the pickNodeMethod used to detect the node under the mice is CGSGPickNodeMethod.GHOST.\nIf you don't need precision on detection on your circles, just change the property to pickNodeMethod.REGION.",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "centerX",
                    "description": "Relative position",
                    "type": "Number"
                },
                {
                    "name": "centerY",
                    "description": "Relative position",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "Radius",
                    "type": "Number"
                }
            ],
            "type": "{CGSGNodeCircle}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "CGSGNodeEllipse": {
            "name": "CGSGNodeEllipse",
            "shortname": "CGSGNodeEllipse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.shape.ellipse.js",
            "line": 26,
            "description": "A CGSGNodeEllipse represent a basic ellipse.\nBy default, the pickNodeMethod used to detect the node under the mice is CGSGPickNodeMethod.GHOST.\nIf you don't need precision on detection on your ellipses, just change the property to pickNodeMethod.REGION.",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Relative dimension",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Relative Dimension",
                    "type": "Number"
                }
            ],
            "type": "{CGSGNodeEllipse}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "CGSGNodeSquare": {
            "name": "CGSGNodeSquare",
            "shortname": "CGSGNodeSquare",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.shape.square.js",
            "line": 26,
            "description": "A CGSGNodeSquare represent a basic square",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Relative dimension",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Relative Dimension",
                    "type": "Number"
                }
            ],
            "type": "{CGSGNodeSquare}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "CGSGWrapMode": {
            "name": "CGSGWrapMode",
            "shortname": "CGSGWrapMode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.text.js",
            "line": 27,
            "description": "List the methods to wrap the text. Used by {CGSGNodeText} Node.",
            "type": "{Object}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)",
            "example": [
                "\n     myTextNode.setWrapMode(CGSGWrapMode.WORD, true);"
            ]
        },
        "CGSGNodeText": {
            "name": "CGSGNodeText",
            "shortname": "CGSGNodeText",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.text.js",
            "line": 50,
            "description": "A CGSGNodeText represent a basic circle",
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "text",
                    "description": "Text to display",
                    "type": "String"
                }
            ],
            "type": "{CGSGNodeText}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "CGSGWEBVIEWMODE": {
            "name": "CGSGWEBVIEWMODE",
            "shortname": "CGSGWEBVIEWMODE",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.webview.js",
            "line": 26,
            "description": "The different rendering mode",
            "type": "{Object}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "CGSGNodeWebview": {
            "name": "CGSGNodeWebview",
            "shortname": "CGSGNodeWebview",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Node",
            "namespace": "",
            "file": "src\\node\\class.webview.js",
            "line": 50,
            "extends": "CGSGNode",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Relative position on X",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Relative dimension",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Relative Dimension",
                    "type": "Number"
                },
                {
                    "name": "url",
                    "description": "URL of the webpage",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "type": "{CGSGNodeWebview}"
        },
        "CGSGVector2D": {
            "name": "CGSGVector2D",
            "shortname": "CGSGVector2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": "",
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 26,
            "description": "A 2D vector object"
        },
        "CGSGMath": {
            "name": "CGSGMath",
            "shortname": "CGSGMath",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": "",
            "file": "src\\utils\\math\\math.js",
            "line": 26,
            "description": "Static class that encapsulates some useful methods.",
            "mainName": "Math",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "CGSGHandleBox": {
            "name": "CGSGHandleBox",
            "shortname": "CGSGHandleBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": "",
            "file": "src\\utils\\class.handlebox.js",
            "line": 26,
            "description": "A Tiny box on selected square borders",
            "extends": "{Object}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parentNode",
                    "description": "",
                    "type": "CGSGNode"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "type": "{CGSGHandleBox}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "CGSGPosition": {
            "name": "CGSGPosition",
            "shortname": "CGSGPosition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": "",
            "file": "src\\utils\\class.region.js",
            "line": 26,
            "description": "A Position object",
            "extends": "CGSGVector2D",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "X value",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y value",
                    "type": "Number"
                }
            ],
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)",
            "type": "{CGSGPosition}"
        },
        "CGSGScale": {
            "name": "CGSGScale",
            "shortname": "CGSGScale",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": "",
            "file": "src\\utils\\class.region.js",
            "line": 89,
            "description": "A Scale object",
            "extends": "CGSGPosition",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "X value",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y value",
                    "type": "Number"
                }
            ],
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)",
            "type": "{CGSGScale}"
        },
        "CGSGRotation": {
            "name": "CGSGRotation",
            "shortname": "CGSGRotation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": "",
            "file": "src\\utils\\class.region.js",
            "line": 107,
            "description": "A Rotation object",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "Angle value",
                    "type": "Number"
                }
            ],
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)",
            "type": "{CGSGRotation}"
        },
        "CGSGDimension": {
            "name": "CGSGDimension",
            "shortname": "CGSGDimension",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": "",
            "file": "src\\utils\\class.region.js",
            "line": 194,
            "description": "A Dimension object",
            "extends": "CGSGVector2D",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)",
            "type": "{CGSGDimension}"
        },
        "CGSGRegion": {
            "name": "CGSGRegion",
            "shortname": "CGSGRegion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": "",
            "file": "src\\utils\\class.region.js",
            "line": 281,
            "description": "A Region object encapsulates a CGSGPosition and a CGSGDimension",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Position on X",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Position on Y",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "Dimension on Width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Dimension on Height",
                    "type": "Number"
                }
            ],
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)",
            "type": "{CGSGRegion}"
        },
        "CGSGTraverser": {
            "name": "CGSGTraverser",
            "shortname": "CGSGTraverser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "namespace": "",
            "file": "src\\utils\\class.traverser.js",
            "line": 26,
            "description": "A Traverser is an utility class that traverse the scene graph and return a list of node, depending on conditions you fixed",
            "extends": "Object",
            "is_constructor": 1,
            "type": "{CGSGTraverser}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "__UTIL_ARRAY__": {
            "name": "__UTIL_ARRAY__",
            "shortname": "__UTIL_ARRAY__",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\utils\\util.array.js",
            "line": 26,
            "description": "Some utils methods extending the Array prototype",
            "static": 1,
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "CGSGColor": {
            "name": "CGSGColor",
            "shortname": "CGSGColor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\utils\\util.color.js",
            "line": 26,
            "description": "Some utils methods extending the Array prototype",
            "static": 1,
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "__GLOBAL_METHODS__": {
            "name": "__GLOBAL_METHODS__",
            "shortname": "__GLOBAL_METHODS__",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\utils\\util.global.js",
            "line": 26,
            "description": "Global methods",
            "static": 1,
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "CGSGScene": {
            "name": "CGSGScene",
            "shortname": "CGSGScene",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Scene",
            "namespace": "",
            "file": "src\\class.scene.js",
            "line": 62,
            "description": "Represent the scene of the application.\nIt encapsulates the scene graph itself and several methods to track mouse and touch events, ...",
            "is_constructor": 1,
            "mainName": "Scene",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "extends": "{Object}",
            "params": [
                {
                    "name": "canvas",
                    "description": "a handler to the canvas HTML element",
                    "type": "HTMLElement"
                }
            ],
            "type": "{CGSGScene}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "CGSGSceneGraph": {
            "name": "CGSGSceneGraph",
            "shortname": "CGSGSceneGraph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Scene",
            "namespace": "",
            "file": "src\\class.scenegraph.js",
            "line": 26,
            "description": "Represent the scene graph it self.\nIt encapsulates the root node and list of timelines for animations",
            "is_constructor": 1,
            "extends": "{Object}",
            "params": [
                {
                    "name": "canvas",
                    "description": "a handler to the canvas HTML element",
                    "type": "HTMLElement"
                },
                {
                    "name": "context",
                    "description": "context to render on",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "type": "{CGSGSceneGraph}",
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "__GLOBAL_CONSTANTS__": {
            "name": "__GLOBAL_CONSTANTS__",
            "shortname": "__GLOBAL_CONSTANTS__",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\constants.js",
            "line": 26,
            "description": "Global constants used by the framework",
            "static": 1,
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        },
        "__GLOBAL_PROPERTIES__": {
            "name": "__GLOBAL_PROPERTIES__",
            "shortname": "__GLOBAL_PROPERTIES__",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Util",
            "namespace": "",
            "file": "src\\globals.js",
            "line": 26,
            "description": "Global properties of the framework",
            "static": 1,
            "author": "Gwennael Buchet (gwennael.buchet@capgemini.com)"
        }
    },
    "classitems": [
        {
            "file": "src\\animation\\class.anim.key.js",
            "line": 39,
            "itemtype": "property",
            "name": "frame",
            "type": "{Number}",
            "class": "CGSGAnimationKey",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.key.js",
            "line": 44,
            "itemtype": "property",
            "name": "value",
            "type": "{Number}",
            "class": "CGSGAnimationKey",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 41,
            "description": "The animated nodes",
            "itemtype": "property",
            "name": "parentNode",
            "type": "{CGSGNode}",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 48,
            "description": "A string representing the attribute to be animated (eg: \"position.x\", \"rotation.angle\", \"fill\", ...)",
            "itemtype": "property",
            "name": "attribute",
            "type": "{String}",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 61,
            "description": "list of the [frame, value] pairs for the animation\nthe index of the list begins at 0, not at the first key frame",
            "itemtype": "property",
            "name": "listValues",
            "type": "{Array}",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 76,
            "description": "Callback on animation start event",
            "itemtype": "property",
            "name": "onAnimationStart",
            "type": "{function}",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 82,
            "description": "Callback on animation end event",
            "itemtype": "property",
            "name": "onAnimationEnd",
            "type": "{function}",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 90,
            "description": "Add a new animation key frame to the timeline and sort the timeline by frame number",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addKey",
            "params": [
                {
                    "name": "frame.",
                    "description": "Must be an integer value.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 108,
            "description": "Remove the key at the specified frame",
            "itemtype": "method",
            "name": "removeKey",
            "params": [
                {
                    "name": "frame",
                    "description": "Must be an integer value.",
                    "type": "Number"
                }
            ],
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 130,
            "description": "Remove all keys and values",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeAll",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 141,
            "description": "Compute the number of steps between all keys, 2 by 2",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_computeStepsValues",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 157,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getNbKeys",
            "return": {
                "description": "the number of keys in this timeline. Must be an integer value.",
                "type": "Number"
            },
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 166,
            "description": "Sort the list of keys by frame number",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "sortByFrame",
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 177,
            "description": "Compute all the values (steps) for the animation of this timeline",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "computeValues",
            "params": [
                {
                    "name": "fromFrame",
                    "description": "first frame at which one the computing must start. Must be an integer value.",
                    "type": "Number"
                },
                {
                    "name": "method",
                    "description": "interpolation method : \"linear\", \"catmullrom\". If method is specified, it replaces the method\n for this timeline instance",
                    "type": "String"
                }
            ],
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 211,
            "description": "Compute animated value for one frame between key ay index keyIndex and keyIndex+1",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "computeValue",
            "params": [
                {
                    "name": "keyIndex",
                    "description": "Must be an integer value.",
                    "type": "Number"
                },
                {
                    "name": "frame",
                    "description": "Must be an integer value.",
                    "type": "Number"
                },
                {
                    "name": "method",
                    "description": "= \"linear\"",
                    "type": "String"
                }
            ],
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 239,
            "itemtype": "method",
            "name": "getFirstKey",
            "return": {
                "description": "the first key frame of this timeline",
                "type": "CGSGAnimationKey"
            },
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 251,
            "itemtype": "method",
            "name": "getLastKey",
            "return": {
                "description": "the last key frame of this timeline",
                "type": "CGSGAnimationKey"
            },
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 263,
            "description": "Get the value for the frame number passed in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "frame",
                    "description": "the frame bound with the returned value. Must be an integer value.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the interpolated value of the attribute at the specified frame\nIf no key is defined, return undefined\nIf there is only one key, return it's value\nIf the frame is before the first key, return the first key value\nIf the frame is after the last key, return the last key value",
                "type": "Number"
            },
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 321,
            "description": "Return the precomputed array of values for this timeline",
            "itemtype": "method",
            "name": "exportValues",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.anim.timeline.js",
            "line": 338,
            "description": "Import new precomputed values for this timeline.\nThe number of values must match the number of frame defined by the keys of this timeline",
            "itemtype": "method",
            "name": "importValues",
            "params": [
                {
                    "name": "newValues",
                    "description": "of new values",
                    "type": "Array"
                },
                {
                    "name": "startFrame",
                    "description": "Must be an integer value.",
                    "type": "Number"
                }
            ],
            "class": "CGSGTimeline",
            "module": "Animation"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 38,
            "itemtype": "property",
            "name": "node",
            "type": "{CGSGNode}",
            "class": "CGSGParticle",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 51,
            "description": "Initialize attributes of this particle",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "init",
            "class": "CGSGParticle",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 71,
            "description": "Initialize the TTL of",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initTTL",
            "params": [
                {
                    "name": "ttl",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGParticle",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 82,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initPosition",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGParticle",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 94,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initVelocity",
            "params": [
                {
                    "name": "velocity",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGParticle",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 104,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initSpeedThreshold",
            "params": [
                {
                    "name": "st",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGParticle",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 113,
            "description": "update the particle position with an Euler integration\nTODO : externalize the process to choose between RK4 and Euler integration",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "updatePosition",
            "params": [
                {
                    "name": "deltaTime",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "acceleration",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CGSGParticle",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 176,
            "itemtype": "property",
            "name": "classType",
            "type": "{String}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 183,
            "description": "the region from where the particles are emitted",
            "itemtype": "property",
            "name": "region",
            "type": "{CGSGRegion}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 189,
            "description": "number max of particles out of the emitter on 1 frame",
            "itemtype": "property",
            "name": "nbParticlesMax",
            "type": "{Number}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 195,
            "itemtype": "property",
            "name": "velocity",
            "type": "{CGSGVector2D}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 203,
            "description": "angle range of emission. a particle is emitted in the this.direction vector + or - this.angle/2 angle.",
            "itemtype": "property",
            "name": "angle",
            "type": "{Number}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 213,
            "description": "speed of a particle",
            "itemtype": "property",
            "name": "speed",
            "type": "{Number}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 222,
            "description": "threshold to randomize and add to the speed of a particle",
            "itemtype": "property",
            "name": "speedThreshold",
            "type": "{Number}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 232,
            "itemtype": "property",
            "name": "outflow",
            "type": "{Number}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 249,
            "description": "Gravity Force added by default with the addForce method",
            "itemtype": "property",
            "name": "gravity",
            "type": "{Object}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 256,
            "description": "Callback on end of update for 1 particle",
            "itemtype": "property",
            "name": "onUpdateParticleEnd",
            "default": "null",
            "type": "{function}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 263,
            "description": "Callback when reinit for 1 particle",
            "itemtype": "property",
            "name": "onInitParticle",
            "default": "null",
            "type": "{function}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 270,
            "description": "Callback when reinit all particles is done",
            "itemtype": "property",
            "name": "onInitParticlesEnd",
            "default": "null",
            "type": "{function}",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 279,
            "description": "start the animation",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "start",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 288,
            "description": "stop the animation",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stop",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 297,
            "description": "reset the animation",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "reset",
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 314,
            "override": "",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 362,
            "description": "create a new particle, and add it to the emitter",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_createParticle",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 375,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "updateParticle",
            "params": [
                {
                    "name": "particle",
                    "description": "",
                    "type": "CGSGParticle"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 393,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initParticle",
            "params": [
                {
                    "name": "particle",
                    "description": "",
                    "type": "CGSGParticle"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 418,
            "description": "Add a force to the emitter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addForce",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                },
                {
                    "name": "ttl",
                    "description": "time to live of the force",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 432,
            "description": "Remove a previously added force",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeForce",
            "params": [
                {
                    "name": "force",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "CGSGParticleEmitter",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 464,
            "itemtype": "property",
            "name": "classType",
            "type": "{String}",
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 470,
            "description": "list of emitters",
            "itemtype": "property",
            "name": "emitters",
            "type": "{Array}",
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 476,
            "description": "list of attractors",
            "itemtype": "property",
            "name": "attractors",
            "type": "{Array}",
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 482,
            "description": "list of repulsors",
            "itemtype": "property",
            "name": "repulsors",
            "type": "{Array}",
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 499,
            "description": "Add a force to all emitters",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addForce",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                }
            ],
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 517,
            "description": "Create a new emitter and return it",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addEmitter",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "CGSGNode"
                },
                {
                    "name": "region",
                    "description": "",
                    "type": "CGSGRegion"
                },
                {
                    "name": "nbParticlesMax",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "velocity",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "speed",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "speedThreshold",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "outflow",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "CGSGParticleEmitter"
            },
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 539,
            "description": "Remove the emitter passed in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeEmitter",
            "params": [
                {
                    "name": "emitter",
                    "description": "",
                    "type": "CGSGParticleEmitter"
                }
            ],
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 550,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addAttractor",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "CGSGPosition"
                },
                {
                    "name": "strength",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "distance",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 568,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeAttractor",
            "params": [
                {
                    "name": "attractor",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 577,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addRepulsor",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "CGSGPosition"
                },
                {
                    "name": "strength",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "distance",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 595,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeRepulsor",
            "params": [
                {
                    "name": "repulsor",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 604,
            "description": "override the CGSGNode 'pickNode' method to return null due to performance",
            "override": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "pickNode",
            "params": [
                {
                    "name": "mousePosition",
                    "description": ""
                },
                {
                    "name": "absoluteScale",
                    "description": ""
                },
                {
                    "name": "ghostContext",
                    "description": ""
                },
                {
                    "name": "recursively",
                    "description": ""
                },
                {
                    "name": "canvasWidth",
                    "description": ""
                },
                {
                    "name": "canvasHeight",
                    "description": ""
                },
                {
                    "name": "condition",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\animation\\class.particles.js",
            "line": 623,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "copy",
            "todo": [
                ": TODO fill the method"
            ],
            "return": {
                "description": "",
                "type": "CGSGParticleSystem"
            },
            "class": "CGSGParticleSystem",
            "module": "Animation",
            "submodule": "ParticleSystem"
        },
        {
            "file": "src\\effects\\class.effect.grayscale.js",
            "line": 41,
            "description": "This function must be filled by the inherited classes.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "context",
                    "description": "context containing the image",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "width",
                    "description": "width for the image to be modified",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "height for the image to be modified",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeAnimatedSprite",
            "module": "Animation"
        },
        {
            "file": "src\\effects\\class.effect.invertcolors.js",
            "line": 41,
            "description": "This function must be filled by the inherited classes.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "context",
                    "description": "context containing the image",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "width",
                    "description": "width for the image to be modified",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "height for the image to be modified",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeAnimatedSprite",
            "module": "Animation"
        },
        {
            "file": "src\\effects\\class.effect.js",
            "line": 40,
            "description": "This function must be filled by the inherited classes.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "context",
                    "description": "context containing the image",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "width",
                    "description": "width for the image to be modified",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "height for the image to be modified",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeAnimatedSprite",
            "module": "Animation"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 60,
            "itemtype": "property",
            "name": "classType",
            "type": "{String}",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 66,
            "description": "array of animations",
            "itemtype": "property",
            "name": "listAnimations",
            "type": "{Array}",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 72,
            "itemtype": "property",
            "name": "currentAnimation",
            "default": "null",
            "type": "{Object}",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 78,
            "itemtype": "property",
            "name": "isProportionalResize",
            "default": "true",
            "type": "{Boolean}",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 85,
            "description": "Current animated frame",
            "itemtype": "property",
            "name": "_currentFrame",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 92,
            "description": "Whether the sprite is being animated or not",
            "itemtype": "property",
            "name": "_isPlaying",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "type": "{Boolean}",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 101,
            "description": "number of loops for the current animation. if -1 then it's an infinite loop.",
            "itemtype": "property",
            "name": "_numberOfLoops",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 108,
            "description": "Current loop number",
            "itemtype": "property",
            "name": "_currentLoop",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 116,
            "description": "URL of the image",
            "itemtype": "property",
            "name": "_urlImage",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 123,
            "description": "The image object itself",
            "itemtype": "property",
            "name": "_img",
            "type": "{Image}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 131,
            "itemtype": "property",
            "name": "_isLoaded",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 137,
            "itemtype": "property",
            "name": "_context",
            "type": "{CanvasRenderingContext2D}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 144,
            "description": "Handler function fired when the image is loaded",
            "itemtype": "property",
            "name": "onLoadEnd",
            "default": "null",
            "type": "{Function}",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 151,
            "description": "Handler function fired after an animation loop is ended",
            "itemtype": "property",
            "name": "onAnimationEnd",
            "default": "null",
            "type": "{Function}",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 158,
            "description": "Handler function fired before an animation loop start",
            "itemtype": "property",
            "name": "onAnimationStart",
            "default": "null",
            "type": "{Function}",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 166,
            "description": "fake canvas to pre-render the animated sprite (not used yet)",
            "itemtype": "property",
            "name": "_tmpCanvas",
            "type": "{HTMLElement}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 182,
            "description": "used to call delegate method when the image is finally loaded",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_createDelegate",
            "params": [
                {
                    "name": "objectContext",
                    "description": ""
                },
                {
                    "name": "delegateMethod",
                    "description": ""
                },
                {
                    "name": "renderContext",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 197,
            "description": "fired when the image is loaded.\nCheck the dimension of the image and fired the onLoadEnd event",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_onImageLoaded",
            "params": [
                {
                    "name": "context",
                    "description": "context to render on",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 214,
            "description": "To be overrided when the image failed to load",
            "itemtype": "method",
            "name": "_onImageError",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": "context to render on",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 241,
            "description": "Check the true dimension of the image and fill the this.dimension property with it,\nonly if dimension is not already defined in the constructor",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_checkDimension",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 255,
            "description": "Set the image for this animated sprite.",
            "example": [
                "\n\nthis.pingoo = new CGSGNodeAnimatedSprite(60, 60, null, this.context);\nthis.pingoo.isDraggable = true;\n//name, speed, frames, sliceX, sliceY, width, height, framesPerLine\nthis.pingoo.addAnimation(\"front\", 6, 4, 476, 0, 34, 34, 4);\nthis.pingoo.play(\"front\", null);\n\n//now, load the image containing the sprite sheet.\n//The affectation to the sprite will be done in the loaded handler function\nthis.spriteSheet = new Image();\nthis.spriteSheet.onload = this.onImageLoaded();\nthis.spriteSheet.src = \"images/board.png\";\n\nonImageLoaded : function () {\n\t this.pingoo.setImage(this.spriteSheet);\n\t this.numbers.setImage(this.spriteSheet);\n  this.water.setImage(this.spriteSheet);\n}"
            ],
            "itemtype": "method",
            "name": "setImage",
            "params": [
                {
                    "name": "newImage",
                    "description": "new Image object. Must be an already loaded one",
                    "type": "Image"
                }
            ],
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 289,
            "description": "Go to the next frame of the current animation",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "goToNextFrame",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 316,
            "description": "Go to the previous frame of the current animation",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "goToPreviousFrame",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 342,
            "description": "Go to the first frame of the current loop",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "goToFirstFrame",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 351,
            "description": "Go to the last frame of the current loop",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "goToLastFrame",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 360,
            "description": "Must be defined to allow the scene graph to render the image nodes",
            "override": "",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": "the context to render on",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "itemtype": "method",
            "name": "render",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 403,
            "description": "Return position x and y in the image for the slice of the animation and frame passed in parameter.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getSlice",
            "params": [
                {
                    "name": "frame",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "animation",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 421,
            "description": "Add an animation for this sprite",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addAnimation",
            "params": [
                {
                    "name": "name",
                    "description": "Name for this animation",
                    "type": "String"
                },
                {
                    "name": "speed",
                    "description": "Number of frames between 2 steps",
                    "type": "Number"
                },
                {
                    "name": "frames",
                    "description": "Number of frame for this animation",
                    "type": "Number"
                },
                {
                    "name": "sliceX",
                    "description": "slice position inside the image for this animation",
                    "type": "Number"
                },
                {
                    "name": "sliceY",
                    "description": "slice position inside the image for this animation",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "width of 1 frame",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "height of 1 frame",
                    "type": "Number"
                },
                {
                    "name": "framesPerLine",
                    "description": "Number of frames per line in the image",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 457,
            "description": "Start an animation",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "animationName",
                    "description": "Name of the animation to start",
                    "type": "String"
                },
                {
                    "name": "loop",
                    "description": "number of animation loop. Can be null or negative to set infinite loop",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if the animation exists; false otherwise",
                "type": "Boolean"
            },
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 487,
            "description": "Stop the current animation and stay on the current frame",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stop",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 499,
            "description": "return to the first frame of the first loop of the current animation",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "reset",
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.animatedSprite.js",
            "line": 509,
            "override": "",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNodeAnimatedSprite"
            },
            "class": "CGSGNodeAnimatedSprite",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 50,
            "itemtype": "property",
            "name": "classType",
            "type": "{String}",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 56,
            "description": "the selected effect to be applied",
            "itemtype": "property",
            "name": "effect",
            "default": "null",
            "type": "{CGSGEffect}",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 63,
            "description": "URL of the image",
            "itemtype": "property",
            "name": "_urlImage",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 71,
            "itemtype": "property",
            "name": "isProportionalResize",
            "default": "true",
            "type": "{Boolean}",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 77,
            "description": "the image object itself",
            "itemtype": "property",
            "name": "_img",
            "type": "{Image}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 84,
            "description": "the region on the image to render",
            "itemtype": "property",
            "name": "slice",
            "type": "{CGSGRegion}",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 92,
            "itemtype": "property",
            "name": "_isLoaded",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 98,
            "itemtype": "property",
            "name": "_context",
            "type": "{CanvasRenderingContext2D}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 105,
            "description": "Event Fired when the image is finally loaded",
            "itemtype": "property",
            "name": "onLoadEnd",
            "default": "null",
            "type": "{Function}",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 113,
            "description": "Fake canvas to pre-render the image",
            "itemtype": "property",
            "name": "_tmpCanvas",
            "type": "{HTMLElement}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 131,
            "description": "used to call delegate method when the image is finally loaded",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_createDelegate",
            "params": [
                {
                    "name": "objectContext",
                    "description": ""
                },
                {
                    "name": "delegateMethod",
                    "description": ""
                },
                {
                    "name": "renderContext",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 146,
            "description": "fired when the image is loaded.\nCheck the dimension of the image and fired the onLoadEnd event",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onImageLoaded",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 163,
            "description": "To be overrided when the image failed to load",
            "itemtype": "method",
            "name": "_onImageError",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "context",
                    "description": ""
                }
            ],
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 172,
            "description": "Check the true dimension of the image and fill the this.dimension property with it,\nonly if dimension is not already defined in the constructor",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_checkDimension",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 192,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setImage",
            "params": [
                {
                    "name": "newImage",
                    "description": "new Image object. Must bea already loaded before",
                    "type": "Image"
                }
            ],
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 207,
            "description": "pre-render the image into _tmpCanvas to optimize the perfs",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_initShape",
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 227,
            "description": "Must be defined to allow the scene graph to render the image nodes",
            "override": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "context",
                    "description": "the context to render on",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 257,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setEffect",
            "params": [
                {
                    "name": "effect",
                    "description": "",
                    "type": "CGSGEffect"
                }
            ],
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 266,
            "description": "Ghost rendering function.\nRender here your custom nodes with a single color (cgsgGhostColor).\nThis will be used by the SceneGraph to know if the mouse cursor is over this nodes.",
            "override": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "renderGhost",
            "params": [
                {
                    "name": "ghostContext",
                    "description": "The context for the ghost rendering",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 294,
            "description": "Increase/decrease current dimension with adding values. It is used when the user resize\nthe image with the handle boxes",
            "override": "",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "resizeWith",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.image.js",
            "line": 309,
            "override": "",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNodeImage"
            },
            "class": "CGSGNodeImage",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.logger.js",
            "line": 50,
            "description": "background color of the panel",
            "itemtype": "property",
            "name": "color",
            "default": "\"#444444\"",
            "type": "{String}",
            "class": "CGSGPickNodeMethod",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.logger.js",
            "line": 57,
            "description": "Radius of the corners of the panel",
            "itemtype": "property",
            "name": "cornerRadius",
            "default": "5",
            "type": "{Number}",
            "class": "CGSGPickNodeMethod",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.logger.js",
            "line": 64,
            "description": "Color of the line around the panel",
            "itemtype": "property",
            "name": "lineColor",
            "default": "\"#222222\"",
            "type": "{String}",
            "class": "CGSGPickNodeMethod",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.logger.js",
            "line": 71,
            "description": "Width of the line around the panel",
            "itemtype": "property",
            "name": "lineWidth",
            "default": "2",
            "type": "{Number}",
            "class": "CGSGPickNodeMethod",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.logger.js",
            "line": 78,
            "description": "Transparency level of the panel (between 0 and 1)",
            "itemtype": "property",
            "name": "globalAlpha",
            "default": "0.6",
            "type": "{Number}",
            "class": "CGSGPickNodeMethod",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.logger.js",
            "line": 85,
            "description": "Size of the typo",
            "itemtype": "property",
            "name": "textSize",
            "default": "12",
            "type": "{Number}",
            "class": "CGSGPickNodeMethod",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.logger.js",
            "line": 92,
            "description": "Color for the text",
            "itemtype": "property",
            "name": "textColor",
            "default": "\"white\"",
            "type": "{String}",
            "class": "CGSGPickNodeMethod",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.logger.js",
            "line": 100,
            "description": "List of attributes displayed in the panel",
            "itemtype": "property",
            "name": "_attributes",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "CGSGPickNodeMethod",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.logger.js",
            "line": 108,
            "itemtype": "property",
            "name": "classType",
            "type": "{String}",
            "class": "CGSGPickNodeMethod",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.logger.js",
            "line": 118,
            "description": "Create the panel graph that drw the attributes",
            "itemtype": "method",
            "name": "_createPanel",
            "access": "private",
            "tagname": "",
            "class": "CGSGPickNodeMethod",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.logger.js",
            "line": 127,
            "description": "Set a new couple name/value to render onto the logger.\nIf an attribute already exists with that name, just update the value",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CGSGPickNodeMethod",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.logger.js",
            "line": 160,
            "description": "Custom rendering",
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "override": "",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGPickNodeMethod",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.logger.js",
            "line": 195,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNodeLogger"
            },
            "class": "CGSGPickNodeMethod",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 33,
            "itemtype": "property",
            "name": "GHOST",
            "class": "CGSGPickNodeMethod",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 37,
            "itemtype": "property",
            "name": "REGION",
            "class": "CGSGPickNodeMethod",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 63,
            "description": "The name of this nodes. Should be unique, but no control is done.",
            "itemtype": "property",
            "name": "name",
            "default": "\"\"",
            "type": "{String}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 70,
            "description": "Indicate whether this node is selected or not.\nUse CGSGScene::scenegraph.selectNode(nodeToSelect) to select a node",
            "itemtype": "property",
            "name": "isSelected",
            "readonly": "",
            "default": "false",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 79,
            "description": "The type of this class. Must be redefined by inherited classes",
            "itemtype": "property",
            "name": "classType",
            "readonly": "",
            "type": "{String}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 87,
            "description": "The 8 handleboxes that will be the resize handles\nthe resize handles will be in this order:\n 0  1  2\n 3     4\n 5  6  7",
            "itemtype": "property",
            "name": "resizeHandles",
            "readonly": "",
            "type": "{Array}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 99,
            "description": "Level of transparency of the node.",
            "default": "1.0",
            "itemtype": "property",
            "name": "globalAlpha",
            "type": "{Number}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 106,
            "description": "Indicate if the node is visible (and so selectable) or not",
            "itemtype": "property",
            "name": "isVisible",
            "default": "true",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 114,
            "description": "If true, the node will be proportionally resized",
            "itemtype": "property",
            "name": "isProportionalResize",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 121,
            "description": "Define the method the detection (or \"pick\") method will be used for this node.\nPossible values CGSGPickNodeMethod.REGION and CGSGPickNodeMethod.GHOST.\n\n<ul>\n    <li>REGION : the detection returns true if the mouse cursor is inside the bounding box of the node</li>\n    <li>GHOST : the detection will use the \"renderGhost\" method of the node to achieve a more accurate detection</li>\n</ul>",
            "itemtype": "property",
            "name": "pickNodeMethod",
            "default": "CGSGPickNodeMethod.REGION",
            "type": "{CGSGPickNodeMethod}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 136,
            "description": "List of the children (empty if this nodes is a leaf)",
            "itemtype": "property",
            "name": "children",
            "readonly": "",
            "type": "{Array}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 144,
            "description": "The constraint region when moving the node",
            "itemtype": "property",
            "name": "regionConstraint",
            "default": "null",
            "type": "{null}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 152,
            "description": "Pivot point to apply a rotation.\nThe point is a value between [0, 0] and [1, 1].\n[0, 0] is the top left corner of the boundging box and [1, 1] the bottom rignt corner.\nSTILL EXPERIMENTAL.",
            "itemtype": "property",
            "name": "rotationCenter",
            "default": "CGSGPosition(0, 0)",
            "type": "{CGSGPosition}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 163,
            "description": "can be fulfilled by the developer to put in whatever he needs",
            "itemtype": "property",
            "name": "userdata",
            "default": "null",
            "type": "{any}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 171,
            "description": "selection attributes\nIf true, this node is clickable and so will be checked by the pickNode function",
            "itemtype": "property",
            "name": "isClickable",
            "default": "true",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 179,
            "description": "If true, this node can be resized by the user. In that case, the dimension property will be affected, not the scale one.",
            "itemtype": "property",
            "name": "isResizable",
            "default": "false",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 186,
            "description": "If true, the node can be dragged by the user",
            "itemtype": "property",
            "name": "isDraggable",
            "default": "false",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 194,
            "description": "Color for the line around this node when selected",
            "itemtype": "property",
            "name": "selectionLineColor",
            "default": "\"#FF6890\"",
            "type": "{Color}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 201,
            "description": "Width for the line around this node when selected",
            "itemtype": "property",
            "name": "selectionLineWidth",
            "default": "2",
            "type": "{Number}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 208,
            "description": "Color for the handle boxes around this node when selected",
            "itemtype": "property",
            "name": "selectionHandleSize",
            "default": "6",
            "type": "{Number}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 215,
            "description": "Color for the handle boxes around this node when selected",
            "itemtype": "property",
            "name": "selectionHandleColor",
            "default": "\"#9068FF\"\"",
            "type": "{Color}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 223,
            "description": "Updated by the scene itself. Don't update it manually.\nTrue if the mice is over the node, false otherwise",
            "itemtype": "property",
            "name": "isMouseOver",
            "readonly": "",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 231,
            "description": "Updated by the scene itself. Don't update it manually.\nTrue if the node is being moved manually, false otherwise",
            "itemtype": "property",
            "name": "isMoving",
            "readonly": "",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 239,
            "description": "Updated by the scene itself. Don't update it manually.\nTrue if the node is being resized manually, false otherwise",
            "itemtype": "property",
            "name": "isResizing",
            "readonly": "",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 248,
            "description": "ID for the node. Should be filled by the developer. The framework will never use it.",
            "itemtype": "property",
            "name": "_id",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 255,
            "description": "parent of this node",
            "itemtype": "property",
            "name": "_parentNode",
            "type": "{CGSGNode}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 263,
            "description": "Relative position of this nodes on the canvas container, relatively to the position of its parent node.\nNever use it to move the node, use translateBy/translateWith/translateTo instead",
            "readonly": "",
            "itemtype": "property",
            "name": "position",
            "default": "CGSGPosition(0, 0)",
            "type": "{CGSGPosition}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 272,
            "description": "Absolute position of this nodes on the canvas container. Generated value. Don't modify it manually\nNever use it to move the node, use translateBy/translateWith/translateTo instead",
            "readonly": "",
            "itemtype": "property",
            "name": "_absolutePosition",
            "access": "private",
            "tagname": "",
            "type": "{CGSGPosition}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 281,
            "description": "Dimension of this nodes on the canvas container\nNever use it to resize the node, use resizeBy/resizeWith/resizeTo instead",
            "readonly": "",
            "itemtype": "property",
            "name": "dimension",
            "default": "CGSGDimension(0, 0)",
            "type": "{CGSGDimension}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 290,
            "description": "Relative scale of this nodes on the canvas container, relatively to the scale of its parent node.\nNever use it to scale or resize the node, use scaleBy/scaleWith/scaleTo instead",
            "readonly": "",
            "itemtype": "property",
            "name": "scale",
            "default": "CGSGScale(1, 1)",
            "type": "{CGSGScale}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 299,
            "description": "Absolute scale of this nodes on the canvas container. Generated value. Don't modify it manually\nNever use it to scale the node, use scaleBy/scaleWith/scaleTo instead",
            "readonly": "",
            "itemtype": "property",
            "name": "_absoluteScale",
            "access": "private",
            "tagname": "",
            "type": "{CGSGScale}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 308,
            "description": "Relative rotation of this nodes on the canvas container, relatively to the rotation of its parent node.\nNever use it to rotate or resize the node, use rotateBy/rotateWith/rotateTo instead",
            "readonly": "",
            "itemtype": "property",
            "name": "rotation",
            "default": "CGSGRotation(0)",
            "type": "{CGSGRotation}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 317,
            "description": "Absolute rotation of this nodes on the canvas container. Generated value. Don't modify it manually\nNever use it to rotate or resize the node, use rotateBy/rotateWith/rotateTo instead",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_absoluteRotation",
            "type": "{CGSGRotation}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 327,
            "itemtype": "property",
            "name": "_isDrag",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 340,
            "description": "true if this node is traversable (recursively) (ie : by the picknode, a traverser, ...)",
            "itemtype": "property",
            "name": "isTraversable",
            "type": "{Boolean}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 357,
            "description": "Callback on mouse over",
            "itemtype": "property",
            "name": "onMouseOver",
            "default": "null",
            "type": "{function}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 364,
            "description": "Callback on mouse out",
            "itemtype": "property",
            "name": "onMouseOut",
            "default": "null",
            "type": "{function}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 371,
            "description": "Callback on mouse up",
            "itemtype": "property",
            "name": "onMouseUp",
            "default": "null",
            "type": "{function}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 378,
            "description": "Callback on mouse or touch click",
            "itemtype": "property",
            "name": "onClick",
            "default": "null",
            "type": "{function}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 385,
            "description": "Callback on mouse or touch double click",
            "itemtype": "property",
            "name": "onDblClick",
            "default": "null",
            "type": "{function}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 393,
            "description": "Callback on drag this node",
            "itemtype": "property",
            "name": "onDrag",
            "default": "null",
            "type": "{function}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 400,
            "description": "Callback on end of drag this node",
            "itemtype": "property",
            "name": "onDragEnd",
            "default": "null",
            "type": "{function}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 407,
            "description": "Callback on resize this node",
            "itemtype": "property",
            "name": "onResize",
            "default": "null",
            "type": "{function}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 414,
            "description": "Callback on end resize this node",
            "itemtype": "property",
            "name": "onResizeEnd",
            "default": "null",
            "type": "{function}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 421,
            "description": "Callback on select this node",
            "itemtype": "property",
            "name": "onSelect",
            "default": "null",
            "type": "{function}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 428,
            "description": "Callback on deselect this node",
            "itemtype": "property",
            "name": "onDeselect",
            "default": "null",
            "type": "{function}",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 439,
            "description": "return the relative region of this node",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getRegion",
            "return": {
                "description": "",
                "type": "CGSGRegion"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 449,
            "description": "return the absolute region of this node",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAbsoluteRegion",
            "return": {
                "description": "",
                "type": "CGSGRegion"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 462,
            "description": "Wipes the canvas context",
            "itemtype": "method",
            "name": "_clearContext",
            "params": [
                {
                    "name": "context",
                    "description": ""
                },
                {
                    "name": "canvasWidth",
                    "description": ""
                },
                {
                    "name": "canvasHeight",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 474,
            "description": "Empty rendering function. Must be overrided by the inherited classes",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 487,
            "description": "Empty ghost rendering function.\nRender here your custom nodes with a single color (cgsgGhostColor).\nThis will be used by the SceneGraph to know if the mouse cursor is over this nodes.",
            "itemtype": "method",
            "name": "renderGhost",
            "params": [
                {
                    "name": "ghostContext",
                    "description": "The context for the ghost rendering"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 503,
            "description": "Render the selection box and handle boxes around the bounding box of this node when selected",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "renderSelected",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 574,
            "description": "Must be called before to start the rendering of the nodes",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "beforeRender",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the nodes",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 593,
            "description": "Must be called after a render",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "afterRender",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the nodes",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 615,
            "description": "Must be called before begin to render the nodes in GHOST mode",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "beforeRenderGhost",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the nodes",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 630,
            "description": "Must be called before begin to render",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "afterRenderGhost",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the nodes",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 641,
            "description": "Mark this nodes as selected",
            "itemtype": "method",
            "name": "setSelected",
            "params": [
                {
                    "name": "isSelected",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 658,
            "description": "return this if this nodes is under the mice cursor\nCan be overrided by inherited klass to optimize this perform.\nThis default function used the ghost rendering method",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "detectSelection",
            "params": [
                {
                    "name": "mousePosition",
                    "description": "A CGSGPosition object",
                    "type": "CGSGPosition"
                },
                {
                    "name": "ghostContext",
                    "description": "",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "absoluteScale",
                    "description": "",
                    "type": "CGSGScale"
                },
                {
                    "name": "canvasWidth",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "canvasHeight",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 699,
            "description": "Check if this nodes is under the cursor position.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "pickNode",
            "params": [
                {
                    "name": "mousePosition",
                    "description": "position of the mouse on the canvas",
                    "type": "CGSGPosition"
                },
                {
                    "name": "absoluteScale",
                    "description": "a CGSGScale absolute relativeScale of all parents",
                    "type": "CGSGScale"
                },
                {
                    "name": "ghostContext",
                    "description": "a copy of the canvas context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "recursively",
                    "description": "if false, don't traverse the children of this nodes",
                    "type": "Boolean"
                },
                {
                    "name": "canvasWidth",
                    "description": "the width of the canvas container",
                    "type": "Number"
                },
                {
                    "name": "canvasHeight",
                    "description": "the height of the canvas container",
                    "type": "Number"
                },
                {
                    "name": "condition",
                    "description": "Condition to be picked\nie: \"color=='yellow'\" or \"classType=='CGSGNodeImage' && this.globalAlpha>0.5\"",
                    "type": "String"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 754,
            "description": "Return true if this nodes has no child",
            "itemtype": "method",
            "name": "isALeaf",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 764,
            "description": "Replace current relative position by this new one",
            "itemtype": "method",
            "name": "translateTo",
            "params": [
                {
                    "name": "newRelativeX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "newRelativeY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbosluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 778,
            "description": "Add new coordinate to the current relative one",
            "itemtype": "method",
            "name": "translateWith",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbosluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 792,
            "description": "Add new coordinate to the current relative one",
            "itemtype": "method",
            "name": "translateBy",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbosluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 806,
            "description": "Replace current dimension by these new ones",
            "itemtype": "method",
            "name": "resizeTo",
            "params": [
                {
                    "name": "newWidth",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "newHeight",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 816,
            "description": "Multiply current dimension by these new ones",
            "itemtype": "method",
            "name": "resizeTBy",
            "params": [
                {
                    "name": "widthFactor",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "heightFactor",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 826,
            "description": "Increase/decrease current dimension with adding values",
            "itemtype": "method",
            "name": "resizeWith",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 837,
            "description": "Replace current relative relativeScale by this new one",
            "itemtype": "method",
            "name": "scaleTo",
            "params": [
                {
                    "name": "scaleX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scaleY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbosluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 852,
            "description": "Multiply this relativeScale factor by the current relative relativeScale",
            "itemtype": "method",
            "name": "scaleBy",
            "params": [
                {
                    "name": "scaleFactorX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scaleFactorY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbosluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 867,
            "description": "Add to the current relative Scale",
            "itemtype": "method",
            "name": "scaleWith",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbosluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 882,
            "description": "Replace current relative relativeRotation by this new oneScale",
            "itemtype": "method",
            "name": "rotateTo",
            "params": [
                {
                    "name": "newAngle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbosluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 896,
            "description": "Multiply this relativeScale factor by the current relative relativeScale",
            "itemtype": "method",
            "name": "rotateBy",
            "params": [
                {
                    "name": "rotateFactor",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbosluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 909,
            "description": "Add this angle to the current relative relativeRotation",
            "itemtype": "method",
            "name": "rotateWith",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "computeAbosluteValue",
                    "description": "(default: true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 924,
            "description": "Add a new nodes into this one, at the end of the list",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "newNode",
                    "description": "the nodes to add as a child",
                    "type": "CGSGNode"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 934,
            "description": "Add a new nodes at a particular index in the list of children.\nIf the index is too large, the nodes will be inserted at the end of the list",
            "itemtype": "method",
            "name": "addChildAt",
            "params": [
                {
                    "name": "newNode",
                    "description": "the nodes to insert as a child",
                    "type": "CGSGNode"
                },
                {
                    "name": "index",
                    "description": "the position of the new child in the list",
                    "type": "Number"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 954,
            "description": "Remove the child passed in parameter and delete it",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "node",
                    "description": "the nodes to remove",
                    "type": "CGSGNode"
                },
                {
                    "name": "recursively",
                    "description": "if true, search the nodes on all the tree from this nodes",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "true if the child was correctly removed or false if the nodes was not found.",
                "type": "Boolean"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 982,
            "description": "remove all children, delete them and reset the current parameters",
            "itemtype": "method",
            "name": "removeAll",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1002,
            "description": "Detach the nodes in index 'index' without delete it. So it's not a child anymore",
            "itemtype": "method",
            "name": "detachChildAt",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1013,
            "description": "Detach the nodes without delete it. So it's not a child anymore",
            "itemtype": "method",
            "name": "detachChild",
            "params": [
                {
                    "name": "childNode",
                    "description": "",
                    "type": "CGSGNode"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1026,
            "description": "Eval the script passed in parameter in \"this\" scope.",
            "itemtype": "method",
            "name": "evalSet",
            "params": [
                {
                    "name": "attribute",
                    "description": "The attribute to be changed",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value for the attribute",
                    "type": "Any"
                }
            ],
            "example": [
                " node.evalSet(\"position.y\", 12);"
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1048,
            "itemtype": "method",
            "name": "eval",
            "params": [
                {
                    "name": "operation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1060,
            "description": "Set the region inside which one this node ca be placed an can move",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setRegionConstraint",
            "params": [
                {
                    "name": "region",
                    "description": "a CGSGRegion relatively to this parent region. Can be null.",
                    "type": "CGSGRegion"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1070,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAbsolutePosition",
            "return": {
                "description": "the absolute positions of this node",
                "type": "CGSGPosition"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1090,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAbsoluteScale",
            "return": {
                "description": "the absolute scale of this node",
                "type": "CGSGScale"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1105,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAbsoluteRotation",
            "return": {
                "description": "the absolute rotation of this node",
                "type": "CGSGRotation"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1120,
            "description": "Compute the absolute position, rotation and scale in the canvas container",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "computeAbsoluteMatrix",
            "params": [
                {
                    "name": "recursive",
                    "description": "if !== false, compute recursively",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1140,
            "itemtype": "method",
            "name": "getAbsoluteLeft",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1147,
            "itemtype": "method",
            "name": "getAbsoluteRight",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1154,
            "itemtype": "method",
            "name": "getAbsoluteTop",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1161,
            "itemtype": "method",
            "name": "getAbsoluteBottom",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1168,
            "itemtype": "method",
            "name": "getAbsoluteWidth",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1175,
            "itemtype": "method",
            "name": "getAbsoluteHeight",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1182,
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1189,
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1197,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isColliding",
            "return": {
                "description": "true if the 2 nodes are colliding. They are colliding if the distance between them is minus than the threshold parameter",
                "type": "Boolean"
            },
            "params": [
                {
                    "name": "node",
                    "description": "a CGSGNode",
                    "type": "CGSGNode"
                },
                {
                    "name": "threshold",
                    "description": "space between the 2 nodes before considering they are colliding",
                    "type": "Number"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1225,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getListOfCollidingBrothers",
            "return": {
                "description": "a Array of nodes this one is colliding with (can be empty)",
                "type": "Array"
            },
            "params": [
                {
                    "name": "threshold",
                    "description": "space between the 2 nodes before considering they are colliding",
                    "type": "Number"
                }
            ],
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1244,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isCollidingABrother",
            "params": [
                {
                    "name": "threshold",
                    "description": "space between the 2 nodes before considering they are colliding",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if this node is colliding one of the other children of its parent node",
                "type": "Boolean"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1294,
            "description": "Must be overrided by inherited classes",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "CGSGNode"
                }
            ],
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNode"
            },
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.node.js",
            "line": 1362,
            "description": "free memory taken by this object and it's children.\nThe 'userData' propoerty won't be freed",
            "itemtype": "method",
            "name": "free",
            "class": "CGSGNode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.circle.js",
            "line": 45,
            "itemtype": "property",
            "name": "radius",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.circle.js",
            "line": 51,
            "itemtype": "property",
            "name": "center",
            "type": "{CGSGPosition}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.circle.js",
            "line": 61,
            "description": "Color  to fill the circle",
            "itemtype": "property",
            "name": "color",
            "default": "\"#444444\"",
            "type": "{String}",
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.circle.js",
            "line": 68,
            "description": "Color to stroke the circle",
            "itemtype": "property",
            "name": "lineColor",
            "default": "\"#222222\"",
            "type": "{String}",
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.circle.js",
            "line": 75,
            "description": "Width of the line that stroke the circle.\nLet 0 if you don't want to stroke the circle.",
            "itemtype": "property",
            "name": "lineWidth",
            "default": "0",
            "type": "{Number}",
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.circle.js",
            "line": 87,
            "itemtype": "property",
            "name": "classType",
            "readonly": "",
            "type": "{String}",
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.circle.js",
            "line": 95,
            "description": "Set the new radius and compute new dimension of the circle",
            "itemtype": "method",
            "name": "setRadius",
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.circle.js",
            "line": 106,
            "description": "Set the new center and compute new position of the circle",
            "itemtype": "method",
            "name": "setCenter",
            "params": [
                {
                    "name": "center",
                    "description": "",
                    "type": "CGSGPosition"
                }
            ],
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.circle.js",
            "line": 117,
            "description": "Custom rendering",
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "override": "",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.circle.js",
            "line": 145,
            "description": "Replace current dimension by these new ones and compute new radius",
            "itemtype": "method",
            "name": "resizeTo",
            "params": [
                {
                    "name": "newWidth",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "newHeight",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.circle.js",
            "line": 157,
            "description": "Multiply current dimension by these new ones",
            "itemtype": "method",
            "name": "resizeTBy",
            "params": [
                {
                    "name": "widthFactor",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "heightFactor",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.circle.js",
            "line": 169,
            "description": "Increase/decrease current dimension with adding values",
            "itemtype": "method",
            "name": "resizeWith",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.circle.js",
            "line": 181,
            "itemtype": "method",
            "name": "_computeResizedRadius",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.circle.js",
            "line": 193,
            "itemtype": "method",
            "name": "renderGhost",
            "params": [
                {
                    "name": "ghostContext",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.circle.js",
            "line": 219,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNodeCircle"
            },
            "class": "CGSGNodeCircle",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.ellipse.js",
            "line": 47,
            "description": "Color  to fill the ellipse",
            "itemtype": "property",
            "name": "color",
            "default": "\"#444444\"",
            "type": "{String}",
            "class": "CGSGNodeEllipse",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.ellipse.js",
            "line": 54,
            "description": "Color to stroke the ellipse",
            "itemtype": "property",
            "name": "lineColor",
            "default": "\"#222222\"",
            "type": "{String}",
            "class": "CGSGNodeEllipse",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.ellipse.js",
            "line": 61,
            "description": "Width of the line that stroke the ellipse.\nLet 0 if you don't want to stroke the ellipse.",
            "itemtype": "property",
            "name": "lineWidth",
            "default": "0",
            "type": "{Number}",
            "class": "CGSGNodeEllipse",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.ellipse.js",
            "line": 70,
            "itemtype": "property",
            "name": "classType",
            "readonly": "",
            "type": "{String}",
            "class": "CGSGNodeEllipse",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.ellipse.js",
            "line": 80,
            "description": "Custom rendering",
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "override": "",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeEllipse",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.ellipse.js",
            "line": 124,
            "itemtype": "method",
            "name": "renderGhost",
            "params": [
                {
                    "name": "ghostContext",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeEllipse",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.ellipse.js",
            "line": 165,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNodeEllipse"
            },
            "class": "CGSGNodeEllipse",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.square.js",
            "line": 45,
            "description": "Color  to fill the square",
            "itemtype": "property",
            "name": "color",
            "default": "\"#444444\"",
            "type": "{String}",
            "class": "CGSGNodeSquare",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.square.js",
            "line": 52,
            "description": "Color to stroke the square",
            "itemtype": "property",
            "name": "lineColor",
            "default": "\"#222222\"",
            "type": "{String}",
            "class": "CGSGNodeSquare",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.square.js",
            "line": 59,
            "description": "Width of the line that stroke the square.\nLet 0 if you don't want to stroke the square.",
            "itemtype": "property",
            "name": "lineWidth",
            "default": "0",
            "type": "{Number}",
            "class": "CGSGNodeSquare",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.square.js",
            "line": 68,
            "itemtype": "property",
            "name": "classType",
            "readonly": "",
            "type": "{String}",
            "class": "CGSGNodeSquare",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.square.js",
            "line": 76,
            "description": "Custom rendering",
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "override": "",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeSquare",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.shape.square.js",
            "line": 102,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNodeSquare"
            },
            "class": "CGSGNodeSquare",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 36,
            "itemtype": "property",
            "name": "WORD",
            "class": "CGSGWrapMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 40,
            "itemtype": "property",
            "name": "LETTER",
            "class": "CGSGWrapMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 44,
            "itemtype": "property",
            "name": "SENTENCE",
            "class": "CGSGWrapMode",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 68,
            "itemtype": "property",
            "name": "_text",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 74,
            "description": "Color for the text",
            "itemtype": "property",
            "name": "color",
            "type": "{String}",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 80,
            "description": "Size of the text, in pt",
            "itemtype": "property",
            "name": "_size",
            "default": "18",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 88,
            "description": "Possible values : \"left\", \"right\", \"center\"",
            "itemtype": "property",
            "name": "_textAlign",
            "default": "\"left\"",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 96,
            "description": "Possible values : \"top\", \"hanging\", \"middle\", \"alphabetic\", \"ideographic\", \"bottom\"",
            "itemtype": "property",
            "name": "_textBaseline",
            "default": "\"top\"",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 104,
            "itemtype": "property",
            "name": "_stroke",
            "default": "false",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 111,
            "itemtype": "property",
            "name": "_typo",
            "default": "\"Arial\"",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 118,
            "description": "Max width for the text. If -1, so no max will be used",
            "itemtype": "property",
            "name": "_maxWidth",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 125,
            "description": "Line height when wrap the text.\nA line height is the size between 2 tops of line",
            "itemtype": "property",
            "name": "_lineHeight",
            "default": "this._size",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 134,
            "itemtype": "property",
            "name": "_wrapMode",
            "default": "CGSGWrapMode.LETTER",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 142,
            "description": "List of sections in the text. a section is delimited by a Carriage Return",
            "itemtype": "property",
            "name": "_sections",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 149,
            "description": "The string to replace the tabulation characters",
            "itemtype": "property",
            "name": "_tabulation",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 157,
            "description": "Method to select the text",
            "itemtype": "property",
            "name": "pickNodeMethod",
            "type": "{Object}",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 164,
            "description": "Metrics of the text.\nComputed each frame it is rendered. Contains only width.\nUse getWidth() and getHeight() methods to get correct values",
            "readonly": "",
            "itemtype": "property",
            "name": "metrics",
            "type": "{Object}",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 174,
            "description": "number of lines in the text",
            "itemtype": "property",
            "name": "_nbLines",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 182,
            "itemtype": "property",
            "name": "classType",
            "type": "{String}",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 192,
            "description": "Set the wrap mode for the text if maxWidth > 0",
            "itemtype": "method",
            "name": "setWrapMode",
            "params": [
                {
                    "name": "mode",
                    "description": "a CGSGWrapMode (CGSGWrapMode.WORD, CGSGWrapMode.LETTER)",
                    "type": "Object"
                },
                {
                    "name": "mustRecomputeDimension",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n     myTextNode.setWrapMode(CGSGWrapMode.WORD, true);"
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 207,
            "description": "Set the string to replace the tabulation characters",
            "itemtype": "method",
            "name": "setTabulationString",
            "params": [
                {
                    "name": "tab",
                    "description": "TExt to replace tabulation (ie: 4 spaces, ...)",
                    "type": "String"
                },
                {
                    "name": "mustRecomputeDimension",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 221,
            "itemtype": "method",
            "name": "setStroke",
            "params": [
                {
                    "name": "s",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "mustRecomputeDimension",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 233,
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "t",
                    "description": "the new text",
                    "type": "String"
                },
                {
                    "name": "mustRecomputeDimension",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 248,
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "s",
                    "description": "the new size (an integer)",
                    "type": "Number"
                },
                {
                    "name": "mustRecomputeDimension",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 260,
            "itemtype": "method",
            "name": "setTextAlign",
            "params": [
                {
                    "name": "a",
                    "description": "A String (Possible values : \"left\", \"right\", \"center\")",
                    "type": "String"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 268,
            "itemtype": "method",
            "name": "setTextBaseline",
            "params": [
                {
                    "name": "b",
                    "description": "A String (Possible values : \"top\", \"hanging\", \"middle\", \"alphabetic\", \"ideographic\", \"bottom\")",
                    "type": "String"
                },
                {
                    "name": "mustRecomputeDimension",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 280,
            "itemtype": "method",
            "name": "setTypo",
            "params": [
                {
                    "name": "t",
                    "description": "\"Arial\" by default",
                    "type": "String"
                },
                {
                    "name": "mustRecomputeDimension",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 292,
            "itemtype": "method",
            "name": "setMaxWidth",
            "params": [
                {
                    "name": "m",
                    "description": "Max Width for the text",
                    "type": "Number"
                },
                {
                    "name": "mustRecomputeDimension",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 305,
            "description": "Line height when wrap the text.\nA line height is the size between 2 tops of line",
            "itemtype": "method",
            "name": "setLineHeight",
            "params": [
                {
                    "name": "l",
                    "description": "height of a line",
                    "type": "Number"
                },
                {
                    "name": "mustRecomputeDimension",
                    "description": "(default : true)",
                    "type": "Boolean"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 319,
            "description": "compute the real dimension of the text",
            "itemtype": "method",
            "name": "computeRealDimension",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 338,
            "description": "Custom rendering",
            "itemtype": "method",
            "name": "render",
            "access": "protected",
            "tagname": "",
            "override": "",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 357,
            "description": "Do the effective render",
            "itemtype": "method",
            "name": "_doRender",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ghostmode.",
                    "description": "If true a square will be rendered instead of the text.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 412,
            "itemtype": "method",
            "name": "_drawText",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ghostmode",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 445,
            "itemtype": "method",
            "name": "_drawSquare",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 457,
            "itemtype": "method",
            "name": "getHeight",
            "override": "",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 473,
            "itemtype": "method",
            "name": "getWidth",
            "override": "",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 482,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_computeDecalX",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 502,
            "description": "Browsers don't render the text in the exact same way.\nIt can be few pixels of difference in Y position",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_computeDecalY",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 527,
            "description": "Empty ghost rendering function.\nRender here your custom nodes with a single color (cgsgGhostColor).\nThis will be used by the SceneGraph to know if the mouse cursor is over this nodes.",
            "itemtype": "method",
            "name": "renderGhost",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "ghostContext",
                    "description": "The context for the ghost rendering",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 549,
            "description": "Render the resize handler",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "renderSelected",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the node",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.text.js",
            "line": 626,
            "override": "",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a copy of this node",
                "type": "CGSGNodeText"
            },
            "class": "CGSGNodeText",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 33,
            "itemtype": "property",
            "name": "LIVE",
            "class": "CGSGWEBVIEWMODE",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 37,
            "itemtype": "property",
            "name": "PREVIEW",
            "class": "CGSGWEBVIEWMODE",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 68,
            "description": "Size of the area around the webview in LIVE mode",
            "itemtype": "property",
            "name": "threshold",
            "default": "20",
            "type": "{Number}",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 75,
            "description": "Color of the area around the webview in LIVE mode",
            "itemtype": "property",
            "name": "color",
            "default": "\"lightGray\"",
            "type": "{String}",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 82,
            "description": "Color of line around the webview in LIVE mode",
            "itemtype": "property",
            "name": "color",
            "default": "\"Gray\"",
            "type": "{String}",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 90,
            "itemtype": "property",
            "name": "classType",
            "type": "{String}",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 96,
            "description": "A HTML tag that contains the web view : an iframe",
            "itemtype": "property",
            "name": "_liveContainer",
            "type": "{HTMLElement}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 104,
            "description": "A CGSGNodeImage rendering the preview of the webpage",
            "itemtype": "property",
            "name": "_previewContainer",
            "type": "{CGSGNodeImage}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 112,
            "description": "URL of the web page",
            "itemtype": "property",
            "name": "_url",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 120,
            "itemtype": "property",
            "name": "_context",
            "type": "{CanvasRenderingContext2D}",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 130,
            "description": "Initialize and add the live container to the HTML body",
            "itemtype": "method",
            "name": "_initLiveContainer",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 143,
            "description": "Initialize and add the CGSGNodeImage",
            "itemtype": "method",
            "name": "_initPreviewContainer",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 161,
            "description": "Create an IFRAME tag in the _liveContainer property",
            "itemtype": "method",
            "name": "_createLiveContainer",
            "access": "private",
            "tagname": "",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 178,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_loadPageAsync",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 187,
            "itemtype": "method",
            "name": "setURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 199,
            "description": "Get a String representing the URL",
            "itemtype": "method",
            "name": "getURL",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 208,
            "description": "Switch between rendering mode",
            "itemtype": "method",
            "name": "switchMode",
            "params": [
                {
                    "name": "mode",
                    "description": "a CGSGWEBVIEWMODE enum : LIVE or PREVIEW",
                    "type": "Object"
                }
            ],
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 225,
            "override": "",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "render\nCustom rendering",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 261,
            "description": "Free the memory taken by this node",
            "override": "",
            "itemtype": "method",
            "name": "free",
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\node\\class.webview.js",
            "line": 276,
            "description": "Return the copy of this node",
            "override": "",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "CGSGNodeWebview"
            },
            "class": "CGSGNodeWebview",
            "module": "Node"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 40,
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 45,
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 52,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "a new CGSGVector2D, clone of this one",
                "type": "CGSGVector2D"
            },
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 61,
            "description": "add to this vector, the value passed in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 72,
            "description": "substract to this vector, the value passed in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "substract",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 83,
            "description": "multiply to this vector, the value passed in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 94,
            "description": "divide to this vector, the value passed in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "divide",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 105,
            "description": "Multiply x and y by f",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "multiplyByFloat",
            "params": [
                {
                    "name": "f",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 116,
            "description": "Divide x and y by f",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "divideByFloat",
            "params": [
                {
                    "name": "f",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 127,
            "description": "Compute the euclidian distance between this vector and the one passe in parameter",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getDistance",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "CGSGVector2D"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 141,
            "description": "rotate this vector around its origin",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 154,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLength",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 163,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getSquaredLength",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\class.vector2D.js",
            "line": 172,
            "description": "Normalize this vector",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "normalize",
            "class": "CGSGVector2D",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\math.js",
            "line": 35,
            "description": "PI x 2",
            "static": 1,
            "itemtype": "property",
            "name": "PI2",
            "class": "CGSGMath",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\math.js",
            "line": 42,
            "description": "Convert degree to radian",
            "itemtype": "method",
            "name": "deg2rad",
            "static": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The radian value",
                "type": "Number"
            },
            "class": "CGSGMath",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\math.js",
            "line": 53,
            "description": "Convert radian to degree",
            "itemtype": "method",
            "name": "rad2deg",
            "static": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The degree value",
                "type": "Number"
            },
            "class": "CGSGMath",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\math.js",
            "line": 64,
            "description": "Compute the rounded integer of n",
            "itemtype": "method",
            "name": "fixedPoint",
            "static": 1,
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The integer value",
                "type": "Number"
            },
            "class": "CGSGMath",
            "module": "Math"
        },
        {
            "file": "src\\utils\\math\\math.js",
            "line": 75,
            "description": "Linear interpolation between 'from' and 'to'",
            "itemtype": "method",
            "name": "lerp",
            "static": 1,
            "params": [
                {
                    "name": "from",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "to",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "weight",
                    "description": "Percentage to apply to the first value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The interpolated value",
                "type": "Number"
            },
            "class": "CGSGMath",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.handlebox.js",
            "line": 42,
            "itemtype": "property",
            "name": "color",
            "type": "{String}",
            "class": "CGSGHandleBox",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.handlebox.js",
            "line": 47,
            "itemtype": "property",
            "name": "size",
            "type": "{Number}",
            "class": "CGSGHandleBox",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.handlebox.js",
            "line": 53,
            "itemtype": "property",
            "name": "_parentNode",
            "type": "{CGSGNode}",
            "access": "private",
            "tagname": "",
            "class": "CGSGHandleBox",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.handlebox.js",
            "line": 59,
            "itemtype": "property",
            "name": "_position",
            "type": "{CGSGPosition}",
            "access": "private",
            "tagname": "",
            "class": "CGSGHandleBox",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.handlebox.js",
            "line": 67,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "context",
                    "description": "the context into render the handle box",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGHandleBox",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.handlebox.js",
            "line": 79,
            "description": "Return true if this handleBox is under the coordinate of the mouse.",
            "itemtype": "method",
            "name": "checkIfSelected",
            "params": [
                {
                    "name": "mousePosition",
                    "description": "",
                    "type": "CGSGPosition"
                },
                {
                    "name": "threshold",
                    "description": "Threshold of detection around the box",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CGSGHandleBox",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.handlebox.js",
            "line": 101,
            "itemtype": "method",
            "name": "translateTo",
            "params": [
                {
                    "name": "newRelativeX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "newRelativeY",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGHandleBox",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 42,
            "description": "return a new object with these attributes",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "CGSGPosition"
            },
            "class": "CGSGPosition",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 52,
            "description": "Replace current relative position by this new one",
            "itemtype": "method",
            "name": "translateTo",
            "params": [
                {
                    "name": "newX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "newY",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGPosition",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 63,
            "description": "Add new coordinate to the current relative one",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "translateWith",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGPosition",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 75,
            "description": "Add new coordinate to the current relative one",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "translateBy",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGPosition",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 122,
            "description": "return a new object with these attributes",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "CGSGRotation"
            },
            "class": "CGSGRotation",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 132,
            "description": "Replace current angle by this new one",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "rotateTo",
            "params": [
                {
                    "name": "newAngle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGRotation",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 142,
            "description": "Multiply this angle by this factor",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "rotateBy",
            "params": [
                {
                    "name": "rotateFactor",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGRotation",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 152,
            "description": "Add this angle to the current one",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "rotateWith",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGRotation",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 162,
            "description": "Add this angle to the current one",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGRotation",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 172,
            "description": "Substract this angle to the current one",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "substract",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGRotation",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 182,
            "description": "Multiply this angle to the current one",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGRotation",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 210,
            "description": "Alias to the x attribute",
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "CGSGDimension",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 216,
            "description": "Alias to the y attribute",
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "CGSGDimension",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 224,
            "description": "Return a new object with these attributes",
            "itemtype": "method",
            "name": "copy",
            "override": "",
            "return": {
                "description": "",
                "type": "CGSGDimension"
            },
            "class": "CGSGDimension",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 234,
            "description": "Replace current dimension by these new ones",
            "itemtype": "method",
            "name": "resizeTo",
            "params": [
                {
                    "name": "newWidth",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "newHeight",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGDimension",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 249,
            "description": "Multiply current dimension by these new ones",
            "itemtype": "method",
            "name": "resizeBy",
            "params": [
                {
                    "name": "widthFactor",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "heightFactor",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGDimension",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 264,
            "description": "Increase/decrease current dimension with adding values",
            "itemtype": "method",
            "name": "resizeWith",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CGSGDimension",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 296,
            "itemtype": "property",
            "name": "position",
            "type": "{CGSGPosition}",
            "class": "CGSGRegion",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 301,
            "itemtype": "property",
            "name": "dimension",
            "type": "{CGSGDimension}",
            "class": "CGSGRegion",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 308,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "CGSGRegion"
            },
            "class": "CGSGRegion",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 316,
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "region",
                    "description": "",
                    "type": "CGSGRegion"
                }
            ],
            "class": "CGSGRegion",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.region.js",
            "line": 325,
            "itemtype": "method",
            "name": "substract",
            "params": [
                {
                    "name": "region",
                    "description": "",
                    "type": "CGSGRegion"
                }
            ],
            "class": "CGSGRegion",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.traverser.js",
            "line": 37,
            "description": "Last results provided by the last check",
            "itemtype": "property",
            "name": "lastResults",
            "type": "{Array}",
            "class": "CGSGTraverser",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.traverser.js",
            "line": 45,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "traverse",
            "params": [
                {
                    "name": "rootNode",
                    "description": "",
                    "type": "CGSGNode"
                },
                {
                    "name": "condition.",
                    "description": "can be null",
                    "type": "String"
                },
                {
                    "name": "excludedNodes",
                    "description": "Array of CGSGNode",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the list of nodes recursively under 'rootNode', accepting the 'condition' and not in 'excludedNodes'",
                "type": "Array"
            },
            "class": "CGSGTraverser",
            "module": "Math"
        },
        {
            "file": "src\\utils\\class.traverser.js",
            "line": 62,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_check",
            "params": [
                {
                    "name": "rootNode",
                    "description": "",
                    "type": "CGSGNode"
                },
                {
                    "name": "condition",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "excludedNodes",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "CGSGTraverser",
            "module": "Math"
        },
        {
            "file": "src\\utils\\util.array.js",
            "line": 35,
            "description": "Remove all the occurrences of the item from the array",
            "itemtype": "method",
            "name": "Array.prototype.without",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "class": "__UTIL_ARRAY__",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.array.js",
            "line": 49,
            "description": "Empties the array",
            "itemtype": "method",
            "name": "Array.prototype.clear",
            "class": "__UTIL_ARRAY__",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.array.js",
            "line": 57,
            "description": "Return a clone of this array",
            "itemtype": "method",
            "name": "Array.prototype.clone",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "__UTIL_ARRAY__",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.array.js",
            "line": 66,
            "description": "Checks whether the specified elements exists in the array or not",
            "itemtype": "method",
            "name": "Array.prototype.contains",
            "params": [
                {
                    "name": "item",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "__UTIL_ARRAY__",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.array.js",
            "line": 81,
            "description": "Removes doubles elements from the array",
            "itemtype": "method",
            "name": "Array.prototype.unique",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "__UTIL_ARRAY__",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.color.js",
            "line": 35,
            "description": "Convert R, G and B value to an hexadecimal code",
            "itemtype": "method",
            "name": "rgb2hex",
            "static": 1,
            "params": [
                {
                    "name": "r",
                    "description": "red value. from 0 to 255."
                },
                {
                    "name": "g",
                    "description": "green value. from 0 to 255."
                },
                {
                    "name": "b",
                    "description": "blue value. from 0 to 255."
                }
            ],
            "return": {
                "description": "an hexadecimal value for the color, starting with a sharp (#)"
            },
            "class": "CGSGColor",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.color.js",
            "line": 48,
            "description": "Convert an hexadecimal code for color to R, G and B",
            "itemtype": "method",
            "name": "hex2rgb",
            "static": 1,
            "params": [
                {
                    "name": "hex",
                    "description": "an hexadecimal code, with or without the starting sharp (#)"
                }
            ],
            "return": {
                "description": "an object encapsulating r, g and b values (from 0 to 255)"
            },
            "class": "CGSGColor",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.color.js",
            "line": 77,
            "description": "Linear interpolation between 2 colors",
            "itemtype": "method",
            "name": "lerp",
            "static": 1,
            "params": [
                {
                    "name": "colorFrom",
                    "description": "a hex color"
                },
                {
                    "name": "colorTo",
                    "description": "a hex color"
                },
                {
                    "name": "weight",
                    "description": ""
                }
            ],
            "return": {
                "description": "a heh value for the interpolated color"
            },
            "class": "CGSGColor",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 35,
            "itemtype": "method",
            "name": "cgsgExist",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the parameter !== null && !== undefined",
                "type": "Boolean"
            },
            "class": "__GLOBAL_METHODS__",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 44,
            "itemtype": "method",
            "name": "cgsgDetectCurrentExplorer",
            "class": "__GLOBAL_METHODS__",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 103,
            "description": "Load asynchronously an external page and return the content (or null)",
            "itemtype": "method",
            "name": "cgsgLoadExternalDoc",
            "async": 1,
            "beta": 1,
            "params": [
                {
                    "name": "url",
                    "description": "Page to load",
                    "type": "String"
                },
                {
                    "name": "successCallback",
                    "description": "an function handler to call on success. The function must take the content ({String} as parameter)",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "an function handler to call on error",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "representing the content of the page loaded. Can be null;",
                "type": "String"
            },
            "class": "__GLOBAL_METHODS__",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 145,
            "itemtype": "method",
            "name": "cgsgGetRealViewportDimension",
            "return": {
                "description": "a CGSGDimension as the real viewport dimension",
                "type": "CGSGDimension"
            },
            "class": "__GLOBAL_METHODS__",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 158,
            "itemtype": "method",
            "name": "cgsgGetDisplayedViewportDimension",
            "return": {
                "description": "a CGSGDimension as the viewport region",
                "type": "CGSGDimension"
            },
            "class": "__GLOBAL_METHODS__",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 168,
            "itemtype": "method",
            "name": "cgsgPointIsInRegion",
            "return": {
                "description": "true if the point is inside the region or around this one in a distance of threshold",
                "type": "Boolean"
            },
            "params": [
                {
                    "name": "point",
                    "description": "a CGSGPosition"
                },
                {
                    "name": "targetRegion",
                    "description": "a CGSGRegion"
                },
                {
                    "name": "threshold",
                    "description": "an integer"
                }
            ],
            "class": "__GLOBAL_METHODS__",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 186,
            "itemtype": "method",
            "name": "cgsgRegionIsInRegion",
            "return": {
                "description": "true if the point is inside the region or around this one in a distance of threshold",
                "type": "Boolean"
            },
            "params": [
                {
                    "name": "region",
                    "description": "a CGSGRegion"
                },
                {
                    "name": "targetRegion",
                    "description": "a CGSGRegion"
                },
                {
                    "name": "threshold",
                    "description": "an integer"
                }
            ],
            "class": "__GLOBAL_METHODS__",
            "module": "Util"
        },
        {
            "file": "src\\utils\\util.global.js",
            "line": 206,
            "description": "Return the mouse or touch position relative to the canvas",
            "itemtype": "method",
            "name": "cgsgGetCursorPosition",
            "params": [
                {
                    "name": "event",
                    "description": "a touch or mouse Event"
                },
                {
                    "name": "canvas",
                    "description": "a handler to the Canvas element"
                }
            ],
            "return": {
                "description": "A CGSGPosition object",
                "type": "CGSGPosition"
            },
            "class": "__GLOBAL_METHODS__",
            "module": "Util"
        },
        {
            "file": "src\\class.scene.js",
            "line": 26,
            "description": "Provides requestAnimationFrame in a cross browser way.",
            "itemtype": "property",
            "name": "cgsgGlobalRenderingTimer",
            "access": "private",
            "tagname": "",
            "type": "{Number}",
            "class": "CGSGScene",
            "module": "Util"
        },
        {
            "file": "src\\class.scene.js",
            "line": 83,
            "itemtype": "property",
            "name": "context",
            "type": "{CanvasRenderingContext2D}",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 89,
            "description": "Multiselection boolean.",
            "itemtype": "property",
            "name": "allowMultiSelect",
            "default": "true",
            "type": "{Boolean}",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 97,
            "description": "The scene graph itself",
            "itemtype": "property",
            "name": "sceneGraph",
            "type": "{CGSGSceneGraph}",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 104,
            "description": "List of the current selected nodes in the scenegraph.",
            "itemtype": "property",
            "name": "selectedNodes",
            "type": "{Array}",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 111,
            "description": "Current framerate of the application",
            "itemtype": "property",
            "name": "fps",
            "type": "{Number}",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 119,
            "itemtype": "property",
            "name": "_isRunning",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 130,
            "itemtype": "property",
            "name": "_frameContainer Handler to the HTML Element displaying the FPS",
            "type": "{HTMLElement}",
            "access": "private",
            "tagname": "",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 137,
            "description": "True if the [CTRL} key is being pressed",
            "itemtype": "property",
            "name": "_keyDownedCtrl",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 145,
            "description": "Current position of the mouse",
            "itemtype": "property",
            "name": "_mousePosition",
            "type": "{CGSGPosition}",
            "access": "private",
            "tagname": "",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 156,
            "itemtype": "property",
            "name": "_listCursors List of the names for the cursor when overring a handlebox",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 166,
            "itemtype": "property",
            "name": "_selectedNode The current last selected node",
            "type": "{null}",
            "access": "private",
            "tagname": "",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 228,
            "description": "Callback on click down on scene event",
            "itemtype": "property",
            "name": "onSceneClickStart",
            "default": "null",
            "type": "{Function}",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 235,
            "description": "Callback on click up on scene event",
            "itemtype": "property",
            "name": "onSceneClickEnd",
            "default": "null",
            "type": "{Function}",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 242,
            "description": "Callback on double click start on scene event",
            "itemtype": "property",
            "name": "onSceneDblClickStart",
            "default": "null",
            "type": "{Function}",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 249,
            "description": "Callback on double click up on scene event",
            "itemtype": "property",
            "name": "onSceneDblClickEnd",
            "default": "null",
            "type": "{Function}",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 256,
            "description": "Callback on start rendering event",
            "itemtype": "property",
            "name": "onRenderStart",
            "default": "null",
            "type": "{Function}",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 263,
            "description": "Callback on end rendering event",
            "itemtype": "property",
            "name": "onRenderEnd",
            "default": "null",
            "type": "{Function}",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 272,
            "description": "Change the dimension of the canvas.\nDoes not really change the dimension of the rendering canvas container,\n but is used by the different computations",
            "itemtype": "method",
            "name": "setCanvasDimension",
            "params": [
                {
                    "name": "newDimension",
                    "description": "a CGSGVector2D",
                    "type": "CGSGVector2D"
                }
            ],
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 290,
            "description": "Remove the nodes selected in the scene graph",
            "itemtype": "method",
            "name": "deleteSelected",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 303,
            "description": "Deselect all nodes",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "deselectAll",
            "params": [
                {
                    "name": "excludedArray",
                    "description": "CGSGNodes not to deselect",
                    "type": "Array"
                }
            ],
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 319,
            "description": "the main rendering loop",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 343,
            "description": "Call this to start the update of the scene",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "startPlaying",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 358,
            "description": "Call this to stop the rendering (and so animation) update",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "stopPlaying",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 368,
            "description": "Inform the SceneGraph that a new render is needed",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "invalidate",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 377,
            "description": "Update the current framerate",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_updateFramerate",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 393,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "showFPS",
            "params": [
                {
                    "name": "elt",
                    "description": "an HTML element to receive the FPS. Can be null if you want to remove the framerate",
                    "type": "HTMLElement"
                }
            ],
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 402,
            "description": "Set the new value for the display ratio.\nThe display ratio is used to resize all the elements on the graph to be adapted to the screen,\ndepending on the reference screen size.\nYou can compute the ratio like this: x = canvas.width/reference.width ; y = canvas.height/reference.height",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setDisplayRatio",
            "params": [
                {
                    "name": "newRatio",
                    "description": "a CGSGScale value",
                    "type": "CGSGScale"
                }
            ],
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 417,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getDisplayRatio",
            "return": {
                "description": "the current display ratio",
                "type": "CGSGScale"
            },
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 426,
            "description": "click mouse Event handler function",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "onMouseDown",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 436,
            "description": "touch down Event handler function",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "onTouchStart",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "TouchEvent"
                }
            ],
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 446,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_clickOnScene",
            "params": [
                {
                    "name": "event",
                    "description": "MouseEvent or TouchEvent",
                    "type": "Event"
                }
            ],
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 524,
            "description": "mouse move Event handler function",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 534,
            "description": "touch move Event handler function",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "onTouchMove",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "TouchEvent"
                }
            ],
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 546,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_moveOnScene",
            "params": [
                {
                    "name": "event",
                    "description": "MouseEvent or TouchEvent",
                    "type": "Event"
                }
            ],
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 765,
            "itemtype": "method",
            "name": "_getDeltaOnMove",
            "params": [
                {
                    "name": "delta",
                    "description": ""
                },
                {
                    "name": "nodeOffsetX",
                    "description": ""
                },
                {
                    "name": "nodeOffsetY",
                    "description": ""
                },
                {
                    "name": "w",
                    "description": ""
                },
                {
                    "name": "h",
                    "description": ""
                },
                {
                    "name": "signeX",
                    "description": ""
                },
                {
                    "name": "signeY",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 794,
            "description": "mouse up Event handler function",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "onMouseUp",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 804,
            "description": "touch up Event handler function",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "onTouchEnd",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "TouchEvent"
                }
            ],
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 814,
            "itemtype": "method",
            "name": "_upOnScene",
            "params": [
                {
                    "name": "event",
                    "description": "MouseEvent or TouchEvent",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 863,
            "description": "mouse double click Event handler function",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "onMouseDblClick",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 873,
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "dblClickOnScene",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "the node that was double-clicked",
                "type": "CGSGNode"
            },
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 894,
            "itemtype": "method",
            "name": "onKeyDownHandler",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "KeyboardEvent"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scene.js",
            "line": 912,
            "itemtype": "method",
            "name": "onKeyUpHandler",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "KeyboardEvent"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "CGSGScene",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 43,
            "description": "Root node of the graph",
            "itemtype": "property",
            "name": "root",
            "type": "{CGSGNode}",
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 50,
            "itemtype": "property",
            "name": "context",
            "type": "{CanvasRenderingContext2D}",
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 55,
            "itemtype": "property",
            "name": "canvas",
            "type": "{HTMLElement}",
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 64,
            "description": "The nodes currently selected by the user",
            "itemtype": "property",
            "name": "selectedNodes",
            "type": "{Array}",
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 70,
            "itemtype": "property",
            "name": "_nextNodeID",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 78,
            "description": "List of the timelines for the animations.\nA timeline consists of a list of animation keys for 1 attribute of the nodes",
            "itemtype": "property",
            "name": "_listTimelines",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 89,
            "description": "Initialize a ghost canvas used to determine which nodes are selected by the user",
            "itemtype": "property",
            "name": "ghostCanvas",
            "type": "{HTMLElement}",
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 103,
            "description": "Initialize the ghost rendering, used by the PickNode function",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "initializeGhost",
            "params": [
                {
                    "name": "width",
                    "description": "The width for the canvas. Must be the same as the rendering canvas",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height for the canvas. Must be the same as the rendering canvas",
                    "type": "Number"
                }
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 116,
            "description": "Wipes the canvas context",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_clearContext",
            "params": [
                {
                    "name": "context",
                    "description": "context to render on",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 128,
            "description": "Render the SceneGraph",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 208,
            "description": "Change the dimension of the canvas.\nDoes not really change the dimension of the rendering canvas container,\n but is used for different computations",
            "itemtype": "method",
            "name": "setCanvasDimension",
            "params": [
                {
                    "name": "newDimension",
                    "description": "a CGSGVector2D",
                    "type": "CGSGVector2D"
                }
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 221,
            "description": "Mark the nodes as selected so the select marker (also called selectedHandlers)\n will be shown and the SceneGraph will manage the moving and resizing of the selected objects.",
            "itemtype": "method",
            "name": "selectNode",
            "params": [
                {
                    "name": "nodeToSelect",
                    "description": "The CGSGNode to be selected"
                }
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 235,
            "description": "Mark the nodes as not selected",
            "itemtype": "method",
            "name": "deselectNode",
            "params": [
                {
                    "name": "nodeToDeselect",
                    "description": "",
                    "type": "CGSGNode"
                }
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 246,
            "description": "Mark all nodes as not selected",
            "itemtype": "method",
            "name": "deselectAll",
            "params": [
                {
                    "name": "excludedArray",
                    "description": "CGSGNodes to not deselect",
                    "type": "Array"
                }
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 264,
            "description": "Recursively traverse the nodes and return the one who is under the mouse coordinates",
            "itemtype": "method",
            "name": "pickNode",
            "params": [
                {
                    "name": "mousePosition",
                    "description": "",
                    "type": "CGSGPosition"
                },
                {
                    "name": "condition",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "CGSGNode"
            },
            "example": [
                "\n this.scenegraph.picknode(mousePosition, 'position.x > 100'); <br/>\n this.scenegraph.picknode(mousePosition, 'position.x > 100 && this.position.y > 100');"
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 294,
            "description": "Remove the child nodes passed in parameter, from the root nodes",
            "itemtype": "method",
            "name": "removeNode",
            "params": [
                {
                    "name": "node",
                    "description": "the nodes to remove",
                    "type": "CGSGNode"
                },
                {
                    "name": "recursively",
                    "description": "if true, try to remove the nodes inside the entire tree",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "true if the nodes was found and removed",
                "type": "Boolean"
            },
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 311,
            "description": "Add a nodes on the scene.\nIf the root does not already exist, this nodes will be used as root",
            "itemtype": "method",
            "name": "addNode",
            "params": [
                {
                    "name": "node",
                    "description": "the nodes to add",
                    "type": "CGSGNode"
                },
                {
                    "name": "parent",
                    "description": "the parent nodes of the new one. If it's null, the root will be used as nodes.",
                    "type": "CGSGNode"
                }
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 331,
            "description": "Add a key",
            "itemtype": "method",
            "name": "addAnimationKey",
            "params": [
                {
                    "name": "node",
                    "description": "handler to the nodes to animate",
                    "type": "CGSGNode"
                },
                {
                    "name": "attribute",
                    "description": "String representing the attribute to animate (\"position.y\", \"rotation.angle\", \"fill\", ...)",
                    "type": "String"
                },
                {
                    "name": "frame",
                    "description": "the date for the key",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "value for the attribute at the frame",
                    "type": "Numnber"
                },
                {
                    "name": "method",
                    "description": "animation method. Must be 'linear' for now",
                    "type": "String"
                },
                {
                    "name": "precompute",
                    "description": "Set to true if you want to precompute the animations steps",
                    "type": "Boolean"
                }
            ],
            "example": [
                " this.sceneGraph.addAnimation(imgNode, \"position.x\", 2000, 200, \"linear\", true);"
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 357,
            "description": "Animate an attribute of a nodes",
            "itemtype": "method",
            "name": "animate",
            "params": [
                {
                    "name": "node",
                    "description": "Handler to the nodes to animate",
                    "type": "CGSGNode"
                },
                {
                    "name": "attribute",
                    "description": "String representing the attribute to animate (\"position.y\", \"rotation.angle\", \"fill\", ...)",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "Duration of the animation, in frame",
                    "type": "Number"
                },
                {
                    "name": "from",
                    "description": "Start value",
                    "type": "Number"
                },
                {
                    "name": "to",
                    "description": "End value",
                    "type": "Number"
                },
                {
                    "name": "method",
                    "description": "Animation method. Must be 'linear' for now",
                    "type": "String"
                },
                {
                    "name": "delay",
                    "description": "Delay before start the animation, in frames",
                    "type": "Number"
                },
                {
                    "name": "precompute",
                    "description": "Set to true if you want to precompute the animations steps",
                    "type": "Boolean"
                }
            ],
            "example": [
                " this.sceneGraph.animate(imgNode, \"position.x\", 700, 0, 200, \"linear\", 0, true);"
            ],
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 377,
            "itemtype": "method",
            "name": "stillHaveAnimation",
            "return": {
                "description": "true if there are still animation key after the current frame",
                "type": "Boolean"
            },
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\class.scenegraph.js",
            "line": 397,
            "description": "Return the timeline corresponding with the nodes and attribute. Create it if does not exists yet",
            "itemtype": "method",
            "name": "getTimeline",
            "params": [
                {
                    "name": "node",
                    "description": "Handle to the nodes",
                    "type": "CGSGNode"
                },
                {
                    "name": "attribute",
                    "description": "String. the attribute name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "CGSGTimeline"
            },
            "class": "CGSGSceneGraph",
            "module": "Scene"
        },
        {
            "file": "src\\constants.js",
            "line": 35,
            "description": "default framerate for the rendering",
            "itemtype": "property",
            "name": "CGSG_DEFAULT_FRAMERATE",
            "default": "60",
            "type": "{Number}",
            "class": "__GLOBAL_CONSTANTS__",
            "module": "Util"
        },
        {
            "file": "src\\constants.js",
            "line": 43,
            "description": "default ratio value for the display",
            "itemtype": "property",
            "name": "CGSG_DEFAULT_DISPLAYRATIO",
            "default": "CGSGScale(1.0, 1.0)",
            "type": "{CGSGScale}",
            "class": "__GLOBAL_CONSTANTS__",
            "module": "Util"
        },
        {
            "file": "src\\constants.js",
            "line": 51,
            "description": "default color for the selection stroke",
            "itemtype": "property",
            "name": "CGSG_DEFAULT_SELECTED_STROKE_COLOR",
            "default": "\"#FF6890\"",
            "type": "{String}",
            "class": "__GLOBAL_CONSTANTS__",
            "module": "Util"
        },
        {
            "file": "src\\constants.js",
            "line": 58,
            "description": "default size for the selection stroke",
            "itemtype": "property",
            "name": "CGSG_DEFAULT_SELECTED_STROKE_SIZE",
            "default": "2",
            "type": "{Number}",
            "class": "__GLOBAL_CONSTANTS__",
            "module": "Util"
        },
        {
            "file": "src\\constants.js",
            "line": 65,
            "description": "default size for the resize handles at the corners of a selected node",
            "itemtype": "property",
            "name": "CGSG_DEFAULT_SELECTED_RESIZEHANDLE_SIZE",
            "default": "6",
            "type": "{Number}",
            "class": "__GLOBAL_CONSTANTS__",
            "module": "Util"
        },
        {
            "file": "src\\constants.js",
            "line": 72,
            "description": "default size for the resize handles at the corners of a selected node",
            "itemtype": "property",
            "name": "CGSG_DEFAULT_SELECTED_RESIZEHANDLE_COLOR\ndefault \"#9068FF\"",
            "type": "{String}",
            "class": "__GLOBAL_CONSTANTS__",
            "module": "Util"
        },
        {
            "file": "src\\constants.js",
            "line": 80,
            "description": "default threshold to detect the handle boxes on a resizable node",
            "itemtype": "property",
            "name": "CGSG_DEFAULT_SELECTED_RESIZEHANDLE_THRESHOLD",
            "default": "3",
            "type": "{Number}",
            "class": "__GLOBAL_CONSTANTS__",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 35,
            "description": "Current version of the framework",
            "itemtype": "property",
            "name": "cgsgVersion",
            "static": 1,
            "type": "{String}",
            "class": "__GLOBAL_PROPERTIES__",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 43,
            "description": "Current display ratio",
            "itemtype": "property",
            "name": "cgsgDisplayRatio",
            "static": 1,
            "type": "{CGSGScale}",
            "class": "__GLOBAL_PROPERTIES__",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 51,
            "description": "Default threshold to detect the handle boxes on a resizable node",
            "itemtype": "property",
            "name": "cgsgResizeHandleThreshold",
            "static": 1,
            "type": "{Number}",
            "class": "__GLOBAL_PROPERTIES__",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 59,
            "description": "List of the parameters of different browsers",
            "itemtype": "property",
            "name": "cgsgExplorerParams",
            "type": "{Object}",
            "class": "__GLOBAL_PROPERTIES__",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 75,
            "description": "Current version of the browser. The framework check the browser at the start and fill this property.",
            "itemtype": "property",
            "name": "cgsgCurrentExplorer",
            "readonly": "",
            "default": "cgsgExplorerParams.UNKNOWN",
            "type": "{Object}",
            "class": "__GLOBAL_PROPERTIES__",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 84,
            "description": "The global ghost context for fake rendering",
            "itemtype": "property",
            "name": "cgsgGhostContext",
            "readonly": "",
            "type": "{CanvasRenderingContext2D}",
            "class": "__GLOBAL_PROPERTIES__",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 92,
            "description": "The current frame in hte global timeline",
            "itemtype": "property",
            "name": "cgsgCurrentFrame",
            "readonly": "",
            "type": "{Number}",
            "class": "__GLOBAL_PROPERTIES__",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 100,
            "description": "The canvas container for this scene graph",
            "itemtype": "property",
            "name": "cgsgCanvas",
            "readonly": "",
            "type": "{HTMLElement}",
            "class": "__GLOBAL_PROPERTIES__",
            "module": "Util"
        },
        {
            "file": "src\\globals.js",
            "line": 108,
            "description": "the color used for the ghost mode rendering",
            "itemtype": "property",
            "name": "_ghostColor",
            "type": "{String}",
            "access": "public",
            "tagname": "",
            "class": "__GLOBAL_PROPERTIES__",
            "module": "Util"
        }
    ]
}